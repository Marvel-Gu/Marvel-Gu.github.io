<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XDU操作系统课设1</title>
      <link href="/2023/11/04/XDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E8%AE%BE1/"/>
      <url>/2023/11/04/XDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AF%BE%E8%AE%BE1/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      
      
      <categories>
          
          <category> xdu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>乐观锁和悲观锁</title>
      <link href="/2023/10/30/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/"/>
      <url>/2023/10/30/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h2><p>最近在学<strong>redis</strong>,学到锁的时候了解到redis的锁机制是<strong>乐观锁</strong>,而<strong>mysql</strong>的锁机制是<strong>悲观锁</strong>,所以写这篇来记录一下我对这两种锁的理解</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观认为不会有别的线程与它来抢占修改,直接对数据进行修改,在提交的时候进行检查,看是否有别的线程修改过数据,如果修改过,就放弃修改,返回错误或者重试.</p><p>乐观锁一般有两种实现方式:<strong>版本号机制和CAS算法</strong></p><h4 id="版本号机制-redis采用的方案"><a href="#版本号机制-redis采用的方案" class="headerlink" title="版本号机制(redis采用的方案)"></a>版本号机制(redis采用的方案)</h4><p>一般是在数据表中加上一个数据版本号 version 字段，表示数据被修改的次数。当数据被修改时，version 值会加一。当线程 A 要更新数据值时，在读取数据的同时也会读取 version 值，在提交更新时，若刚才读取到的 version 值为当前数据库中的 version 值相等时才更新，否则重试更新操作，直到更新成功。</p><h4 id="CAS算法"><a href="#CAS算法" class="headerlink" title="CAS算法"></a>CAS算法</h4><p>CAS 的全称是 <strong>Compare And Swap（比较与交换）</strong> ，用于实现乐观锁，被广泛应用于各大框架中。CAS 的思想很简单，就是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。</p><p>CAS算法会有一个<strong>巨大的问题</strong>,就是<strong><em>ABA问题</em></strong>.如果一个变量 V 初次读取的时候是 A 值，并且在准备赋值的时候检查到它仍然是 A 值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回 A，那 CAS 操作就会误认为它从来没有被修改过。ABA 问题的解决思路是在变量前面追加上<strong>版本号或者时间戳(java采用的方案)</strong>。</p><p>CAS算法还有一个<strong>问题</strong>就是<strong>循环时间长开销大</strong>.CAS 经常会用到自旋操作来进行重试，也就是不成功就一直循环执行直到成功。如果长时间不成功，会给 CPU 带来非常大的执行开销。</p><h4 id="乐观锁的特点："><a href="#乐观锁的特点：" class="headerlink" title="乐观锁的特点："></a>乐观锁的特点：</h4><p>1.乐观锁适用于并发读操作较多的场景，因为读操作不涉及到数据的修改，不需要加锁。<br>2.乐观锁在更新数据时，只有在提交更新操作时才对数据进行版本检查，减少了加锁和解锁的开销。<br>3.乐观锁可能需要进行重试，以处理并发修改引起的冲突。</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>悲观锁总认为会别的线程回来抢占修改,于是采用一种<strong>防御的姿态</strong>将数据锁住,所以每次在获取资源操作的时候都会上锁，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放。也就是说，共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程。</p><h4 id="悲观锁的特点："><a href="#悲观锁的特点：" class="headerlink" title="悲观锁的特点："></a>悲观锁的特点：</h4><p>1.悲观锁适用于并发写操作较多的场景，因为写操作涉及到数据的修改，需要保证数据的一致性。<br>2.悲观锁在加锁期间，其他线程无法访问被锁定的资源，从而保证了数据的完整性。<br>3.悲观锁需要频繁地进行加锁和解锁操作，开销较大。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>经典组合问题</title>
      <link href="/2023/10/18/%E7%BB%8F%E5%85%B8%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98/"/>
      <url>/2023/10/18/%E7%BB%8F%E5%85%B8%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="经典组合问题"><a href="#经典组合问题" class="headerlink" title="经典组合问题"></a>经典组合问题</h1><hr><p>在<strong>Leetcode</strong>刷过<strong>回溯算法</strong>的同学应该都知道,组合问题是回溯算法中经典的一种题型</p><p>本篇博客给大家介绍的就是组合问题三兄弟:<br><strong><em>39.数组总和</em></strong><br><strong><em>40.数组总和II</em></strong><br><strong><em>216.数组总和III</em></strong></p><p>为什么我想说说这三道题呢,因为这三道题的本质就是套回溯算法的模版</p><p>属于只要弄明白了,那么组合问题就一定没问题了,甚至大部分的回溯算法问题也能够解决</p><p>回溯法（back tracking）（探索与回溯法）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。<strong>但当探索到某一步时，发现原先选择并不优或达不到目标，就退回到上一步，重新选择</strong>,这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。</p><p>回溯算法的关键在于找到终止条件,无论是子过程结束的终止条件,还是回退到上一步的终止条件.</p><p>例如 <strong>39数组总和</strong> 这道题中子过程的终止条件为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">    ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>回退到上一步的终止条件为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(target-candidates[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这就是解决问题的关键</p><p><strong>回溯算法模版(伪代码版)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(参数)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">        backtracking(路径，选择列表); <span class="comment">// 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>回溯算法模版(详细版)就是39数组总和的代码</strong></p><h2 id="39数组总和"><a href="#39数组总和" class="headerlink" title="39数组总和"></a>39数组总和</h2><h4 id="1-标准回溯"><a href="#1-标准回溯" class="headerlink" title="1.标准回溯"></a>1.标准回溯</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtrack(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target-candidates[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(candidates[i]);</span><br><span class="line">            backtrack(candidates,target-candidates[i],i);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="40数组总和II"><a href="#40数组总和II" class="headerlink" title="40数组总和II"></a>40数组总和II</h2><p>跟39题非常像,就是要防止重复出现的子集<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        combine(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">combine</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target-candidates[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;start&amp;&amp;candidates[i]==candidates[i-<span class="number">1</span>])&#123;<span class="comment">//最关键的就是这个</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(candidates[i]);</span><br><span class="line">            combine(candidates,target-candidates[i],i+<span class="number">1</span>);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="216数组总和III"><a href="#216数组总和III" class="headerlink" title="216数组总和III"></a>216数组总和III</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=k)&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        combine(k,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">combine</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> n,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">                ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n-i&lt;<span class="number">0</span>||k&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(i);</span><br><span class="line">            combine(k-<span class="number">1</span>,n-i,i+<span class="number">1</span>);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>估值原理听后感</title>
      <link href="/2023/10/12/%E4%BC%B0%E5%80%BC%E5%8E%9F%E7%90%86/"/>
      <url>/2023/10/12/%E4%BC%B0%E5%80%BC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="估值原理听后感"><a href="#估值原理听后感" class="headerlink" title="估值原理听后感"></a>估值原理听后感</h1><hr><p>写本文的原因是在小宇宙上听了面基的一期博客:<a href="https://www.xiaoyuzhoufm.com/episode/6523d01550cf691d244cf8d5?s=eyJ1IjoiNjQ2MzY1NThlZGNlNjcxMDRhZjVlY2Q5In0%3D" style="color: black; text-decoration: underline;text-decoration-style: dotted;">《估值原理》:从没想过还可以这么看估值!</a>,给了我一些思考和启发</p><h2 id="估值"><a href="#估值" class="headerlink" title="估值"></a>估值</h2><p>估值是指评定一项资产当时价值的过程,这是百度百科的定义</p><p>那价值又是什么呢?价值,泛指客体对于主体表现出来的积极意义和有用性.这也是百度百科的定义.</p><p>所以说价值这个东西是因人而异的,每个人都有不同的观念,他们对同一样资产(物品)的看法是不同的,因而同一样资产对不同人来说具有不同的价值.</p><p>比如说,钻石,对于我这种理工科直男来说就是好看一点的碳,没有特殊的价值,但在另一些人眼里就是爱情的象征.</p><p>可虽然对不同的人来说资产的价值是有很大差异的,但是这些资产在市场上基本有着相对稳定的价格,这就可以引出这本书的一个观点:<strong>价值游戏论</strong></p><h2 id="价值游戏论"><a href="#价值游戏论" class="headerlink" title="价值游戏论"></a>价值游戏论</h2><p>价格是估值的最直观体现,所以人们总觉得,估值来源于交易,而交易脱胎于市场.但这其实是一种误解,市场只是提供了交易便利和清算服务而已,估值来自社会</p><p>如果一个社会要提倡某种价值观，就一定会用相应的资产去体现这种价值观.或者说,当一个社会决定用一场游戏来解决某个社会问题时,他们会根据情况选择是棒球赛还是足球赛还是篮球赛</p><p>这场游戏需要一些特定的美德、秩序、规范、共识,这些被鼓励的东西都需要一个很具体的载体.这个载体就是那颗球,那颗球就是被全社会追捧的资产,它一定享受高估值</p><p>房产、股票、黄金、碳排放额，任何一项资产都符合且服从于各自社会的估值体系。这些估值体系根植于全社会的思想观念和风俗习惯之中。</p><p>为什么有的国家股票涨得厉害?</p><p>为什么同一时期有的国家房产涨得厉害而股票却一跌再跌?</p><p>为什么央行释放了流动性，结果却导致房价上涨，股价下跌?</p><p>这是因为人们用资产在玩不同的游戏，使用了不同的规则导致的.所以，在价格涨跌之外，要观察大家在玩什么游戏？观察大家注重什么？要解决什么问题？</p><p>举几个例子:</p><p><strong>1.</strong><br>在金本位时代，这个社会会鼓励勤俭和孝顺。</p><p>因为货币以黄金为锚，很难超发，勤俭节约是有效的，本质是在储存有效购买力。</p><p>但一个人在践行勤俭节约的「美德」，往往是为了自己和孩子积攒更多的生活资料</p><p>金本位时代也一定鼓励储蓄这个美德，储蓄意味着不提现，不去兑换实物黄金。因为金本位时代的黄金储备根本不足以应对大量提取实物黄金。金本位就是一个承诺而已。</p><p>英格兰银行鼓励你把纸币存入银行，并支付利息，它对日常的纸币兑换黄金保证照付不议，它维护物价稳定，提倡省吃俭用，量入为出，他给你足够多的理由不去提取黄金，安心持有纸币。</p><p>喜欢储蓄，意味着拥有更多黄金，从而拥有更高的社会地位。</p><p>同时，当全社会都在玩这个游戏时，没什么出路的英国人也热衷去海外拓展殖民地获得更多的黄金，以便回国后提高自己的社会地位。</p><p><strong>2.</strong><br>在信用本位时代，把一堆钞票像黄金一样留给后代已经值不了几个钱了，社会需要别的传承资产。</p><p><strong><em>如果社会选择了房产游戏，它就在鼓励「勇敢」和「坚忍」。一个人必须勇敢地背上高额房贷，同时坚忍地努力工作30年来偿还月供。</em></strong></p><p>对男人来说，房产就像女人的钻石，那是阶层等级的标识，有了它，意味着择偶优先权。</p><p>房价越贵，就会有更多的年轻人对其趋之若骛，努力奋斗。而黄金的价格涨幅远远落后于房地产价格的涨幅。这说明我们现在和金本位时代玩的就是两种不同的游戏。</p><p><strong>3.</strong><br>如果社会选择了股票游戏，它就在鼓励「独立」和「效率」两种美德。</p><p>公司需要想办法，尤其是依靠科技和创新来提高社会的效率，以便拿到更高的估值。</p><p>本书作者周洛华也是一位股民，他以前并没有意识到股票是提升效率游戏的球，房产是地位晋升游戏的球。</p><p>他把股票当成了让自己地位晋升的球，结果他炒股总是亏钱。</p><p><strong>从游戏的角度看待估值，就会发现这场游戏把散户套在高位还是挺合理的。</strong></p><p><strong>只有把大量的散户投资人套在高位，才能使得他们放弃财富自由的幻想，才能使得他们努力工作。</strong></p><p><strong>这个社会没办法同时快速地让人大规模地发财。</strong></p><hr><p>当某项资产成为国民性的关键资产时，<strong>它一定是「低换手率」的</strong>。或者说，这类资产的换手率一定是被刻意压低的。</p><p>比如我们刚提到的，金本位时代鼓励储蓄，从而降低了黄金兑换。</p><p>再比如我们一线楼市之前的认房又认贷，京沪存量房源大概800万套，但每年的成交量只有二三十万套，年换手率不到5%。</p><p>只要共识还在、信心还在，你知道卖的时候市场的承接力接得住，也愿意接，那就长期持有。</p><p>金本位时代，大家愿意持有纸币而不是黄金，因为他们知道只要去英格兰银行，纸币就可以换出黄金。</p><p>类似的，大家相信京沪永远涨，就愿意持有房子，而不是急于把它抛掉。</p><p>大家相信美股长牛，就愿意持有股票，而不是像2020年3月那样在市场上疯狂抛售。</p><p><strong><em>社会在玩不同的游戏,就会导致不同的资产成为国民性资产,比如中国的房产,美国的股票,欧洲的债券,这不仅仅是由社会的发展阶段决定的,还夹杂了制定规则的阶级的强烈意志(他们总要保障自己的利益)</em></strong></p><p>只有少数的人能get到游戏的规则,从而获取高额收益,并且要时刻警醒,关注游戏规则,否则之前获得的高额收益很快就会消失</p><p>说个最近看到的例子,美国疯狂印钞大放水,美国政府的欠债也越来越多,可是他们的负债率却下降了,原因是在这场大放水中他们使资产的上涨幅度超过了负债的上涨幅度.正应了拜登曾说的一句话,<strong>通胀不是什么可怕的东西,通胀是一种武器.</strong></p><p>这就是美国的游戏,我们在他人制定的游戏规则里,永远不可能成为最终赢家,或者说我们不可能一直赢下去.</p><h2 id="估值责任论"><a href="#估值责任论" class="headerlink" title="估值责任论"></a>估值责任论</h2><p><strong>社会有显然的分成倾向。而且它不仅分层，还会垂直流动。</strong></p><p>中产和底层人民相互流动,只有最顶层相对稳定.这其实就是游戏规则的制定者希望看到的,他们永远处于最顶层,通过改变规则使得社会更加高效,社会的整体素质提高,获得更多的利益,得到更好的服务.</p><p>经济学教科书里有两种「和平方式」来实现垂直流动——</p><p>一是个体提高效率，勤奋努力的人会提高自己的社会地位。</p><p>二是全面的经济危机，主要是每当中层和上层过于拥挤时，通过危机出清掉一批人，给后来者腾出比赛场地。</p><p>有趣的是，每次切换游戏后，社会的主流价值观和风尚也会随之改变。人们会谴责上一场游戏中的胜者，从他们身上总结出一大堆缺点和毛病，并将其视为他们财富消亡的原因。</p><p>其实就是原来的游戏可能因为社会各阶层固化而无法刺激大家努力奋斗，玩不下去了(少数人的利益无法得到更好的保障了)</p><p>与此同时，接下来社会还会崇尚一种新的风尚，用来解释为什么有些人在新一轮经济繁荣中胜出。</p><p><strong>归根到底，是社会换了个新游戏。</strong></p><p>所以，每次金融危机发生之前，社会总是一片繁荣，人们已经习惯于相信自己的才能、努力和眼光。</p><p>每次危机之前，社会中上层都已经人满为患。</p><p>类似的，牛市末期有个重要特征，就是大家都在讨论财富自由和提前退休。<strong>呵呵，没门！社会不会答应的，它不会让那么多人都实现财富自由，进入上流社会，游山玩水，游手好闲，最后安享晚年。</strong></p><p>如果真的这样，那将是一场系统的灾难。</p><h2 id="结束的话"><a href="#结束的话" class="headerlink" title="结束的话"></a>结束的话</h2><p>在本篇博客中,我只介绍了《估值原理》这本书中的一部分内容,是我认可的主要部分,当然也夹杂了一些个人的看法,希望大家多多包涵一个年轻人不成熟的观点.想要了解更多,可以去小宇宙听这篇博客,也可以自己买来这本书阅读,最后感谢您的阅读.</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>个人博客的搭建(全流程覆盖)</title>
      <link href="/2023/09/26/2023-9-26-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/09/26/2023-9-26-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客的搭建教程推荐-踩坑记录"><a href="#个人博客的搭建教程推荐-踩坑记录" class="headerlink" title="个人博客的搭建教程推荐+踩坑记录"></a>个人博客的搭建教程推荐+踩坑记录</h1><hr><h2 id="本人博客的说明"><a href="#本人博客的说明" class="headerlink" title="本人博客的说明"></a>本人博客的说明</h2><p>趁着国庆假期,花了大概两天时间将这个博客搭了起来,主要是走了一些弯路(哭),其实主要是上午都在睡懒觉(雾)</p><p>采用的是<a href="https://hexo.io/zh-cn/index.html%" style="color: black; text-decoration: underline;text-decoration-style: dotted;">hexo框架</a></p><p>主题是<a href="https://butterfly.js.org/" style="color: black; text-decoration: underline;text-decoration-style: dotted;">butterfly</a>,加上了个人的一些魔改,由于本人喜欢简洁的风格,所以魔改的内容并不算太多</p><p>部署了两个远程仓库,一个是我的github仓库,另一个是我在阿里云服务器上的仓库</p><hr><h2 id="教程推荐"><a href="#教程推荐" class="headerlink" title="教程推荐"></a>教程推荐</h2><p>自学能力比较强的同学可以去看官方文档,上一趴已有链接</p><p>推荐一些保姆级教程: </p><ol><li><a href="https://www.fomal.cc/" style="color: black; text-decoration: underline;text-decoration-style: dotted;">Fomalhaut的博客</a>,既有基础教程,也包含了魔改教程,还有<a href="https://space.bilibili.com/220757832" style="color: black; text-decoration: underline;text-decoration-style: dotted;">Fomalhaut的bilibili主页</a></li><li><a href="https://blog.anheyu.com/" style="color: black; text-decoration: underline;text-decoration-style: dotted;">安知鱼的博客</a>,内容十分详细,安知鱼主题也十分好看哦,佬的<a href="https://space.bilibili.com/372204786" style="color: black; text-decoration: underline;text-decoration-style: dotted;">bilibili主页链接</a></li></ol><p>建议小白跟着视频一步步操作,掌握了基础就可以去魔改自己想要的效果啦</p><hr><h3 id="推荐一些别的主题"><a href="#推荐一些别的主题" class="headerlink" title="推荐一些别的主题"></a>推荐一些别的主题</h3><ol><li><a href="https://github.com/xzhih/hexo-theme-casper" style="color: black; text-decoration: underline;text-decoration-style: dotted;">casper主题</a>,这算是我看下来最简洁,最有大厂范的主题了,如果我还有空折腾的话,这就是我下一个博客的主题了</li><li><a href="https://docs.anheyu.com/" style="color: black; text-decoration: underline;text-decoration-style: dotted;">安知鱼</a>,这也是我很喜欢的一个主题,casper,忘了我吧(大雾)</li><li><a href="https://github.com/theme-next/hexo-theme-next" style="color: black; text-decoration: underline;text-decoration-style: dotted;">next主题</a></li><li><a href="https://github.com/litten/hexo-theme-yilia" style="color: black; text-decoration: underline;text-decoration-style: dotted;">yimlia主题</a></li></ol><p>更多主题可以去<del>世界最大男性交友网站</del><strong>github</strong>自行寻找</p><hr><h2 id="关于服务器"><a href="#关于服务器" class="headerlink" title="关于服务器"></a>关于服务器</h2><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>觉得麻烦的同学可以直接使用github当网站托管,省事又省钱,就是访问速度有点捉襟见肘</p><h3 id="网站托管"><a href="#网站托管" class="headerlink" title="网站托管"></a>网站托管</h3><p>还有就是一些网站托管平台,像vercel,cloudflare等,不过会经常被墙就是了,似乎vercel已经寄了,托管和加速了太多诈骗网站(乐)</p><h3 id="拥有自己的云服务器-推荐"><a href="#拥有自己的云服务器-推荐" class="headerlink" title="拥有自己的云服务器(推荐)"></a>拥有自己的云服务器(推荐)</h3><p>有闲置的机器并且喜欢折腾的同学可以自己搞,网上有很多教程,不过大多数人应该没有多余的机器,所以就不详细描述了</p><p>国内云服务器厂商的主流选择就是阿里云,华为云和腾讯云,当然你去白嫖国外云服务器厂商的服务器也是可以的</p><hr><h2 id="将网站部署到自己的服务器上"><a href="#将网站部署到自己的服务器上" class="headerlink" title="将网站部署到自己的服务器上"></a>将网站部署到自己的服务器上</h2><p>推荐推荐yyyz的<a href="https://www.bilibili.com/video/BV1qU4y1K7Hk/?spm_id_from=333.999.0.0&vd_source=26068b3fc005480cb76f959e037a7a07" style="color: black; text-decoration: underline;text-decoration-style: dotted;">视频教程</a>和<a href="https://www.yyyzyyyz.cn/" style="color: black; text-decoration: underline;text-decoration-style: dotted;">博客</a></p><p>建议跟着一步步去操作,否则你就会发现通过服务器的公网ip访问不到你的博客,当然博客已经写的很详实了,有基础可以直接跟着操作</p><p>我用的是阿里云的服务器,建议先把白嫖六个月服务器要求的教程做了,这样你几乎不会碰到什么困难(血泪教训)</p><hr><h2 id="关于上线网站的手续"><a href="#关于上线网站的手续" class="headerlink" title="关于上线网站的手续"></a>关于上线网站的手续</h2><p>几乎全部流程都可以在云服务厂商那走完,而且还有代办服务,只不过要钱就是了</p><p>首先,要有自己的域名,在你的云服务厂商那购买即可,大家可以根据自己的经济实力和喜好购买,主要自己玩可以买.cc,主要访问者在国内推荐.cn,希望国际化一点就买.com(就是经济实力不允许,太贵了),建议多买两年,买完走报备流程,或者流程走完再买都可</p><p>然后就是ICT备案了,各个省份的要求有所不同,建议选择自己身份证所在地区进行报备,可能会少一些麻烦,我在江苏报备,需要身份证照片,人脸验证,居住证,两份承诺书,承诺视频,还有居住证(学生没有的话传身份证即可),个人觉得很繁琐.还有以博客的名义建站,站点名称需要带上个人真实姓名,互联网咩有隐私(悲)</p><p>最后就是公安备案啦,网上有说可备可不备的,但是建议备案一下,国内的监管越来越严了,到时候出事了就不好了</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
