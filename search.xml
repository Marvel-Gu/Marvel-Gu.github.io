<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的第一次欧洲solotrip(波兰+挪威)</title>
      <link href="/2025/08/23/solotrip/"/>
      <url>/2025/08/23/solotrip/</url>
      
        <content type="html"><![CDATA[<h2 id="我的第一次欧洲solotrip-波兰-挪威">我的第一次欧洲solotrip(波兰+挪威)</h2><p>这里简单更新下手机里的照片, 很多照片在相机里, 我的读卡器丢了😅</p><p>第一次在欧洲住青旅, 和两大叔住一起, 我到的时候他们已经睡了🙃, 所以我觉得多人合住的青旅还是少住, 第一次在国内住青旅的体验也是极差, 第一次在欧洲住的体验也不是太好, 也许是我挑的不够谨慎?</p><p><img src="https://s3.bitiful.net/pb01/L305.webp" alt="avatar"></p><p>奥斯维辛参观, 真是一段值得铭记的历史, 来的中国人真的很少, 纪念品店有日语和韩语, 就是没有中文<br><img src="https://s3.bitiful.net/pb01/L306.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L307.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L308.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L309.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L310.webp" alt="avatar"></p><p>很不错的克拉科夫, 吃的也好吃又便宜<br><img src="https://s3.bitiful.net/pb01/L311.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L312.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L313.webp" alt="avatar"></p><p>我第一次在机场过夜睡的地方🫠<br><img src="https://s3.bitiful.net/pb01/L314.webp" alt="avatar"></p><p>机场早餐, 还挺好吃<br><img src="https://s3.bitiful.net/pb01/L315.webp" alt="avatar"></p><p>卑尔根徒步<br><img src="https://s3.bitiful.net/pb01/L316.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L317.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L318.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L319.webp" alt="avatar"></p><p>书店里的书都很精致<br><img src="https://s3.bitiful.net/pb01/L320.webp" alt="avatar"></p><p>经典房子照片✌️<br><img src="https://s3.bitiful.net/pb01/L321.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L322.webp" alt="avatar"></p><p>坐了五个多小时的游轮, 峡湾真的壮美<br><img src="https://s3.bitiful.net/pb01/L323.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L324.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L325.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L326.webp" alt="avatar"></p><p>flam小镇, 太小了, 而且物价有点逆天, 我吃到了差不多170rmb的蛋炒饭🙂<br><img src="https://s3.bitiful.net/pb01/L327.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L328.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L329.webp" alt="avatar"></p><p>高山小火车, 这个我觉得真不如瑞士<br><img src="https://s3.bitiful.net/pb01/L330.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L331.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L332.webp" alt="avatar"></p><p>接下来逆天的就来了, 有一节车厢出轨了, 导致火车来不了, 等了快三个小时才有大巴来接我们到另一个火车站<br><img src="https://s3.bitiful.net/pb01/L333.webp" alt="avatar"></p><p>最后凌晨三点多到了奥斯陆<br><img src="https://s3.bitiful.net/pb01/L334.webp" alt="avatar"></p><p>蒙克美术馆<br><img src="https://s3.bitiful.net/pb01/L335.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L336.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L337.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L338.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L339.webp" alt="avatar"></p><p>咖啡探店, 去了Java和Tim Wendelboe, 虽然喝不太明白😜<br><img src="https://s3.bitiful.net/pb01/L340.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L341.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L342.webp" alt="avatar"></p><h4 id="新增照片">新增照片</h4><p>回来之后立马买了读卡器, 整理照片的时候发现我似乎无法理解当时的自己, 究竟在拍些什么??? 没几张能看的😇. 立个flag, 国庆猛更新一波, 一定把鸽了快四个月的巴黎更新了🧐</p><p>几乎都是在卑尔根和游轮上的照片, 在奥斯陆跟大巴上新认识的phd朋友逛了逛, 然后一个人的时候又发生了点倒霉事, 所以几乎没咋拍</p><p><img src="https://s3.bitiful.net/pb01/L351.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L352.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L353.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L354.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L355.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L356.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L357.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/L358.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/359.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/360.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/361.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/362.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/363.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/364.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/365.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/366.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/367.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/368.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/369.webp" alt="avatar"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Travelling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025七八月生活记录</title>
      <link href="/2025/08/23/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/08/23/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="fea7fc7e51eb958063bf50126014d99b0c249c8c879812778e938f706f72ed57"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">加密文章, 密码是博主名字首字母+生日(3位小写字母+8位数字)</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI配置时使用Makefile有哪些好处?</title>
      <link href="/2025/08/13/CI_Makefile/"/>
      <url>/2025/08/13/CI_Makefile/</url>
      
        <content type="html"><![CDATA[<h1 id="CI配置时使用Makefile有哪些好处">CI配置时使用Makefile有哪些好处?</h1><h2 id="一、什么是-Makefile？">一、什么是 Makefile？</h2><p><code>Makefile</code> 本质上是一个包含了<strong>一系列规则</strong>的文件。这些规则定义了如何编译和链接程序，每一个规则都由以下三个部分组成：</p><ul><li><strong>目标（Target）</strong>: 想要生成的文件或想要执行的操作的名称，比如 <code>install</code>、<code>test</code>、<code>clean</code> 等。</li><li><strong>依赖（Prerequisites）</strong>: 为了生成目标，所需要依赖的文件或其他目标。</li><li><strong>命令（Commands）</strong>: 为了通过依赖来生成目标所需要执行的 shell 命令。</li></ul><p>一个 <code>Makefile</code> 的基本结构如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">target: prerequisite1 prerequisite2</span></span><br><span class="line">     command1</span><br><span class="line">     command2</span><br></pre></td></tr></table></figure><p><strong>关键特性：</strong></p><ol><li><strong>自动化</strong>: <code>make</code> 工具会自动读取 <code>Makefile</code> 并执行指定的命令，从而自动化编译、测试、部署等一系列任务。</li><li><strong>抽象化</strong>: 可以将复杂的、多步骤的 shell 命令封装在一个简单的 <code>make</code> 命令背后。例如，<code>make test</code> 可能包含了安装依赖、启动数据库、运行测试套件、生成报告等多个步骤。</li></ol><h2 id="二、为什么在-CI-配置中使用-Makefile？">二、为什么在 CI 配置中使用 Makefile？</h2><p>将 <code>Makefile</code> 引入 CI 配置文件可以带来以下核心优势：</p><h4 id="1-本地与云端环境统一-Dry-run-Locally">1. <strong>本地与云端环境统一 (Dry-run Locally)</strong></h4><p>这是使用 <code>Makefile</code> 最显著的好处之一。开发者可以在自己的开发机上执行 <code>make test</code> 或 <code>make build</code>，并期望得到与 CI服务器上完全一致的执行结果。这使得开发者在提交代码前就能快速地对 CI 流程进行测试和调试，而无需等待漫长的 CI pipeline 运行，从而极大地缩短了反馈周期。</p><ul><li><p><strong>没有 <code>Makefile</code> 的情况</strong>: 开发者需要阅读冗长的 <code>.gitlab-ci.yml</code> 或其他 CI 配置文件，并手动在本地终端执行其中复杂的 <code>script</code> 片段。这个过程不仅繁琐，而且容易出错。</p></li><li><p><strong>使用 <code>Makefile</code> 的情况</strong>: CI 配置文件变得异常简洁。</p><ul><li><strong>.github-ci.yml 示例:</strong><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">   <span class="attr">runs-on:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">   <span class="attr">strategy:</span></span><br><span class="line">     <span class="attr">matrix:</span></span><br><span class="line">       <span class="attr">os:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">ubuntu-latest</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">macos-latest</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">windows-latest</span></span><br><span class="line">   <span class="attr">steps:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">            </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Rust</span> <span class="string">toolchain</span></span><br><span class="line">       <span class="attr">uses:</span> <span class="string">./.github/actions/setup-builder</span></span><br><span class="line">            </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Rust</span> <span class="string">artifacts</span></span><br><span class="line">       <span class="attr">uses:</span> <span class="string">Swatinem/rust-cache@v2</span></span><br><span class="line">            </span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">       <span class="attr">run:</span> <span class="string">make</span> <span class="string">build</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>Makefile中的build:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">build:</span><br><span class="line">cargo build --all-targets --all-features --workspace</span><br></pre></td></tr></table></figure><p>开发者在本地和 CI 服务器上都只需要执行相同的命令：<code>make build</code>。</p><h4 id="2-简化与抽象化-CI-配置">2. <strong>简化与抽象化 CI 配置</strong></h4><p>现代 CI/CD 流程可能非常复杂，包含代码检查、单元测试、集成测试、构建 Docker 镜像、推送到制品库、部署到不同环境等众多步骤。如果将所有这些逻辑都直接写在 CI 平台的 YAML 配置文件中，会导致文件变得异常冗长、难以阅读和维护。</p><p><code>Makefile</code> 通过将这些复杂的脚本逻辑封装在简单的目标（target）中，极大地简化了 CI 配置文件。CI 的配置文件只负责<strong>调用</strong>任务，而 <code>Makefile</code> 负责<strong>定义</strong>任务的具体执行方式。</p><h4 id="3-提高可重用性和可移植性">3. <strong>提高可重用性和可移植性</strong></h4><p><code>Makefile</code> 是一个与具体 CI/CD 平台无关的通用工具。</p><ul><li><strong>跨平台重用</strong>: 如果团队决定从 Jenkins 迁移到 GitLab CI，或者需要同时支持多个 CI 平台，无需重写所有的构建和测试脚本。只需要在新的 CI 平台的配置文件中调用相同的 <code>make</code> 命令即可。核心的业务逻辑（<code>Makefile</code> 中的内容）可以被无缝迁移和重用。</li><li><strong>项目间重用</strong>: 对于遵循相似构建流程的多个项目，它们可以共享或复用 <code>Makefile</code> 的大部分内容，只需针对特定项目进行微调。</li></ul><h4 id="4-利用-make-的增量构建能力">4. <strong>利用 <code>make</code> 的增量构建能力</strong></h4><p><code>make</code> 的设计初衷就是为了处理依赖关系和增量构建。虽然在无状态的 CI 环境中（每次都从零开始），这个优势可能不那么明显。但在某些场景下，例如配置了缓存（caching）的 CI pipeline，<code>make</code> 可以智能地判断哪些部分无需重新构建，从而显著加快 CI 的运行速度。这个对于Rust项目没什么优势😄，cargo本身自带了增量构建的能力。</p>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI </tag>
            
            <tag> Makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows通过Rust使用DuckDB碰到的问题</title>
      <link href="/2025/08/01/win_rust_duckdb/"/>
      <url>/2025/08/01/win_rust_duckdb/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows通过Rust使用DuckDB碰到的问题">Windows通过Rust使用DuckDB碰到的问题</h2><p>DuckDB的一些问题只在windows上有, macOS和Linux上没有, 所以记录一下</p><h3 id="报错-error-linking-with-link-exe-failed-exit-code-1120">报错: error: linking with <code>link.exe</code> failed: exit code: 1120</h3><p>具体报错如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">error: linking with `link.exe` failed: exit code: 1120</span><br><span class="line">  |</span><br><span class="line">  = note: &quot;D:\\cpptools\\VC\\Tools\\MSVC\\14.44.35207\\bin\\HostX64\\x64\\link.exe&quot; &quot;/NOLOGO&quot; &quot;C:\\Users\\levit\\AppData\\Local\\Temp\\rustcjagjai\\symbols.o&quot; &quot;&lt;72 object files omitted&gt;&quot; &quot;D:\\RustProject\\swan-lake\\Playground\\duckdb-eval\\target\\debug\\deps/&#123;libduckdb-25263ba118ed6ba4.rlib,libsmallvec-c183f9d47da38243.rlib,libcast-49db356ef74b85f3.rlib,librust_decimal-3a5b9cbf4877a907.rlib,libserde-22d9db03cb63b99f.rlib,libarrayvec-d50e6e157ab9318a.rlib,libfallible_streaming_iterator-04f60b605fc0f73f.rlib,libfallible_iterator-68563fc10ffcf3b8.rlib,libstrum-b79e927e16832d4d.rlib,libhashlink-3ba134715094e3cb.rlib,libarrow-5ac1a72fe2a27e5d.rlib,libarrow_row-e8aed7be06733ce6.rlib,libarrow_string-7973c0bda726cc56.rlib,libregex-710eef4d38ee3fd6.rlib,libregex_automata-db83f4512e1b5c7d.rlib,libaho_corasick-24adfb8458d9ade7.rlib,libregex_syntax-b6714b60b7bc7e4a.rlib,libmemchr-da6ba839bbe8ebcc.rlib,libarrow_cast-1a27c9e1a3dc2694.rlib,libatoi-e6ebe25009fa1943.rlib,libryu-37203d2c467f8da8.rlib,libbase64-0b360acb9dc29ba9.rlib,libcomfy_table-251418f61f10dac3.rlib,libunicode_segmentation-0b8b78906ba6799f.rlib,libunicode_width-5ad620de9423ed41.rlib,liblexical_core-a899d107d4a1caf3.rlib,liblexical_write_float-41eba6196db745d8.rlib,liblexical_write_integer-75f049f9e63a6664.rlib,liblexical_parse_float-43b8fed49b79bfbd.rlib,liblexical_parse_integer-8bdd1cf08a8114d2.rlib,liblexical_util-baf5b3dfc43aa25a.rlib,libstatic_assertions-da84d677a2cbb685.rlib,libarrow_arith-79812951151e328c.rlib,libarrow_ord-4db3a0b5e663b54b.rlib,libarrow_select-55fc1a24d0d3ef75.rlib,libarrow_array-01ea262a82a871bf.rlib,libahash-94b54058c337bbde.rlib,libgetrandom-2a89a66638c7e38e.rlib,libonce_cell-84b94b97ea24f67b.rlib,libzerocopy-e1dffdfb07107702.rlib,libhashbrown-5a1847c4e38fdd05.rlib,libfoldhash-c7e1bc489b06a6d3.rlib,libchrono-d9f9b240257d9e4e.rlib,libwindows_link-71c4caf817584dd3.rlib,libarrow_data-a31197f5464dcbdc.rlib,libarrow_schema-f4ee27f94a7e2fd1.rlib,libbitflags-05ed3484cc55db94.rlib,libarrow_buffer-a0c15988dc061bdc.rlib,libbytes-441da4d76b13cbcb.rlib,libhalf-747f7d890291de0f.rlib,libcfg_if-3d39ba26ec35ebac.rlib,libnum-f0aa498cc9e9b9e3.rlib,libnum_iter-b389ef6f565c05d2.rlib,libnum_rational-1b7cd3981135e2f8.rlib,libnum_complex-2537c84c16f51dd3.rlib,libnum_bigint-737a93fc7600053a.rlib,libnum_integer-e7cba3faece1f759.rlib,libnum_traits-1701bc9abe802865.rlib,liblibduckdb_sys-26b80393c1b83bef.rlib&#125;.rlib&quot; &quot;&lt;sysroot&gt;\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib/&#123;libstd-*,libpanic_unwind-*,libwindows_targets-*,librustc_demangle-*,libstd_detect-*,libhashbrown-*,librustc_std_workspace_alloc-*,libunwind-*,libcfg_if-*,liballoc-*,librustc_std_workspace_core-*,libcore-*,libcompiler_builtins-*&#125;.rlib&quot; &quot;kernel32.lib&quot; &quot;kernel32.lib&quot; &quot;ntdll.lib&quot; &quot;userenv.lib&quot; &quot;ws2_32.lib&quot; &quot;dbghelp.lib&quot; &quot;/defaultlib:msvcrt&quot; &quot;/NXCOMPAT&quot; &quot;/LIBPATH:D:\\RustProject\\swan-lake\\Playground\\duckdb-eval\\target\\debug\\build\\libduckdb-sys-504c6af2e068003e\\out&quot; &quot;/OUT:D:\\RustProject\\swan-lake\\Playground\\duckdb-eval\\target\\debug\\deps\\duckdb_eval.exe&quot; &quot;/OPT:REF,NOICF&quot; &quot;/DEBUG&quot; &quot;/PDBALTPATH:%_PDB%&quot; &quot;/NATVIS:&lt;sysroot&gt;\\lib\\rustlib\\etc\\intrinsic.natvis&quot; &quot;/NATVIS:&lt;sysroot&gt;\\lib\\rustlib\\etc\\liballoc.natvis&quot; &quot;/NATVIS:&lt;sysroot&gt;\\lib\\rustlib\\etc\\libcore.natvis&quot; &quot;/NATVIS:&lt;sysroot&gt;\\lib\\rustlib\\etc\\libstd.natvis&quot;</span><br><span class="line">  = note: some arguments are omitted. use `--verbose` to show all linker arguments</span><br><span class="line">  = note:   正在创建库 D:\RustProject\swan-lake\Playground\duckdb-eval\target\debug\deps\duckdb_eval.lib 和对象 D:\RustProject\swan-lake\Playground\duckdb-eval\target\debug\deps\duckdb_eval.exp␍</span><br><span class="line">          liblibduckdb_sys-26b80393c1b83bef.rlib(0645e750c9ff977b-ub_src_common.o) : error LNK2019: 无法解析的外部符号 RmStartSession，函数 &quot;class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; __cdecl duckdb::AdditionalLockInfo(class std::basic_string&lt;wchar_t,struct std::char_traits&lt;wchar_t&gt;,class std::allocator&lt;wchar_t&gt; &gt;)&quot; (?AdditionalLockInfo@duckdb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z) 中引用了该符号␍</span><br><span class="line">          liblibduckdb_sys-26b80393c1b83bef.rlib(0645e750c9ff977b-ub_src_common.o) : error LNK2019: 无法解析的外部符号 RmEndSession，函数 &quot;class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; __cdecl duckdb::AdditionalLockInfo(class std::basic_string&lt;wchar_t,struct std::char_traits&lt;wchar_t&gt;,class std::allocator&lt;wchar_t&gt; &gt;)&quot; (?AdditionalLockInfo@duckdb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z) 中引用了该符号␍</span><br><span class="line">          liblibduckdb_sys-26b80393c1b83bef.rlib(0645e750c9ff977b-ub_src_common.o) : error LNK2019: 无法解析的外部符号 RmRegisterResources，函数 &quot;class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; __cdecl duckdb::AdditionalLockInfo(class std::basic_string&lt;wchar_t,struct std::char_traits&lt;wchar_t&gt;,class std::allocator&lt;wchar_t&gt; &gt;)&quot; (?AdditionalLockInfo@duckdb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z) 中引用了该符号␍</span><br><span class="line">          liblibduckdb_sys-26b80393c1b83bef.rlib(0645e750c9ff977b-ub_src_common.o) : error LNK2019: 无法解析的外部符号 RmGetList，函数 &quot;class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; __cdecl duckdb::AdditionalLockInfo(class std::basic_string&lt;wchar_t,struct std::char_traits&lt;wchar_t&gt;,class std::allocator&lt;wchar_t&gt; &gt;)&quot; (?AdditionalLockInfo@duckdb@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z) 中引用了该符号␍</span><br><span class="line">          D:\RustProject\swan-lake\Playground\duckdb-eval\target\debug\deps\duckdb_eval.exe : fatal error LNK1120: 4 个无法解析的外部命令␍</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>原因</strong>:<br>DuckDB 的 AdditionalLockInfo调用了Windows Restart Manager API 函数：<br>RmStartSession - 启动资源管理器会话<br>RmEndSession - 结束资源管理器会话<br>RmRegisterResources - 注册资源<br>RmGetList - 获取资源列表<br>这些函数属于 Windows 的 rstrtmgr.dll，需要链接 rstrtmgr.lib 库。</p><p><strong>解决方案</strong>, 根目录下新建一个 <a href="http://build.rs">build.rs</a> 文件，写入内容如下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="meta">#[cfg(target_os = <span class="string">&quot;windows&quot;</span>)]</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;cargo:rustc-link-lib=rstrtmgr&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同一进程不支持一个线程的同时是写入多个线程读取">同一进程不支持一个线程的同时是写入多个线程读取</h3><p>Windows中以写入模式打开文件时，其他线程不能以读取模式打开该文件。因此，如果在一个线程中打开文件进行写入操作，其他线程将无法同时以读取模式打开该文件。这可能导致并发访问冲突和数据不一致的问题。</p><p>主要测试了如下的两个场景:</p><p><strong>场景一</strong>：多数据库并发写入测试<br>线程1 → database_a.duckdb (products 表)<br>线程2 → database_b.duckdb (orders 表)<br>线程3 → database_c.duckdb (users 表)<br>目的: 验证不同数据库文件间的写入操作是否互相影响<br>数据量: 每个线程写入5条记录<br>写入间隔: 每条记录间隔100ms</p><p><strong>场景二</strong>：并发读写混合测试<br>读取任务1: 持续读取 database_a.duckdb (每300ms一次，共10次)<br>读取任务2: 持续读取 database_b.duckdb (每400ms一次，共8次)<br>写入任务4: 延迟800ms后向 database_a.duckdb 写入数据<br>目的: 测试同一数据库文件的读写并发性能<br>读取频率: 不同任务使用不同的读取间隔，模拟真实场景<br>写入冲突: 特意在读取进行中启动额外写入，测试锁竞争</p><p>代码如下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> duckdb::&#123;Connection, <span class="type">Result</span>&#125;;</span><br><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"><span class="keyword">use</span> tokio::time::sleep;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main()]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;测试多个 DuckDB 实例并发操作...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">handles</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任务1: 写入线程 - 数据库A</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">handle1</span> = tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> <span class="keyword">move</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;线程1: 开始写入数据到 database_a.duckdb&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">write_to_database</span>(<span class="string">&quot;database_a.duckdb&quot;</span>, <span class="string">&quot;products&quot;</span>, <span class="number">1</span>).<span class="keyword">await</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任务2: 写入线程 - 数据库B</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">handle2</span> = tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> <span class="keyword">move</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;线程2: 开始写入数据到 database_b.duckdb&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">write_to_database</span>(<span class="string">&quot;database_b.duckdb&quot;</span>, <span class="string">&quot;orders&quot;</span>, <span class="number">2</span>).<span class="keyword">await</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任务3: 写入线程 - 数据库C</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">handle3</span> = tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> <span class="keyword">move</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;线程3: 开始写入数据到 database_c.duckdb&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">write_to_database</span>(<span class="string">&quot;database_c.duckdb&quot;</span>, <span class="string">&quot;users&quot;</span>, <span class="number">3</span>).<span class="keyword">await</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    handles.<span class="title function_ invoke__">push</span>(handle1);</span><br><span class="line">    handles.<span class="title function_ invoke__">push</span>(handle2);</span><br><span class="line">    handles.<span class="title function_ invoke__">push</span>(handle3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加并发读取任务（与写入同时进行）</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;\n开始并发读写操作...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取任务1: 持续读取数据库A (与写入同时进行)</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">read_handle1</span> = tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> <span class="keyword">move</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">10</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">300</span>)).<span class="keyword">await</span>;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;读取任务1: 读取数据库A- 第&#123;&#125;次尝试:&quot;</span>, i);</span><br><span class="line">            <span class="keyword">match</span> <span class="title function_ invoke__">read_from_database</span>(<span class="string">&quot;database_a.duckdb&quot;</span>, <span class="string">&quot;products&quot;</span>).<span class="keyword">await</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">Ok</span>(_) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;读取任务1: 读取成功&quot;</span>),</span><br><span class="line">                <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;读取任务1: 读取失败 - &#123;&#125;&quot;</span>, e),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Ok::&lt;(), duckdb::Error&gt;(())</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取任务2: 持续读取数据库B</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">read_handle2</span> = tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> <span class="keyword">move</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">8</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">400</span>)).<span class="keyword">await</span>;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;读取任务2: 读取数据库B - 第&#123;&#125;次尝试:&quot;</span>, i);</span><br><span class="line">            <span class="keyword">match</span> <span class="title function_ invoke__">read_from_database</span>(<span class="string">&quot;database_b.duckdb&quot;</span>, <span class="string">&quot;orders&quot;</span>).<span class="keyword">await</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">Ok</span>(_) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;读取任务2: 读取成功&quot;</span>),</span><br><span class="line">                <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;读取任务2: 读取失败 - &#123;&#125;&quot;</span>, e),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Ok::&lt;(), duckdb::Error&gt;(())</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 额外的写入任务（在读取进行时继续写入）</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">write_handle4</span> = tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> <span class="keyword">move</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">800</span>)).<span class="keyword">await</span>; <span class="comment">// 稍微延迟启动</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;线程4: 开始第二轮写入数据到 database_a.duckdb&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">write_to_database</span>(<span class="string">&quot;database_a.duckdb&quot;</span>, <span class="string">&quot;products&quot;</span>, <span class="number">4</span>).<span class="keyword">await</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    handles.<span class="title function_ invoke__">push</span>(read_handle1);</span><br><span class="line">    handles.<span class="title function_ invoke__">push</span>(read_handle2);</span><br><span class="line">    handles.<span class="title function_ invoke__">push</span>(write_handle4);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待所有任务完成</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">handle</span> <span class="keyword">in</span> handles &#123;</span><br><span class="line">        handle.<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>()?;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;\n测试结束&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">write_to_database</span>(db_path: &amp;<span class="type">str</span>, table_name: &amp;<span class="type">str</span>, thread_id: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">db_path</span> = db_path.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">table_name</span> = table_name.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span>=tokio::task::<span class="title function_ invoke__">spawn_blocking</span>(<span class="keyword">move</span> || <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">conn</span>=Connection::<span class="title function_ invoke__">open</span>(&amp;db_path)?;</span><br><span class="line">        conn.<span class="title function_ invoke__">execute</span>(</span><br><span class="line">            &amp;<span class="built_in">format!</span>(<span class="string">&quot;CREATE TABLE IF NOT EXISTS &#123;&#125; (id INTEGER, name TEXT, thread_id INTEGER, timestamp TEXT)&quot;</span>, table_name),</span><br><span class="line">            [],</span><br><span class="line">        )?;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">5</span> &#123;</span><br><span class="line">            conn.<span class="title function_ invoke__">execute</span>(</span><br><span class="line">                &amp;<span class="built_in">format!</span>(<span class="string">&quot;INSERT INTO &#123;&#125; VALUES (?, ?, ?, now())&quot;</span>, table_name),</span><br><span class="line">                [&amp;i.<span class="title function_ invoke__">to_string</span>(), &amp;<span class="built_in">format!</span>(<span class="string">&quot;Item_&#123;&#125;_from_thread_&#123;&#125;&quot;</span>, i, thread_id), &amp;thread_id.<span class="title function_ invoke__">to_string</span>()],</span><br><span class="line">            )?;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟一些处理时间</span></span><br><span class="line">            thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">100</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;线程&#123;&#125;: 成功写入5条记录到 &#123;&#125; 表 (&#123;&#125;)&quot;</span>, thread_id, table_name, db_path);</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line"></span><br><span class="line">    &#125;).<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">read_from_database</span>(db_path: &amp;<span class="type">str</span>, table_name: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">db_path</span> = db_path.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">table_name</span> = table_name.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = tokio::task::<span class="title function_ invoke__">spawn_blocking</span>(<span class="keyword">move</span> || <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">conn</span> = Connection::<span class="title function_ invoke__">open</span>(&amp;db_path)?;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stmt</span> = conn.<span class="title function_ invoke__">prepare</span>(&amp;<span class="built_in">format!</span>(</span><br><span class="line">            <span class="string">&quot;SELECT id, name, thread_id, timestamp FROM &#123;&#125;&quot;</span>,</span><br><span class="line">            table_name</span><br><span class="line">        ))?;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">rows</span> = stmt.<span class="title function_ invoke__">query_map</span>([], |row| &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>((</span><br><span class="line">                row.get::&lt;_, <span class="type">i32</span>&gt;(<span class="number">0</span>)?,</span><br><span class="line">                row.get::&lt;_, <span class="type">String</span>&gt;(<span class="number">1</span>)?,</span><br><span class="line">                row.get::&lt;_, <span class="type">i32</span>&gt;(<span class="number">2</span>)?,</span><br><span class="line">                row.get::&lt;_, <span class="type">String</span>&gt;(<span class="number">3</span>)?,</span><br><span class="line">            ))</span><br><span class="line">        &#125;)?;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;读取 &#123;&#125; (&#123;&#125;):&quot;</span>, table_name, db_path);</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> rows &#123;</span><br><span class="line">            <span class="keyword">let</span> (id, name, thread_id, timestamp) = row?;</span><br><span class="line">            <span class="built_in">println!</span>(</span><br><span class="line">                <span class="string">&quot;ID: &#123;&#125;, Name: &#123;&#125;, Thread: &#123;&#125;, Time: &#123;&#125;&quot;</span>,</span><br><span class="line">                id, name, thread_id, timestamp</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="keyword">await</span></span><br><span class="line">    .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cargo.toml:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[package]</span><br><span class="line">name = &quot;multi-duckdb-write&quot;</span><br><span class="line">version = &quot;0.1.0&quot;</span><br><span class="line">edition = &quot;2024&quot;</span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">duckdb = &#123; version = &quot;1.3.2&quot;, features = [&quot;bundled&quot;] &#125;</span><br><span class="line">tokio = &#123; version = &quot;1.0&quot;, features = [&quot;full&quot;] &#125;</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">测试多个 DuckDB 实例并发操作...</span><br><span class="line"></span><br><span class="line">开始并发读写操作...</span><br><span class="line">线程1: 开始写入数据到 database_a.duckdb</span><br><span class="line">线程2: 开始写入数据到 database_b.duckdb</span><br><span class="line">线程3: 开始写入数据到 database_c.duckdb</span><br><span class="line">读取任务1: 读取数据库A- 第1次尝试:</span><br><span class="line">读取任务2: 读取数据库B - 第1次尝试:</span><br><span class="line">读取任务1: 读取失败 - IO Error: Cannot open file &quot;database_a.duckdb&quot;: ��һ����������ʹ�ô��ļ��������޷����ʡ�</span><br><span class="line"></span><br><span class="line">File is already open in</span><br><span class="line">D:\RustProject\swan-lake\Playground\parallel-duckdb-write\target\debug\parallel-duckdb-write.exe (PID 22848)</span><br><span class="line">读取任务2: 读取失败 - IO Error: Cannot open file &quot;database_b.duckdb&quot;: ��һ����������ʹ�ô��ļ��������޷����ʡ�</span><br><span class="line"></span><br><span class="line">File is already open in</span><br><span class="line">D:\RustProject\swan-lake\Playground\parallel-duckdb-write\target\debug\parallel-duckdb-write.exe (PID 22848)</span><br><span class="line">线程2: 成功写入5条记录到 orders 表 (database_b.duckdb)</span><br><span class="line">线程1: 成功写入5条记录到 products 表 (database_a.duckdb)</span><br><span class="line">线程3: 成功写入5条记录到 users 表 (database_c.duckdb)</span><br><span class="line">读取任务1: 读取数据库A- 第2次尝试:</span><br><span class="line">读取 products (database_a.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.241+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.354+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">读取任务1: 读取成功</span><br><span class="line">线程4: 开始第二轮写入数据到 database_a.duckdb</span><br><span class="line">读取任务2: 读取数据库B - 第2次尝试:</span><br><span class="line">读取 orders (database_b.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.249+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.357+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">读取任务2: 读取成功</span><br><span class="line">读取任务1: 读取数据库A- 第3次尝试:</span><br><span class="line">读取任务1: 读取失败 - IO Error: Cannot open file &quot;database_a.duckdb&quot;: ��һ����������ʹ�ô��ļ��������޷����ʡ�</span><br><span class="line"></span><br><span class="line">File is already open in</span><br><span class="line">D:\RustProject\swan-lake\Playground\parallel-duckdb-write\target\debug\parallel-duckdb-write.exe (PID 22848)</span><br><span class="line">线程4: 成功写入5条记录到 products 表 (database_a.duckdb)</span><br><span class="line">读取任务2: 读取数据库B - 第3次尝试:</span><br><span class="line">读取 orders (database_b.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.249+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.357+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">读取任务2: 读取成功</span><br><span class="line">读取任务1: 读取数据库A- 第4次尝试:</span><br><span class="line">读取 products (database_a.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.241+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.354+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">ID: 1, Name: Item_1_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.02+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.135+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.249+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.357+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.465+00</span><br><span class="line">读取任务1: 读取成功</span><br><span class="line">读取任务2: 读取数据库B - 第4次尝试:</span><br><span class="line">读取 orders (database_b.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.249+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.357+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">读取任务2: 读取成功</span><br><span class="line">读取任务1: 读取数据库A- 第5次尝试:</span><br><span class="line">读取 products (database_a.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.241+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.354+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">ID: 1, Name: Item_1_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.02+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.135+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.249+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.357+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.465+00</span><br><span class="line">读取任务1: 读取成功</span><br><span class="line">读取任务1: 读取数据库A- 第6次尝试:</span><br><span class="line">读取任务2: 读取数据库B - 第5次尝试:</span><br><span class="line">读取 products (database_a.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.241+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.354+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">ID: 1, Name: Item_1_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.02+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.135+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.249+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.357+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.465+00</span><br><span class="line">读取任务1: 读取成功</span><br><span class="line">读取 orders (database_b.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.249+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.357+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">读取任务2: 读取成功</span><br><span class="line">读取任务1: 读取数据库A- 第7次尝试:</span><br><span class="line">读取 products (database_a.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.241+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.354+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">ID: 1, Name: Item_1_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.02+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.135+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.249+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.357+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.465+00</span><br><span class="line">读取任务1: 读取成功</span><br><span class="line">读取任务2: 读取数据库B - 第6次尝试:</span><br><span class="line">读取 orders (database_b.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.249+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.357+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">读取任务2: 读取成功</span><br><span class="line">读取任务1: 读取数据库A- 第8次尝试:</span><br><span class="line">读取 products (database_a.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.241+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.354+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">ID: 1, Name: Item_1_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.02+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.135+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.249+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.357+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.465+00</span><br><span class="line">读取任务1: 读取成功</span><br><span class="line">读取任务2: 读取数据库B - 第7次尝试:</span><br><span class="line">读取 orders (database_b.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.249+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.357+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">读取任务2: 读取成功</span><br><span class="line">读取任务1: 读取数据库A- 第9次尝试:</span><br><span class="line">读取 products (database_a.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.241+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.354+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">ID: 1, Name: Item_1_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.02+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.135+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.249+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.357+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.465+00</span><br><span class="line">读取任务1: 读取成功</span><br><span class="line">读取任务1: 读取数据库A- 第10次尝试:</span><br><span class="line">读取任务2: 读取数据库B - 第8次尝试:</span><br><span class="line">读取 orders (database_b.duckdb):</span><br><span class="line">读取 products (database_a.duckdb):</span><br><span class="line">ID: 1, Name: Item_1_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.249+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.357+00</span><br><span class="line">ID: 1, Name: Item_1_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.241+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.354+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.464+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.572+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_2, Thread: 2, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_1, Thread: 1, Time: 2025-07-30 15:49:27.681+00</span><br><span class="line">ID: 1, Name: Item_1_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.02+00</span><br><span class="line">ID: 2, Name: Item_2_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.135+00</span><br><span class="line">ID: 3, Name: Item_3_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.249+00</span><br><span class="line">ID: 4, Name: Item_4_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.357+00</span><br><span class="line">ID: 5, Name: Item_5_from_thread_4, Thread: 4, Time: 2025-07-30 15:49:28.465+00</span><br><span class="line">读取任务2: 读取成功</span><br><span class="line">读取任务1: 读取成功</span><br><span class="line"></span><br><span class="line">测试结束</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> DuckDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iceberg快速入门</title>
      <link href="/2025/07/27/Iceberg/"/>
      <url>/2025/07/27/Iceberg/</url>
      
        <content type="html"><![CDATA[<h2 id="Iceberg">Iceberg</h2><h3 id="为什么需要Iceberg-为什么需要Lakehouse">为什么需要Iceberg/为什么需要Lakehouse</h3><p>数据湖的最主要目的是为了解决Hive速度慢的问题, 利用表格式和索引实现细粒度的数据过滤. 数据湖可以将整个链路变为分钟级, 从离线链路转化为近实时链路并且提升查询速度. 当然, 数据湖还解决了一些其他问题, 如ACID, Schema Evolution, Partition Evolution, Time Travel等.</p><h3 id="文件布局"><strong>文件布局</strong></h3><p>具体查询流程就是从Catalog -&gt; Table Metadata File -&gt; Snapshot -&gt; Manifest List -&gt; Manifest File -&gt; Data File. 如图所示</p><p><img src="https://s3.bitiful.net/pb01/Iceberg-metadata.png" alt="image.png"></p><h4 id="Catalog">Catalog</h4><p>Catalog 本质就是一个维护表元数据文件的目录(个人理解), 有多种实现方式:</p><table><thead><tr><th>HiveCatalog</th><th>Hive Metastore</th><th>表属性中key值为metadata_location的键值对</th></tr></thead><tbody><tr><td>HadoopCatalog</td><td>文件系统</td><td>version-hint.text</td></tr><tr><td>JDBC Catalog</td><td>关系型数据库</td><td>专门的表: 例如jdbc_catalog</td></tr><tr><td>REST Catalog</td><td>独立的 Web 服务</td><td>API端点返回的json</td></tr></tbody></table><h4 id="Table-Metadata-File-vN-metadata-json">Table Metadata File (vN.metadata.json)</h4><p><strong>表的元数据文件</strong>，记录了表的完整定义和历史快照。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;format-version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;table-uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;f7m1a7b4-c111-407a-a6e1-433a233a1e12&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s3://my-bucket/warehouse/db/events&quot;</span><span class="punctuation">,</span>  <span class="comment">//根路径</span></span><br><span class="line">  <span class="attr">&quot;last-updated-ms&quot;</span><span class="punctuation">:</span> <span class="number">1672531200000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;last-column-id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;schemas&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;struct&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;schema-id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;event_ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;timestamptz&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Event timestamp with timezone&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;level&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;message&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;extra_info&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;map&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;key-id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value-id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value-required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;current-schema-id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;partition-specs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;spec-id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;day&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;transform&quot;</span><span class="punctuation">:</span> <span class="string">&quot;day&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;source-id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;field-id&quot;</span><span class="punctuation">:</span> <span class="number">1000</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;default-spec-id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;write.format.default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;parquet&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commit.retry.num-retries&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;current-snapshot-id&quot;</span><span class="punctuation">:</span> <span class="number">3051729675574597004</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;snapshots&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;snapshot-id&quot;</span><span class="punctuation">:</span> <span class="number">3051729675574597004</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parent-snapshot-id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;timestamp-ms&quot;</span><span class="punctuation">:</span> <span class="number">1672531200000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;summary&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;operation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;append&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;spark.app.id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local-1599119293123&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;added-data-files&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;added-records&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10550&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;added-files-size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;34201&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;changed-partition-count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;total-records&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10550&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;total-files-size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;34201&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;total-data-files&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;total-delete-files&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;total-position-deletes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;total-equality-deletes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;manifest-list&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s3://my-bucket/warehouse/db/events/metadata/snap-3051729675574597004-1-2945e143-5152-4091-8869-711e86098059.avro&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;schema-id&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;snapshot-log&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;timestamp-ms&quot;</span><span class="punctuation">:</span> <span class="number">1672531200000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;snapshot-id&quot;</span><span class="punctuation">:</span> <span class="number">3051729675574597004</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Manifest-List-snap-snapshot-id-attempt-id-uuid-avro">Manifest List (snap-<snapshot-id>-<attempt-id>-<uuid>.avro)</h4><p>列出了所有的Manifest File及相关信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;manifest_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s3://warehouse/db/table/metadata/e852441a-5c3c-42a2-b2d9-e31a19a9d701-m0.avro&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;manifest_length&quot;</span><span class="punctuation">:</span> <span class="number">6224</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;partition_spec_id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sequence_number&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;min_sequence_number&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;added_snapshot_id&quot;</span><span class="punctuation">:</span> <span class="number">874657636349826781</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;added_files_count&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;existing_files_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deleted_files_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;added_rows_count&quot;</span><span class="punctuation">:</span> <span class="number">4000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;existing_rows_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deleted_rows_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;partitions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;contains_null&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;contains_nan&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lower_bound&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-07-31T10:00:00.000Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;upper_bound&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-07-31T12:00:00.000Z&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;key_metadata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;manifest_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s3://warehouse/db/table/metadata/f334a123-cee3-4733-ac49-bd24a5a176d1-m1.avro&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;manifest_length&quot;</span><span class="punctuation">:</span> <span class="number">1056</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;partition_spec_id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sequence_number&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;min_sequence_number&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;added_snapshot_id&quot;</span><span class="punctuation">:</span> <span class="number">874657636349826781</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;added_files_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;existing_files_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deleted_files_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;added_rows_count&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;existing_rows_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deleted_rows_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;partitions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;contains_null&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;contains_nan&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lower_bound&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-07-31T11:00:00.000Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;upper_bound&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-07-31T11:00:00.000Z&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;key_metadata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="Manifest-File-uuid-avro">Manifest File (<uuid>.avro)</h3><p>包含Data File及相关信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;snapshot_id&quot;</span><span class="punctuation">:</span> <span class="number">4876662349891823142</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sequence_number&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s3://my-bucket/db/logs/data/event_date=2025-07-30/00000-1-....parquet&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file_format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PARQUET&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;partition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;event_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-07-30&quot;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;record_count&quot;</span><span class="punctuation">:</span> <span class="number">4800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file_size_in_bytes&quot;</span><span class="punctuation">:</span> <span class="number">5242880</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;column_sizes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="number">76800</span><span class="punctuation">,</span> <span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="number">24000</span><span class="punctuation">,</span> <span class="attr">&quot;3&quot;</span><span class="punctuation">:</span> <span class="number">4234880</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value_counts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="number">4800</span><span class="punctuation">,</span> <span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="number">4800</span><span class="punctuation">,</span> <span class="attr">&quot;3&quot;</span><span class="punctuation">:</span> <span class="number">4800</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;null_value_counts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;3&quot;</span><span class="punctuation">:</span> <span class="number">0</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nan_value_counts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lower_bounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-07-30T00:00:00.000Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INFO&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;upper_bounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-07-30T11:59:59.999Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WARN&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;snapshot_id&quot;</span><span class="punctuation">:</span> <span class="number">4876662349891823142</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sequence_number&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s3://my-bucket/db/logs/data/event_date=2025-07-30/00001-2-....parquet&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file_format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PARQUET&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;partition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;event_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-07-30&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;record_count&quot;</span><span class="punctuation">:</span> <span class="number">5200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file_size_in_bytes&quot;</span><span class="punctuation">:</span> <span class="number">5872025</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;column_sizes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="number">83200</span><span class="punctuation">,</span> <span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="number">26000</span><span class="punctuation">,</span> <span class="attr">&quot;3&quot;</span><span class="punctuation">:</span> <span class="number">4962825</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;value_counts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="number">5200</span><span class="punctuation">,</span> <span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="number">5200</span><span class="punctuation">,</span> <span class="attr">&quot;3&quot;</span><span class="punctuation">:</span> <span class="number">5200</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;null_value_counts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;3&quot;</span><span class="punctuation">:</span> <span class="number">0</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nan_value_counts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lower_bounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-07-30T12:00:00.000Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INFO&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;upper_bounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-07-30T23:59:59.999Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INFO&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h4 id="一个例子">一个例子</h4><ol><li>建表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ice_spark.hdfs.t_user1 (</span><br><span class="line">  id <span class="type">int</span>,</span><br><span class="line">  name string,</span><br><span class="line">  ts string</span><br><span class="line">) <span class="keyword">USING</span> iceberg;</span><br><span class="line"></span><br><span class="line">t_user1<span class="operator">/</span></span><br><span class="line">├── metadata</span><br><span class="line">│   └── v1.metadata.json</span><br><span class="line">└── version<span class="operator">-</span>hint.text</span><br></pre></td></tr></table></figure><p>version-hint.text存的就是当前matadata file的版本信息, 让系统知道是vN.metadata.json</p><ol start="2"><li>插入一条数据</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ice_spark.hdfs.ns.t_user1 <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;hlink&#x27;</span>, <span class="number">20250709</span>);</span><br><span class="line"></span><br><span class="line">t_user1<span class="operator">/</span></span><br><span class="line">├── data</span><br><span class="line">│   └── <span class="number">00000</span><span class="number">-5</span><span class="operator">-</span>ba90a31f<span class="operator">-</span>d65c<span class="number">-4e40</span><span class="number">-9321</span><span class="number">-3</span>faa8c184547<span class="number">-0</span><span class="number">-00001.</span>parquet</span><br><span class="line">├── metadata</span><br><span class="line">│   ├── <span class="number">44</span>a2bbda<span class="operator">-</span>e252<span class="number">-4</span>d77<span class="operator">-</span>b958<span class="operator">-</span>b3cf35708b14<span class="operator">-</span>m0.avro</span><br><span class="line">│   ├── snap<span class="number">-8289612053519823397</span><span class="number">-1</span><span class="number">-44</span>a2bbda<span class="operator">-</span>e252<span class="number">-4</span>d77<span class="operator">-</span>b958<span class="operator">-</span>b3cf35708b14.avro</span><br><span class="line">│   ├── v1.metadata.json</span><br><span class="line">│   └── v2.metadata.json</span><br><span class="line">└── version<span class="operator">-</span>hint.text</span><br></pre></td></tr></table></figure><p>多了数据文件00000-5-ba90a31f-d65c-4e40-9321-3faa8c184547-0-00001.parquet, version-hint.text更新到版本2, 新增v2.metadata.json, 新增manifest list文件snap-8289612053519823397-1-44a2bbda-e252-4d77-b958-b3cf35708b14.avro, 新增了manifeat file文件44a2bbda-e252-4d77-b958-b3cf35708b14-m0.avro.</p><ol start="3"><li>再插入一条数据</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ice_spark.hdfs.ns.t_user1 <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="string">&#x27;iceberg&#x27;</span>, <span class="number">20250709</span>);</span><br><span class="line"></span><br><span class="line">t_user1<span class="operator">/</span></span><br><span class="line">├── data</span><br><span class="line">│   ├── <span class="number">00000</span><span class="number">-5</span><span class="operator">-</span>ba90a31f<span class="operator">-</span>d65c<span class="number">-4e40</span><span class="number">-9321</span><span class="number">-3</span>faa8c184547<span class="number">-0</span><span class="number">-00001.</span>parquet</span><br><span class="line">│   └── <span class="number">00000</span><span class="number">-7</span><span class="number">-906189</span>d5<span class="number">-3</span>aba<span class="number">-4</span>a96<span class="number">-9</span>f8b<span class="number">-008</span>d5af2f94d<span class="number">-0</span><span class="number">-00001.</span>parquet</span><br><span class="line">├── metadata</span><br><span class="line">│   ├── <span class="number">28173</span>fec<span class="number">-5</span>f71<span class="number">-444</span>c<span class="number">-9</span>abd<span class="number">-543468e78636</span><span class="operator">-</span>m0.avro</span><br><span class="line">│   ├── <span class="number">44</span>a2bbda<span class="operator">-</span>e252<span class="number">-4</span>d77<span class="operator">-</span>b958<span class="operator">-</span>b3cf35708b14<span class="operator">-</span>m0.avro</span><br><span class="line">│   ├── snap<span class="number">-4152532609887149918</span><span class="number">-1</span><span class="number">-28173</span>fec<span class="number">-5</span>f71<span class="number">-444</span>c<span class="number">-9</span>abd<span class="number">-543468e78636</span>.avro</span><br><span class="line">│   ├── snap<span class="number">-8289612053519823397</span><span class="number">-1</span><span class="number">-44</span>a2bbda<span class="operator">-</span>e252<span class="number">-4</span>d77<span class="operator">-</span>b958<span class="operator">-</span>b3cf35708b14.avro</span><br><span class="line">│   ├── v1.metadata.json</span><br><span class="line">│   ├── v2.metadata.json</span><br><span class="line">│   └── v3.metadata.json</span><br><span class="line">└── version<span class="operator">-</span>hint.text</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与之前的插入操作是同样的道理</p><h3 id="Schema-Evolution"><strong>Schema Evolution</strong></h3><p><strong>Schema Evolution简单来说就是对表格式的变更, Schema Evolution只改变元数据, 不改变底层的数据文件, 支持的变更有:</strong></p><ol><li><strong>添加字段 (Add)</strong>：可以向 schema 中增加新的字段。新增的字段会被分配一个新的、唯一的字段ID。</li><li><strong>删除字段 (Delete)</strong>：可以从当前 schema 中移除一个字段。</li><li><strong>重命名字段 (Rename)</strong>：可以更改一个已存在字段的名称，但其字段ID不会改变。</li><li><strong>重排字段顺序 (Reorder)</strong>：可以调整已存在字段在 schema 中的顺序。</li><li><strong>类型提升 (Type Promotion)</strong>：可以将原生类型（primitive type）提升为另一个兼容的类型。</li></ol><p>使用示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加column</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ice_spark_hdfs.t_user   <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> age <span class="type">int</span>;</span><br><span class="line"><span class="comment">--指定列后面更加column</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ice_spark_hdfs.t_user <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> sex <span class="type">int</span> AFTER id;</span><br><span class="line"><span class="comment">--修改列名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ice_spark_hdfs.t_user RENAME <span class="keyword">COLUMN</span> sex <span class="keyword">TO</span> sex1;</span><br><span class="line"><span class="comment">--修改列类型</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ice_spark_hdfs.t_user <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> sex1 TYPE <span class="type">bigint</span>;</span><br><span class="line"><span class="comment">--添加注释</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ice_spark_hdfs.t_user <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> sex1 COMMENT <span class="string">&#x27;table sex&#x27;</span>;</span><br><span class="line"><span class="comment">--删除列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ice_spark_hdfs.t_user <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> sex1;</span><br></pre></td></tr></table></figure><p>如果新增一个列, 那原来的数据没有这个列, 查询怎么办? 首先Iceberg会意识到原来的Schema没有这个字段, 对于这个没有的字段查询是不会落实的. 这里就要提到**“Column Projection” (列投影)这个机制.** 当查询数据时, Iceberg 使用的是表的**当前 schema(<strong>包含了新增字段), 但数据文件本身是用</strong>旧的 schema(**不包含新增字段)写入的. 当 Iceberg 在读取旧数据文件前, 在查询schema时发现查询需要的一个 <code>field-id</code> 在文件中并不存在, 它会遵循一套明确的规则来解析这个值:</p><ol><li><strong>从分区数据中获取</strong>：如果该字段存在一个 <code>identity</code>（恒等）分区转换，并且分区值存在于清单文件（manifest）的 <code>data_file</code> 对象的 <code>partition</code> 结构中，那么就直接使用这个分区值。这主要用于从 Hive 表迁移等场景。</li><li><strong>使用名称映射 (Name Mapping)</strong>：如果表配置了 <code>schema.name-mapping.default</code> 属性，Iceberg 会尝试使用这个映射从没有 <code>field-id</code> 的旧文件中按名称找到对应的列。</li><li><strong>使用 <code>initial-default</code> (初始默认值)</strong>：如果该字段的 schema 定义中包含一个 <code>initial-default</code> 值，那么 Iceberg 就会返回这个预设的默认值。</li><li><strong>返回 <code>null</code></strong>：如果以上所有规则都不适用，那么 Iceberg 将为这个字段返回 <code>null</code></li></ol><h3 id="Partitioning-分区"><strong>Partitioning(分区)</strong></h3><p>核心是将数据按照特定规则（如相同日期、类别的记录）<strong>物理存储在一起</strong>（文件夹 dt=20250213），减少查询时扫描的数据量，提升性能。是通过数据存储优化来提升查询性能的一种技术.</p><p>一个例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ice_spark.hdfs.ns.t_user1 (</span><br><span class="line">  id <span class="type">INT</span>,</span><br><span class="line">  name STRING,</span><br><span class="line">  dt <span class="type">DATE</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">USING</span> iceberg</span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (days(dt)); <span class="comment">-- 按天对 dt 列进行分区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ice_spark.hdfs.ns.t_user1 <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;hlink&#x27;</span>, <span class="number">20250709</span>);</span><br><span class="line"></span><br><span class="line">t_user1<span class="operator">/</span></span><br><span class="line">├── data</span><br><span class="line">    └── dt<span class="operator">=</span><span class="number">20250709</span></span><br><span class="line">│      └── <span class="number">00000</span><span class="number">-5</span><span class="operator">-</span>ba90a31f<span class="operator">-</span>d65c<span class="number">-4e40</span><span class="number">-9321</span><span class="number">-3</span>faa8c184547<span class="number">-0</span><span class="number">-00001.</span>parquet</span><br><span class="line">├── metadata</span><br><span class="line">│   ├── <span class="number">44</span>a2bbda<span class="operator">-</span>e252<span class="number">-4</span>d77<span class="operator">-</span>b958<span class="operator">-</span>b3cf35708b14<span class="operator">-</span>m0.avro</span><br><span class="line">│   ├── snap<span class="number">-8289612053519823397</span><span class="number">-1</span><span class="number">-44</span>a2bbda<span class="operator">-</span>e252<span class="number">-4</span>d77<span class="operator">-</span>b958<span class="operator">-</span>b3cf35708b14.avro</span><br><span class="line">│   ├── v1.metadata.json</span><br><span class="line">│   └── v2.metadata.json</span><br><span class="line">└── version<span class="operator">-</span>hint.text</span><br></pre></td></tr></table></figure><p>但不一定是这种布局, 这种的类似, 因为Iceberg的分区不一定要放在一个统一的目录下, Iceberg有<strong>隐藏分区设计,</strong> 通过 <strong>逻辑与物理分离</strong> 解决了传统分区（如 Hive 分区）的痛点，分区列维护成本高、分区策略无法灵活变更等问题。几个好处:</p><ol><li><strong>分区转换函数帮助自动进行分区</strong></li><li><strong>查询时不需指明分区</strong></li><li><strong>分区策略动态演化</strong></li></ol><h4 id="Partition-Evolution">Partition Evolution</h4><p>修改分区, 和<strong>Schema Evolution类似,</strong> 只改变元数据**, 不改变底层的数据文件,** 不会修改旧的分区规范，而是会创建一个<strong>全新的分区规范 (Partition Spec)</strong></p><p>新建一个包含多个分区的表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ice_spark_hdfs.t_user_part_hidden (</span><br><span class="line">     id <span class="type">bigint</span>,</span><br><span class="line">     name String,</span><br><span class="line">     ts <span class="type">timestamp</span>,</span><br><span class="line">    dt string</span><br><span class="line">) <span class="keyword">USING</span> iceberg</span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (days(ts), bucket(<span class="number">3</span>, id)); </span><br></pre></td></tr></table></figure><p>删除一个分区, 修改一个分区:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ice_spark_hdfs.t_user_part_hidden <span class="keyword">DROP</span> <span class="keyword">PARTITION</span> FIELD bucket(<span class="number">3</span>, id);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ice_spark_hdfs.t_user_part_hidden </span><br><span class="line">REPLACE <span class="keyword">PARTITION</span> FIELD days(ts) <span class="keyword">WITH</span> months(ts) <span class="keyword">AS</span> <span class="keyword">month</span>;</span><br></pre></td></tr></table></figure><p>查询时旧数据按旧分区查, 新数据按新分区查:</p><ol><li>遍历当前快照中的每一个清单文件(查Manifest List)</li><li>对于每一个清单文件，它会读取该文件元数据中记录的 <code>partition-spec-id</code></li><li>从表元数据的 <code>partition-specs</code> 列表中找到与该 ID 对应的<strong>那个历史版本</strong>的分区规范</li><li>使用这个<strong>与数据匹配的历史分区规范</strong>，来转换用户查询中的过滤条件，从而对该清单文件下的数据文件进行有效的分区裁剪</li></ol><h3 id="Time-Travel">Time Travel</h3><p>Iceberg 的 <strong>时间旅行</strong> 功能允许用户查询表在 <strong>特定时间点</strong> 或 <strong>特定版本</strong> 的历史数据快照，无需手动备份或迁移数据。</p><p><strong>时间旅行的核心能力:</strong></p><ul><li><strong>按时间戳查询</strong>：指定具体时间（如 <code>'2023-10-01 10:00:00'</code>），查询该时刻的数据状态</li><li><strong>按快照ID查询</strong>：通过唯一快照 ID（如 <code>10963874102873</code>）定位数据版本。</li></ul><p>使用示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> ice_spark_hdfs.t_user_part_hidden VERSION <span class="keyword">AS</span> <span class="keyword">OF</span> <span class="number">807038129550906544</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span>  ice_spark_hdfs.t_user_part_hidden <span class="type">TIMESTAMP</span> <span class="keyword">AS</span> <span class="keyword">OF</span> <span class="string">&#x27;2025-02-15 00:39:01.33&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如何实现:</p><p>遍历snapshot-log, 查询在时间戳正好在指定的时间点之前或之时的最后一个快照ID或者指定的快照ID, 然后就是正常的查询流程</p><p>具体参数的设计可以看下面的文档:</p><p><a href="https://github.com/apache/iceberg/blob/main/format/spec.md">spec</a></p><p><strong>声明</strong>: 本文给出的例子不全是真实数据, 只是为了方便理解🥰</p>]]></content>
      
      
      <categories>
          
          <category> big data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Iceberg </tag>
            
            <tag> Lakehouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025五六月生活记录</title>
      <link href="/2025/06/08/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/06/08/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b622ab0a556f4391e7336de0eb02fecfa61a962c50e87822bdcf766f35f35813"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">加密文章, 密码是博主名字首字母+生日(3位小写字母+8位数字)</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025三四月生活记录</title>
      <link href="/2025/04/05/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/04/05/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="5faae8af059f8f49b7e47f933b1acb221935b6af1e08e354de39452efa2ceedd">f33a6d5ec2003e353696027d8241bf51ad51c806b81b0f5d1a3eb4340de5971ae0510f42b61767060646c2af5d64947df76f032fb0911a75e1b3636525615f197ceb22e1616ea1adff805373c75257f6840d6cb6a5e9c4f8f835aa05f1d0e85ced658ed91915709b741c09250faa21e21bcfa02eea64bcecdeb1077c29ca7eab0fc9296336a1aa69e36da62f84d61c4f1744bea53bc269d688c7739edb76c30d8b3a79e66f54dedc5c4277612e509e85acff6eded078f700c68eeeab799a7d5e141273cd8688d67bff6adf4f07f5a04cba2011a02834a7cbcc2a268b4e1287e02cdcb3acb33122b990c74d01d992247538d630fa97a8c56a397a21814d52baaa01a1a35dd32fb46e212030af04a8b3fe3b60a8dc00733242e96c29408f3a4e2b7db600f4b4d406c6e78b0fd04ab0b6df8b48f1558f2e2582e0eb82e2c3e43da54f87f2ffa5beec79b05cc908e2d083de897a3e9ac7aea26f8c1dd8eb497f21841b75c6c8fb72bd701241d2ec9443b68a74e33b4e681f011d54a8bb870bde460ce30936d62ed750a20e6ef062d3abfce7c4b4b52cfd938d494765e0847e08f617dfa1dac9816b44ec46f52ee1bd7336c3af6cceff53e5b4aecd8fc2e8ae54c00ae6043e7a0a5841b2808c8546faf41ac71bb81788b3bc940dc313f7ee69aa2194f249076b92b9751dd5e961be85860fabdc6b739fb226af416c606b90e0fc74fefb55967c2a4f16dd909b6d939613ed919094e613d25c2d2dbf0f51e9616e8e9299acf54588070c0c0a81f5aca9ba1364cb2af06da0d3141aea169d6de5f4013b85298df19b7f318446281519eb3a7d6486d9122b6a8a7f100e97e017558ddccaf86b219a3c198cdd8034c6042a52bb3ea3a1bce67e6bdf8db8c03b3885ffa80f3962b4e69450bab3deb898ef89e4c7793adfcc8c6c566c1c3c4998ae999245fa1733020e54ef96d520b86567c85e3c242214a9ad95254c9945661bf25380e3c77c15d7d6a74e96593f29d97f3c5b2a76b1fa5c7cc4ff93c95149a297d6ec3362afc2d1f5cd5159850cd70f2208f89d4d2fe08ee0dece3ccf9d897cc0bd1e43c41811d098635b8ee494571c26f8d3ae3eb04c594bd6bea84f7f028e4e49e633f70485a9a9d449c9044224201bc1c00b908e22d0d02e45197610cc6b039df6ec270ddb8b86d71365cbd64f0cb0cf3d3fd9f916649400ac339bf76ae6b82efcf1b0a1ce85a5784f14b6d6bbd7ea56d550cd8ffe2ad029105c89c40244f21acb20dfbf3e29d6a7decc17efb4a2455ad32a205ecc83c51b71fdc1b53a4dd4dbf329dd7ecce8ab160cf91fc3b24676f0343722ecb04c8ebe988ca3219e93634262909694a2de80625887c2ed412adf284bc1d82f8841c043cb223808ca3c1b29f415413376307dd3f6df909ebe1382654c08f5001c16f316c3f28f1aaf34d37b089b457729b4775398685fd4de2e74f6f03f863ba09559e263aba12683a6819dcced8ce284235216719b6a28d66ac036e3331127d0bc6ece105b37a0d488431b231a99f7a694b3e787df822751485e33d3676a127c7027a42c41d0dc232980d113ac10899a608a5bd92d90c32c3198328415998b8df4d9c7bb0ff0e87706daed887b0a68571fbfd01943649f3c0012829fc9bb5b30c60561406f2a372b709d399988039373e2e733af17fbc28a340519aaa0fbb0721c782d5b6b6c5e8dddb4785e0bb2d07abdd18a1993032e406c8e3f56b360e849150c3cb6416edc1f5251a31f9faaf76c6ce89cf9821404a9f25c203ffc42bddb11d84b241aad3471b7eae85d056b6aa22a5fa20bc0a8bd2b69cd0a577f6c87759653ffedbb722a9d296eb81d3b335ad65ba1b9e1b9572ff61437dcbbca28eca311c34d11e999b5dc6df70ee622716e357e7393bffa12532655333f57ec0925cf920e7843d23901e59e9450be4592dd043452ed0e1bd7a957806e350b99bd11ba1cfc6caf136aff696e4d808749688d20182e5792229e3a6e404f235e4d8d5e70b855adad38d7b624c8e6a652904d82191d96a1d6e680bbaff2538dae12b69a11c07c73d46d1c5c5bef01a41306baef2d65fd67e4f801662ef42a4f1c817704494ad83f6f9ce77a4fad06ae807bc2807b795b65b44a7e37757dba0fb6b5e10403ea0b9cb84857b05ec87dcd380ac3c78c615fbb9026e4ba32aa9e66ebecdf9a6dd02ead0b533b1074bbbd89a4bf4eb0bb5ffe4bdcab8b52b708dc0d8d6706f2904223dbbb8204b1a9e6ca6ee385f73ecfccfd84316acadf0f6635b130f100965fea2cb0759d369408d19370c83dc5c36f9d8c9fae15d2a6f6d246bd7d3f7cd56d8e69ce4226fc18c7d33ff403729e3b3e21c933ecd09988cd692f26e15cdb259c76591631931cb691d8bd0adf1378420a25e6144e1ae1afd039ecf439002903fadcd76ce841bc7654a9097037481aa0cbdeaaac7a26c4bbdfb35d231ad41df611742aa27cbf4a2c250d95cc17f3b4b03d3b73011a51d1ff68f6c9043f3988f444fddecd77af312d0dd22a3869a588974559e696b043fd16067a72443b8e76cd58383704df2f7dea9fe714df5c80ee6a4f12043fd43ba0a085d7815d31e516713eba748a4bee4f08776770f6d15ecff69fbbf5441e5308fd40573fda296f182d333bcd614bf24a5040bf0f053935c7a3c605bd023cb463c5061113ce6e94a050817c471786069ef0532de5dd47bf92b086e904694d827c625d3faec99e1c6efe684cd9f053f932f5741322bbd16ed2ac1ff2cb223678820d906268c924b6b2b9a4d39d021cbb2be9cf2ef70879215fd71ec874536324774bd867547df55b04d8becc38de7b9e8a59d8432f91ac4fbb3e9514554e36e571a81d1a57eacafe7e154e3784cf02d13fbef1f28175fc1108add4543b36328cdf78c7b6c5d75816843bc0ce63a237d97c46367813064ca67c401157dff1c8158f8e01bc0347b66a75292965766c7dcf9e2bc607a8ee005c6f6cb58d95eaa443b6242c1639f2cb8c6c0a7541a7e2a54a7d61214eb6937f25e550d2c8e4dd3da92b495b3151b10c7bb294d9c014516b5427c3feeaf99214bb19be3a11cfb2733070975e39d3ee98ce0a4a7d0915c5a35e045449e4743ca455f7d12db8c34964b2fd92d8ce4d8fae65e522aefeaf94c8d21e35c947676047c432708d14f9e07861626165f16cc739cf011d934ecf640ce4dcd875c672813ef73492fcb91ed26c5478c39ae57fa3ff50fc03416577a31d0ec4cf1d7db68e6a9bd8c08a976bfb1b59a46edd925891ed8faf035b9025b2427fcd5e43bf0a39887f56930dcb8fbd9c34d9b854d3ae4adefac4a18e2e5481db5a657b25c467e27ac99a43a310e232c15956baf6c848ea6b6b9e0106bbc1e599a276317f24885d0a2dee70ef458bb9fdd228e571110c2377593d968f157881ddf10f94247f062341831822eb454dc4b376490fde1aee0b93b9c955879b4473ab62903e1fa387d95d388e3ded581e6de506cd0d17e0340dd45b7c9858048a24d6c1df4eb9b164e214439e1c02262db65c59ebd66f42362cbf99c1e519508e284ae7f804df52fd85a5a5073ef9a91ce09a28541d07ba6a26384e0a0b7ce9889a32d6e68c422cd02d25568dc439568012f6c9ed56555325cba5d329ad29156cc3d483a7d4430856e7c5ee8e4e51df439aeb5ef39abadea863f1161b6a6287919d9244d464acf7ea9df15c6ceb91e9031488b98805ce6fbdf6fe96544f18e87c4bdf4050b8760de53596e6144386e6cedcd2c17d5378d911279e0c13a52872638bfb3a38eb8c38972074879f040f9b8b4cfbb7da006ab02b4fa43abbf45282f9566d878618ec03d1915cd28c65b03f228711dfe50a60fddab575c390ea05ac610608605a1e5fd3724b5224a87592a1b94afda2c8d71571cd0c2f324883c458f26caae0225b82e03aeb653719a042f70bcd3ecad4cbd1d71204a100e7e7d1b74b25312b0dd271599568162c96e4b090a844b3188b555385abd4ee7a3ac6c25b612b4a8fb10f47783395ea9a967ad3904239b88098410c3b5f3deb0698522b8ad5268c81fb55b2a9431890f975ca3f84f15059760e920737b069d944970dc11d52e694082d573a82df17c3e2f892d9151b5c4366ed59a136f35eb9e2baeb481c11836518a7df363e43a4d71d5d481186f4188d0128509894e66aa2cb175cc0c9ef1f8167f00eca95a71e0c63e01e54fff012b9f6f76c19d3b9a6944148fa2e2981b274b6e5223cb20083b6ce3591bf98e37c3910961a857a223d403af82ef4c3b9bcb3be2cc476a1274b1f47491148fc84eea6c7ff05439811a59bd078d922894eb600466a74d39f881be27afc0beaf12a3b054d8e8e9aec6fa60f90035e5983fbc2b5774c987a9dca7353a527f0500f95c4806e391eb0f02b4e1890c75a756e2f3d40ff491f617f2f33ab5fce0783a3577c1d3230bd42357e041001e07c17d00db78bb2fe1e229fe92438b16fba28fa08cacaeb2ed811a8fd5659ef97eef3cbf547835ca80e4f9cee62a35751d5eb10891f8b5a320d7cb4aad58aa3930a5413df5f34ddf31ef60e70058b57b31acb4f170ebcb791a673f1a7a6ef3b33dd3a6bd34a637f785a191eefd2f57311bf67fbad8721085adbdec39cc1d5f9455fa382a524d614d328afd6f8cdee73915fa89bdc22a228257f1f57e5cb9d754d05b2462378ba93d9ef97361aadf8a413cf21fc2fe11cdd23f0d3e88de56b70be24f400c8723cffae581a42c240a4ec21d3b42c01ed1137cf7c1641ba39ca8bdac3ce33dac97337d8f3340f52a882c957cf9e214044b2b7edb452ea11ac5f28df6264fefb9f60336b192c79869a131f5c7eb8322a3e9fb275c297a92fccb81d1ca9d4ef0c4b9622e662c0f78baa223fbb92cf91968394cabf47b7eefe9f3433162188d98ea00781b20c80092d069f2f20f39ee3bf229e443391cbc953f51930cac843561dfcd8e305a38c74b9349e630310766e7e3522f0d0c59086d2f2809c009396c427a1fccf60cc69cdcce08ad9a1f691203a7f4b9c8403533bb8bc047399da4b93faf07718fbf1ac6975f480ee0cda842765f1da1f3c009d463fc50959c39c4606beade6922add9f676163e818cd2657f268a1cd5f5b481b276e701ae173dc6b7c3d705219e6b81a14daa54d01816a628ccd43736dad10d927e3d194dbc8952876c7ab388c2a52d9f6ad7e79a95e5c2e1a3782af0b699c9842d45f7a2681d0d3f7e5f21f8f42cffbe746e86454b9978e9a3b030eb7f4f267794d2b455aeaeed8226649f5b7273a6eae6d9eadf3630fd70c98ca275a059b335010848e6e229fb0e90c3669b966ac6e13ec298e05f58fde388c4d085dfefb028fea2bfd3255caccb4e4c077ee0a73f484e3a1259edf9cbde5784d217b87ea94745ad63a9674aeeebc731c58be2b6e682298645c61d7aa1bb65f6b6ccbc149dad9fc992ab3a46861134cfbf4732275909e769df82092ab26875a24413cf24139a6914fee4f4e5da9bb48e4d5af25069958e364163bcfa2c04858cbbbb1d50a4ad8d3bfdc2a1f2ee22aa35f8bf268c03aea7058cea2b778817ccba84b6e8bf3e94dc621be45e955d1544dd759767e53a908aa575ca04398adf4d3138b08f23d6bbc87f1d267af094c536902f147418027e0ac3b45ac8a3a1b52f4632e7e329de299f5567adc4edb03c2b600122d31c44e646350ddf47fbbfa2b526308ece7f2811c5dfc1fdabf65f62efcfa26d182d2d31e30483481c79bdf75a93cbb30fb4e77070132008db2b6605878abedd2169bc0de93cc5d17f4933ab225399ddf59968d11b7fdf5628d3fadefef10e484375846bc99c5b3533f62f5cdbbccb5e668c08cea927c71c6a723f526401783398cf7bd4da2d84e6a089f4e45816a4b4553d9915ff3cd759dc0ea8fbea97ee094a541730681602dcfb06b52433405328fa861f2c4a944a5b87911a132cdf3014c1a2963e665def37468597446f26e2b5808b46f31cc8103c282a0d2b8f279fdf67d885fe1c414e9c624f05fc3c51fd21de1c5edf5a74bebd4e83e1ef3226f3e25ae169511522091a8fa6cf9a338dc45e2106f9d64028490515139e5c115717d9a5dc2a8ad1f2f5ab854570e9c4d9798358e4a87afd69fc122c3f03e6b974f2bc4ad1fac111b09ff994fad2f58cf6cf437a0a94708ea554b6f93db2101de59819a718aac80ab18e910a377a3fbd9412893f918e010c58f54d7953cfc4d778b23dd7dc57db0b77d73c2a9799e2a9efd71523ac40ce474b925cf2af860c642be3abced41c30e4869bfbdeb5776baf63e70d5c7ddae34d3b089321bbdbda2cdf91c93da95c466eb2a508c15267351ceaa517967e55de91b396f790612890eb3d1adc2a745b649a015a0582337f053f8f7d742a978361bc9951115c11af6c6fe11f14fbdd785cb208c5fb8dc44451a7be3d1f315a6e4958522a00b3a7ad3d09ef68fc99b48e5fed50562e675813ffef7278debf2143382ee8f3dc57107343236e71fa4009f2bce703807e5818ca92debfe9c4c4ad5ad207029e470eda20e1b8b1a0d5a0ee849390a99b7add3d06c19de542e68dd93f9fd99505acdacd14f89dc3d0f12a45a3c95b93cc92cd50300455cc58315c7557a070cc7f46109e4011ab0733aec0113cc216180f209645bd503688e398b54c50985d4eb26ea1d0502709af66f7a015d0ec2e5a8d23a4aefb999d86b3bbd427e2cf3d428ccfde78be6e68c5f7f022ca264d1ad187335985d3dbf62f1310f5c5893aedfffbfba50a447d114593cbccf055e5e0f824b9fe9a2b0d38778ef9981ff95ed2746ed61bc949b0f33576869d121f915c24686b2f4f628f5163769379e70efa75bd54116f6e2c666f0fa48bb6cd463510a906ab1003c5e816951415fc244509dfe8e32c3c46551a16caf431e6a0a465d015363d9050454711fd4a1ceb2a60150816d8ba674c9e6cdc9574b910a67fd2aea51965bb665f65aa9e622b1257d31644fac66fa07edf86f66f9a52ef949f50dfea2ee3ac34a2ff87cc57bf659203e849ca8c4cb090520e55996ae59c77d8ea6155d5dd7de9b2978c2a23ebfe56eb1d9e5e12c5bd33745e9e17c9583b03bde7f23e3f5f30724c2cb1803ff20835ca5a1820079f9c688c1529337a12abce6764dfce75e6823c60a50cf9ba2dda171da237fcc28d7a24895f097b9dc38c206c874691bd8c337a72ed0f28d452f4b94942eabd0bca4092ce805310a1b960a5b7db323949fda3719f134d6b7b789e122e0f2e9ea6c043c135a2383a992c479d4413c682359416140967649b40b07c51ab2dd6f16c104fbb1fa8b8ebf00042d6730ba1df61e776f57e74819cd249d0aaca44ce79014251f0775e1d9c5e7ec87e20a2c2e9e394395c9bc4ecf78290996ef0261a204cf4226b9850087b76561bdc05059576d955370d5470011a52eec05745a27cbe515b2a821da612b7271279e4ef2f5f81d17ca9542ce640e4e50a683ebecff938656e97527f76eb7b787a537d90e8627372ac8ab598dd12eed086c0c44de03c67bc812938167e760a851009c62b06589a7143d2800123eee69c12c66b161b3b2de5d5c59bd8b28e64a4253481ae1307b81f4b4801ce967a4d9923a4f2d6ef062cfba2d6ec4518e9e6446fb69ed96229d8f41481f07eb646b6b2c98f36469b9800d3948a55a3ca83b5cea941cd2c8a279785fc8b6388b39772f22d7288516f634637dd1716cc8e694bc542c484e59814900faf536b717c82735afca006e51cba91a912dad0c5e5d59539963ffa4b85d01f2d2141af064ca85fa6a07429df2157fc804e1f5574c2e411f57b8a04b0959560e49f83e7d4bc6bb95e8cf8e5525020cf877fda139da81dc1e57c4b8fdbd031978011ad78679138235c1f57abbad47de93989811decb5198d24548b253d0579700fc8cf3a32137969f4709a1751fabdf7094a1e366d79ff979e5e2ddec26ebd70a26bff669aa17937e28975437210ee7b408ca18effd8fe5ddf23b92c1d99cc473df1d58cde95cf55fe99b3535ba7220c05636e58964e10fa696f7071d710d63d4f1a21d8e6d83c607900b12b0568c4ac309361617f99de63e1f66539d53920a72dba4a45e5dd094fb5fb807d06c8b1ae76c952115932c8c54bae3b92191d46575669e9b743a76cf0ed78e9a07be8fc663d3f33c41dff8399ab09216cf013714cebd1a54b474a15602db1badffeed74f77df7404950ef949ced05b071f08c08990f90abb37ac700d7d4cd7f6c2dd044d8c141176d6832c52177f15a4986cb33044ed1359a93a10057409f923b255018405fe086805aab30ce1fadd4358d2b513d7e90a0fc32b4ede3240a3d1ec2564735b9ce578992e441a7fd7340e6ad7b67cd9634e6ae750629bb20841ff2a3ea9edf455eab501720641d247ce7c7e22e295e19f6d3b40d4b4db90087204be806d912038cf9a1a9ebd80fa6cb222248af4a5867dc59bfdb26a48456c9bb6274e639869f5060bd55c80444a524119b0a261e646097ea906a2bab0c8fc64e0271d679a4a07fe64c1e50594d2accdbd320ae6bfa07e22c9cd7ddd70cf6d2a4aa04f4f5c72a9a561f3ae9de0f0339e9683dd9a2a99c54315a7d32faf8dcf983ff166e7468d7acd88278d36fa263fa0ff19265ecffa36e7fe131dc4314cd2aaf9ec5779595275d3203ecfdcf1d1ac459b4d3953b155567d59eddde75938be3e6850bedac72cd0ac4911500c10c9653f982a99826cc75ba12ab028de758493c4da5af89bf6539e0627c2c8984e4f3b52a9c88a5de68b435bf5ac48f0f7e2d53efc34dc124a3eaa59bd00edac25f45e6fa93da266fd4d3d76bca02c9b7ab8902d42db7518e72bbd54610464b675909ac4754f3c5b1f55a21a77576b680dd68608f37fecf2948e359915c623cd8bd92acce30b90419002dbd5be4fe42fbb18ecd3aeae0411fb878b552c2e83e65c3fb1c548c1ad37a3db3a1806833513d8459355da3b98ec51337cae1c791cd9b20cd6c18d416ed093d613d0edd9cfe3ee5b7fb73099dc44f1036687596e9a83621af2c4f33499534e00781dc21982ffd8933ee4f26194cd8df369592cdd39664435e9251085717d96074e594db46f612aa28ebd919cc528641c9764f81d044daef3ba76cd8e5e17fe8c62bd75f3efa3f957592c9b037679339104010108cfc3551724ee1cff851374145aa7e3274357910342beab56cbfacead0e65d23c380c73472a89acb1f468a50aa026c65dca0d14221efcbeb7cb4770582f110e5f1acc3aea2d296d95e316b09f7964c10db157f9717e62dd823663f16d6c61bc8b960076029f5efe4ac1192a56d4548203401a64466467cb1b28d2550ddd04f11adc45df01fb430eb751adb0ec1a2c07810a5af277a636f2b676bf5cbd164101f713c49d5373f4400c36cfac6e3e962e4ed84e61b34d89b41e6520cf29a451de4552851c0f9df1b5361d10d43ba931d26433f2f7c4ad2fe2305e762c67f1b0d0f682e0df6a54c4c43bc617af09703aa2141a2e8eb7de9a48c45c0f3eace2401b75d5697bb9fd50bdc0289c03398e5ab4781c3593f8826cb24484dfab310d97c693e86ad3ce010c2e86c0d18ca847da31f5a6452e316567ad9166797ccff39aac1243b5f315ff2ad0a22eaecaf1b9490587177f060cbc54f94701b6baba6ff5675e6ab385a8a79a3fdf256134db25d6f708c4e9f2a4cfafbe6d9f3171f93b75295dfa87b1980961624ebcf8697d790596e5fa675b8e924408932d2dc29c85a59f7a397ceda971ea45afb91eef80dfb150f1af888a20b5aed0e7b1a3c9cb52c3838e863956441ee4f1997ad7c1fbd6e2bce1dde4a56c6c773257e34c3e02b94c645aabc48df310e56f1f61792e06cf45bd8318d31b5d4b550f4cc04743adb656368e899c4414bfe1173add235029c5dbad1457a9b95f6f501b525979850a3551dd4b7b15c98ceb4f3ae7a5bd5ffd6acbd0437feaf3cb01969935fa5463d2045c414f20d3e3fa94827131de8e5e08012d2c2d2719ca0de358b062894b75e33074c95787fe25a3f7eaa814e2ab247aed48169ed9cb036e993fd25fa741031676a2e0fbefb9809c9778debc312684a63698f0059db6529a7f77ff5f2e6cfed2bf2034ebc79f31ffeb76a2e01f96082f0367ccd0b3bb50d1eb384a77b95519fab4135dfc65344f3afec318b2f7951eff7eef98bb0600888587937844f790660adb4d811faadc8deda2842b45bda265932281630a2e87083c6231e2998794bc5fd7c728fcf0cf0dd5df9b28f0e2138b3cc6afefbe3f0390344560850c0dc96f37402a7ca3f980f6e1a04d9781ca7ce25c63967760d8e58b70ced4066a78dfe538d16f0f46c6d402e0ed416c6b94fa021b21f274c622c86f55e415deb730d16c24afddcd381f5dea46453d251182c3d2bebf11f1325e8ceae9680907d68f58372783e9110a00651bf72e2d621ec053ce0c765bdc6f9f7ff731bb08819b72389c3d40924f79c94f96b3cfcdfc4f8fe57613fc335f3bb67427be44942734f0a5d38db15f20231b6c505a3b766d6037667a7f6d364a4d36181e4e432a6d8f424a6a7d83d5a0159f4e35d44682c3657e38f34ff1bcd7239fb8eeaee815353bf0f972f0a1164c7052f232036b1680c7f1c67904c0f37c8558d9f800536a049b41da44be7b937f56a5927a7c3637ad1b87a1c06503b171c545695ff4da4732db903ba5acbc2e0a85a20fddbf645fdfbbce2701c67664739e3a59f446294f89635707d2b5149c2595cf67de17aa867195ed3ec6ce399f181a95d8b386bebbd5b95b0a9251db9c9265451f7ffbda8d00c61939b5e2cbefbb60c268979076ce618c19deb1be3d1585c4cc79f92457643261e46baab845845b397473842b5cb4bc4c34878b9a2725f34d037a13acedde60dd9be69349f56c4523c7058398742070fecd422980c93fbaab2dfc1095c179460ccdcd98474c6b67cd36a7c4f9a63b5668d08d4c5f6e1ac28f06102082f7e970d451289569e7e9cef99ecdd191a5b8b70535889995823c8288ab4b6cd0b0344ceff1b4172e425114b3b975d6211708d53745148974befbbeae50c02a63f9cb1800c533dfc64663c372150ee623c56588dc075909cae1b51e244eceacf27855d6ed4294c42d54d03f8878612a247e7bf5d06cf794d7d952fdf4ee4e7d202411e0366a4e29cb0de5ea6c32cb24df53aa2fcf373a06217d57f77b34091e0244b1dbab96f7b8323cd0e8b19ae35d1a7ee48fc16ea11484d3fbb58b3beadb74a81cb587fc460cf4f874f7a0cc4b58df4c42638a2dd661b4866646a0f0e1a3552dcd0d4650cc5a55ccfa56b78078433dd536981b544918f087e9f96b1a08cc7af641bc372159e11c3733194ad6052ed3be6e56a9e1bbb1a26c3a8125a6855f4c806ba80d126f239f25da587871e2e64097ec503fb273d28a4f16af8be2d8396b32f4f8364e32febbaf4f9efbd2d017ac4049429627a269b730eba7fd2fca4df7d9be7e35658e37d33912cd8d3b026cba6039de6d6fd01bddf6d046cd7609018861a3264944ede10d4922bf4a601d2ce90027858f67a492db603f6510b1be5f87538c68b30f26d995bff4bbdc887615f607b9c5635c70894a40ee3b55e0fd02e707dd97fb86b1e660d1d156aef43759e5e46cee1fcbf33fb85c3f810972dc14f5e12d91be7cd07ba2998245fc31903c3bb07e29e3ca962f8a74177a872c6e1e8f831475d578fe6476fd141f58c2b539183d06caa857af530e6de0031a7a454ec8c0a86efa558c22e8f78c6dfae538f3de6c1299b2c21dbb4f2c4f90a819f7b49156dfdeab187511b0a5ebd31485d4055ed2d638ae382cff2f2c5a234dbfb9bebecba802c0b630e816b2effee6d90b8c47c78a25d4f9736543002e8452f313d50e9bb4784ecde41ae62617cdb6426fc9a8d26fb5de181eb575f61a1078a298fe62b725347553ae95fa1a7ca64310515be723ef5b2162e1416dd87c730d93cb10f890da6562bdead3dfe74fbfd827f5ca67b69180faacfd6d10e4da961fe3a841e13b240c5347d4535f378038df2151202b618e20424e182c70b9a1907ba559a83f9bf97011d9a11d1dfca57a5d2e510275b49fd2c9809314e7d95ed0dec1c0e1c524cf1fb1357466d67330a9dbdd3379f1483d909bb6f78ef96e9c3ecedfc60bf6f2a5ac496a2699fcd48848d81dcfa1bb80217e912ac139240316ae5bdd0f8bd5f5f2930f57bb02df19f6d1d1bbc47bf4ed126e3fcb2ce63b23060023c2b01256f6b92a738ae1a4153ac1527efa3c2405897de8b54f154dd529154208d17a3f7820433c8f7f568136f4ebd0a0fc1417f3bc8362935cd68f70fd3e9ceef4db8dcfdccd73c44124a78f01a2c060b1564bb61bb39da822a19c256d4a5d2d883830b64d80a94d362c376d06dac8bb9531015c2fc20688c113fd86c19758d5030d452995a4d7b70ceef9e0071364e776f44a3493edbadece2a6ea2917e0bff3fe29f9cf09520f61795e1f71b9e4db805edf6badc0d8c77247b693bc15bdfe289eb3404dfe2770831538165a83cb1c914bdc8eaf936c4f7c40d0f87bcf86c60a0c5ef5f5f0e67a277f65f1f8dbde2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">加密文章, 密码是博主名字首字母+生日(3位小写字母+8位数字)</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DolphinScheduler配置Seatunnel同步任务出错(从MySQL同步数据到Doris)</title>
      <link href="/2025/02/16/Dolphinscheduler%E9%85%8D%E7%BD%AEseatunnel%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%87%BA%E9%94%99/"/>
      <url>/2025/02/16/Dolphinscheduler%E9%85%8D%E7%BD%AEseatunnel%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%87%BA%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="DolphinScheduler配置Seatunnel同步任务出错-从MySQL同步数据到Doris">DolphinScheduler配置Seatunnel同步任务出错(从MySQL同步数据到Doris)</h2><p>DolphinSScheduler版本3.2.0, Seatunnel版本2.3.4</p><h4 id="错误日志">错误日志</h4><p>定义好工作流后, 上线运行报错, 关键日志入下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[INFO] 2025-02-16 13:02:00.427 -0800 - tenantCode :root, task dir:/tmp/dolphinscheduler/exec/process/root/16670700117984/16677825236448_2/2/3</span><br><span class="line">[INFO] 2025-02-16 13:02:00.429 -0800 - generate script file:/tmp/dolphinscheduler/exec/process/root/16670700117984/16677825236448_2/2/3/seatunnel_2_3.conf</span><br><span class="line">[INFO] 2025-02-16 13:02:00.433 -0800 - SeaTunnel task command: $&#123;SEATUNNEL_HOME&#125;/bin/seatunnel.sh --config /tmp/dolphinscheduler/exec/process/root/16670700117984/16677825236448_2/2/3/seatunnel_2_3.conf --deploy-mode local</span><br><span class="line">[INFO] 2025-02-16 13:02:00.436 -0800 - Final Shell file is : </span><br><span class="line">#!/bin/bash</span><br><span class="line">BASEDIR=$(cd `dirname $0`; pwd)</span><br><span class="line">cd $BASEDIR</span><br><span class="line">$&#123;SEATUNNEL_HOME&#125;/bin/seatunnel.sh --config /tmp/dolphinscheduler/exec/process/root/16670700117984/16677825236448_2/2/3/seatunnel_2_3.conf --deploy-mode local</span><br><span class="line">[INFO] 2025-02-16 13:02:00.439 -0800 - Executing shell command : sudo -u root -i /tmp/dolphinscheduler/exec/process/root/16670700117984/16677825236448_2/2/3/2_3.sh</span><br><span class="line">[INFO] 2025-02-16 13:02:00.483 -0800 - process start, process id is: 37662</span><br><span class="line">[INFO] 2025-02-16 13:02:02.484 -0800 -  -&gt; </span><br><span class="line">/tmp/dolphinscheduler/exec/process/root/16670700117984/16677825236448_2/2/3/2_3.sh: line 4: /bin/seatunnel.sh: No such file or directory</span><br><span class="line">[INFO] 2025-02-16 13:02:02.491 -0800 - process has exited. execute path:/tmp/dolphinscheduler/exec/process/root/16670700117984/16677825236448_2/2/3, processId:37662 ,exitStatusCode:127 ,processWaitForStatus:true ,processExitValue:127</span><br><span class="line">[INFO] 2025-02-16 13:02:02.493 -0800 - ***********************************************************************************************</span><br><span class="line">[INFO] 2025-02-16 13:02:02.505 -0800 - *********************************  Finalize task instance  ************************************</span><br><span class="line">[INFO] 2025-02-16 13:02:02.506 -0800 - ***********************************************************************************************</span><br><span class="line">[INFO] 2025-02-16 13:02:02.509 -0800 - Upload output files: [] successfully</span><br><span class="line">[INFO] 2025-02-16 13:02:02.512 -0800 - Send task execute status: FAILURE to master : 192.168.10.132:1234</span><br><span class="line">[INFO] 2025-02-16 13:02:02.514 -0800 - Remove the current task execute context from worker cache</span><br><span class="line">[INFO] 2025-02-16 13:02:02.515 -0800 - The current execute mode isn&#x27;t develop mode, will clear the task execute file: /tmp/dolphinscheduler/exec/process/root/16670700117984/16677825236448_2/2/3</span><br><span class="line">[INFO] 2025-02-16 13:02:02.519 -0800 - Success clear the task execute file: /tmp/dolphinscheduler/exec/process/root/16670700117984/16677825236448_2/2/3</span><br><span class="line">[INFO] 2025-02-16 13:02:02.520 -0800 - FINALIZE_SESSION</span><br></pre></td></tr></table></figure><h4 id="解决尝试">解决尝试</h4><p>先检查DolphinScheduler的Seatunnel环境变量是否配置正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SEATUNNEL_HOME</span><br></pre></td></tr></table></figure><p>发现输出为空, 但我已经在dolphinscheduler_env.sh配置了export SEATUNNEL_HOME=${SEATUNNEL_HOME:-/opt/software/seatunnel-2.3.4}, 于是决定重启DolphinScheduler, 重启后再次尝试, 环境依旧未生效, 进入dolphinscheduler_env.sh所在目录, 手动加载文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source dolphinscheduler_env.sh</span><br></pre></td></tr></table></figure><p>手动加载后运行<code>echo $SEATUNNEL_HOME</code>, 成功显示/opt/software/seatunnel-2.3.4, 再次重启DolphinScheduler, 运行依旧报错</p><p>意识到应该是我修改过的dolphinscheduler_env.sh文件没有生效, 应该重新执行install.sh脚本, 重新安装DolphinScheduler, 由于3.2.0是新的第一个大版本, 于是决定回退到3.1.9</p><h4 id="重装Dolphinscheduler">重装Dolphinscheduler</h4><p>停止ds服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./stop-all.sh</span><br></pre></td></tr></table></figure><p>删除dolphinscheduler目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /opt/software/dolphinscheduler-3.2.0</span><br></pre></td></tr></table></figure><p>删除ds元数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE dolphinscheduler;</span><br></pre></td></tr></table></figure><p>配置dolphinscheduler_env.sh, 根据自己的安装目录和服务器ip和账户密码配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/dolphinscheduler-3.1.9/bin/env</span><br><span class="line">vim dolphinscheduler_env.sh</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=$&#123;JAVA_HOME:-/opt/software/openjdk8&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Database related configuration, <span class="built_in">set</span> database <span class="built_in">type</span>, username and password</span></span><br><span class="line">export DATABASE=$&#123;DATABASE:-mysql&#125;</span><br><span class="line">export SPRING_PROFILES_ACTIVE=$&#123;DATABASE&#125;</span><br><span class="line">export SPRING_DATASOURCE_URL=jdbc:mysql://ip:3306/dolphinscheduler?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span><br><span class="line">export SPRING_DATASOURCE_USERNAME=root</span><br><span class="line">export SPRING_DATASOURCE_PASSWORD=</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DolphinScheduler server related configuration</span></span><br><span class="line">export SPRING_CACHE_TYPE=$&#123;SPRING_CACHE_TYPE:-none&#125;</span><br><span class="line">export SPRING_JACKSON_TIME_ZONE=$&#123;SPRING_JACKSON_TIME_ZONE:-UTC&#125;</span><br><span class="line">export MASTER_FETCH_COMMAND_NUM=$&#123;MASTER_FETCH_COMMAND_NUM:-10&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Registry center configuration, determines the <span class="built_in">type</span> and <span class="built_in">link</span> of the registry center</span></span><br><span class="line">export REGISTRY_TYPE=$&#123;REGISTRY_TYPE:-zookeeper&#125;</span><br><span class="line">export REGISTRY_ZOOKEEPER_CONNECT_STRING=$&#123;REGISTRY_ZOOKEEPER_CONNECT_STRING:-ip:2181&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Tasks related configurations, need to change the configuration <span class="keyword">if</span> you use the related tasks.</span></span><br><span class="line">export SEATUNNEL_HOME=$&#123;SEATUNNEL_HOME:-/opt/software/seatunnel-2.3.4&#125;</span><br><span class="line"></span><br><span class="line">export PATH=$JAVA_HOME/bin:$SEATUNNEL_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>配置install_env.sh, 根据自己集群资源配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/dolphinscheduler-3.1.9/bin/env</span><br><span class="line">vim install_env.sh</span><br><span class="line"></span><br><span class="line">ips=$&#123;ips:-&quot;&quot;&#125; </span><br><span class="line">sshPort=$&#123;sshPort:-&quot;22&quot;&#125; </span><br><span class="line">masters=$&#123;masters:-&quot;&quot;&#125; </span><br><span class="line">workers=$&#123;workers:-&quot;&quot;&#125; </span><br><span class="line">alertServer=$&#123;alertServer:-&quot;&quot;&#125; </span><br><span class="line">apiServers=$&#123;apiServers:-&quot;&quot;&#125; </span><br><span class="line">installPath=$&#123;installPath:-&quot;/opt/software/dolphinscheduler-3.1.9/ds&quot;&#125; </span><br><span class="line">deployUser=$&#123;deployUser:-&quot;root&quot;&#125; </span><br><span class="line">zkRoot=$&#123;zkRoot:-&quot;/dolphinscheduler&quot;&#125;</span><br></pre></td></tr></table></figure><p>连接mysql, 创建元数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE dolphinscheduler <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">DEFAULT</span> <span class="keyword">COLLATE</span> </span><br><span class="line">utf8_general_ci; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> dolphinscheduler.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>; </span><br><span class="line"> </span><br><span class="line">FLUSH PRIVILEGES; </span><br></pre></td></tr></table></figure><p>执行 <a href="http://upgrade-schema.sh">upgrade-schema.sh</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/dolphinscheduler-3.1.9 </span><br><span class="line"> </span><br><span class="line">chmod 777 tools/bin/upgrade-schema.sh </span><br><span class="line"> </span><br><span class="line">bash tools/bin/upgrade-schema.sh</span><br></pre></td></tr></table></figure><p>创建dolphinscheduler 安装目录, 这是由于我在install_env.sh中的配置, 要根据自己的情况来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/dolphinscheduler-3.1.9/</span><br><span class="line">mkdir ds</span><br></pre></td></tr></table></figure><p><a href="http://xn--install-yx7nn24y.sh">执行install.sh</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software/dolphinscheduler-3.1.9/bin/</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>使用默认账密admin/dolphinscheduler123登陆<br><img src="https://s3.bitiful.net/pb01/295.webp" alt="avatar"></p><p>检查配置是否生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SEATUNNEL_HOME</span><br></pre></td></tr></table></figure><p>重新进行同步任务, 成功.</p>]]></content>
      
      
      <categories>
          
          <category> big data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DolphinScheduler </tag>
            
            <tag> Seatunnel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Superst报错 Failed building wheel for python-geohash&amp;Command errored out with exit status 1</title>
      <link href="/2025/02/13/superset%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99/"/>
      <url>/2025/02/13/superset%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h3 id="安装Superst报错-Failed-building-wheel-for-python-geohash-Command-errored-out-with-exit-status-1">安装Superst报错 Failed building wheel for python-geohash&amp;Command errored out with exit status 1</h3><p>具体报错如下图所示:</p><p><img src="https://s3.bitiful.net/pb01/293.webp" alt="avatar"><br><img src="https://s3.bitiful.net/pb01/294.webp" alt="avatar"></p><h4 id="前置操作">前置操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">conda 23.5.2</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建虚拟环境</span></span><br><span class="line">conda create -n superset python=3.6</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">激活</span></span><br><span class="line">conda activate superset</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装依赖</span></span><br><span class="line">pip install sqlalchemy==1.3.24 </span><br><span class="line">pip install dataclasses==0.8 </span><br><span class="line">pip install --upgrade cryptography==3.2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装Superset</span></span><br><span class="line">pip install apache-superset</span><br></pre></td></tr></table></figure><h4 id="分析与解决办法">分析与解决办法</h4><p>看到报错判断出编译环境出了问题, 然后想到使用anaconda作为环境安装应该不会出现错误才对, 出于谨慎先检查gcc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -q gcc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">gcc-8.5.0-3.el8.x86_64</span></span><br></pre></td></tr></table></figure><p>gcc存在, 应该不是它的问题, 经过搜索发现可能是缺少某些开发工具, 于是直接选择安装全部开发工具(不准备一个个找了, 磁盘空间充裕😸)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall -y &quot;Development Tools&quot;</span><br></pre></td></tr></table></figure><p>然后再执行<code>pip install apache-superset</code>, 成功.</p>]]></content>
      
      
      <categories>
          
          <category> big data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Superset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bigtable Paper Reading</title>
      <link href="/2024/10/31/Bigtable/"/>
      <url>/2024/10/31/Bigtable/</url>
      
        <content type="html"><![CDATA[<h2 id="Bigtable-Paper-Reading">Bigtable Paper Reading</h2><p><strong>资料推荐</strong>: <a href="https://www.youtube.com/watch?v=r1bh90_8dsg" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">深入浅出BigTable</a>, B站似乎也有搬运, 看不了YouTube的小伙伴可以搜一下.</p><p>Bigtable的设计目标是为了达到广泛的应用性, 可扩展, 高性能和高可用, 我将从这几个目标来谈谈我对这篇论文的理解.</p><h3 id="可扩展">可扩展</h3><p>Bigtable是一个稀疏的、分布式的、持久的多维有序map，该map是基于行键(row key), 列键(column key), 时间戳(timestamp)三者建立索引的, map中的每个值都是一个未解释的字节数组. 每一条数据有一个行键, 通过行键可以原子性地读写一条数据. 一条数据包含了多个列族(column family), 不同行数据的同一列族内, 可以定义不同的列. 每一个列不仅可以保存值，而且可以保存多个版本，每个版本包含了一个时间戳。</p><p>列键被组织成一个叫列族的集合, 作为访问控制的基本单位. 存储在同一列族内的数据通常具有相同的类型, 在存储任何列键的数据之前必须先创建列族. 创建列族完成后, 列族中的任意列键都可以使用.</p><p><img src="https://pb01.s3.bitiful.net/224.webp" alt="avatar"></p><p>从上图我们可以看出bigtable的表设计是一张灵活的,&quot;稀疏&quot;表, 这对于早期互联网高速增长的业务来说是十分友好的. 如果采用MySQL集群存储数据, 一开始设计的方案不能满足业务的告诉增长, 就会面临数据倾斜, 部分服务器负载过高等问题.</p><p>举个论文中的例子:</p><p><img src="https://pb01.s3.bitiful.net/225.webp" alt="avatar"></p><p>行键是URL, 列键是网页的不同部分, 如“contents”, 时间戳是页面抓取时间, 根据这三者就可以定位到特定的值.</p><h4 id="动态分区">动态分区</h4><p>Bigtable通过将行键划分为大小相等的区域(Tablet)来分区, 每个Tablet包含一定范围内的行键. 当一个Tablet变得过大时, 它会被分割成两个区域, 当一个Tablet变得过小时, 它会与别的Tablet合并. 这种动态分区机制使得Bigtable可以水平扩展, 以适应不断增长的数据量. Chubby, Mater和Tablet Server共同合作完成数据的动态分区任务.</p><p>Tablet Server会由Master分配多个Tablet(Master可以根据每个 Tablet Server 的负载进行动态的调度, 起到负载均衡的作用), 其提供这些Tablets的读写服务, 并负责这些Tablets的分裂和合并. 分裂操作由Tablet Server发起, 而合并操作通常由Master发起, 因为可能涉及到多个Tablet Server. Master会周期性地向Tablet Server发送心跳信息, 以确保Tablet Server正常运行. 当Tablet Server宕机时, Master会将其负责的Tablets分配给其他Tablet Server.</p><p>Chubby的作用是: 保证任何时间只有一个Master、存储Bigtable数据的bootstrap location、tablet服务器的发现和服务器终止后的清理工作、存储Bigtable模式信息(每个table的列族信息)、存储访问控制列表. 如果我们只采用一台外部服务器来监控Master的存活, 误判的概率会很大, 从而导致数据不一致. 而一个Chubby服务由5个active replicas组成, 通过Paxos这样的共识算法来确保不会出现误判.</p><p>Master的作用是: 分配 Tablets给Tablet Server、检测Tablet Server的新增和过期、平衡 Tablet Server 的负载、对于 GFS 上的数据进行垃圾回收、管理表和列族的 Schema 变更, 比如表和列族的创建与删除.</p><h3 id="高性能">高性能</h3><h4 id="高性能的写入">高性能的写入</h4><p>首先是将随机写入转化为顺序写入, 追加数据本身就是顺序写入, 修改数据就是写入新的数据来覆盖旧的数据, 删除数据就是写入一个旧数据的墓碑标记. 然后是不会直接将数据写入磁盘, 先会在GFS中写入日志, 完成后写入内存中的内存表(MemTable). 当内存表的大小达到阈值时,内存表被冻结, 一个新的内存表被创建, 然后被冻结的内存表会转化为一个SSTable并写入到GFS中, 这个过程是minor compaction. minor compaction有两个目标：它缩小了 tablet 服务器的内存使用量，并且如果此服务器死机，它减少了在恢复期间必须从提交日志中读取的数据量。在压缩发生时，传入的读写操作可以继续。</p><p>随着时间的推移, SStable会越来越多, Bigtable通过在后台定期执行合并压缩(merging compaction)来限制此类文件的数量。合并压缩会读取一些 SSTable 和 memtable 的内容，并写出新的 SSTable。压缩完成后，可以立即丢弃输入的 SSTable 和 memtable。</p><p>将所有SSTable重写为一个SSTable的合并压缩称为主要压缩(major compaction). 非主要压缩生成的 SSTable 可以包含特殊的删除条目(用于标记其中已经被删除的数据), 但实际上这些数据还没有被真正删除. 而major compaction产生的SSTable不会包含这些删除信息或者已删除的数据. Bigtable会定期地遍历所有tablets, 执行major compaction操作. 这使得Bigtable可以及时回收已删除的数据占用的资源.</p><h4 id="高性能的读取">高性能的读取</h4><ol><li>客户端可以将多个列族组合成一个位置组(locality group). 每个tablet中的每个位置组都会生成一个单独的SSTable. 将通常不一起访问的列族隔离到单独的位置组中可以提高读取效率.</li><li>将SSTable的索引加载到内存中, 这样可以快速定位到数据所在的SSTable.</li><li>客户端可以控制是否压缩某个位置组的 SSTable, 虽然我们通过单独压缩每个块会损失一些空间, 但可以无需解压整个文件即可读取 SSTable 的一小部分.</li><li>把每个 SSTable 的布隆过滤器直接缓存在 Tablet Server, 布隆过滤器可以过滤掉绝大部分不存在的数据, 从而减少磁盘IO.</li><li>Tablet Server的两级缓存. 是一种高级缓存，Scan Cache用于缓存 SSTable 接口返回到 tablet 服务器代码的键值对。Block Cache是一种低级缓存，用于缓存从 GFS 读取的 SSTables 块。</li></ol><h3 id="高可用">高可用</h3><p><img src="https://pb01.s3.bitiful.net/226.webp" alt="avatar"></p><p>Bigtable通过设计将Master排除在了整个数据读写的过程中, 将查询Tablets尽可能地被分摊到了Bigtable的整个集群, 从而保证了高可用性.</p><p>Bigtable把分区和Tablets的分配信息存在Bigtable集群里的<code>METADATA</code>表. Bigtable 在 Chubby 里的一个指定的文件里，存放了一个叫做<code>Root Tablet</code>的分区所在的位置。这个<code>Root Tablet</code>的分区，是<code>METADATA</code>表的第一个分区，这个分区永远不会分裂(保证存储tablet的位置信息的结构不超过三层)。它里面存的是<code>METADATA</code>里其他Tablets所在的位置。而<code>METADATA</code>剩下的这些Tablets，每一个Tablet中，都存放着<code>User Tablets</code>的位置。</p><p><strong>查询过程</strong>:</p><ol><li>客户端首先访问Chubby，获取<code>Root Tablet</code>的位置。</li><li>客户端使用Root Tablet的位置信息，查询出具体<code>METADATA Tablet</code>的位置。</li><li>客户端使用<code>METADATA Tablet</code>的位置信息，查询出<code>User Tablets</code>的位置。</li><li>客户端使用<code>User Tablets</code>的位置信息，查询出具体的数据。</li></ol><p>METADATA table的每行数据在内存中大约占 1KB。如果将 METADATA tablet 限制在 128MB ，这种三层结构就可以存储高达 2^34个tablets和2^61 bytes</p><p>通过上面的设计, Bigtable达到了可扩展, 高性能和高可用, 正如它的名字一样, 这是一张&quot;大&quot;表, 所以它必然拥有广泛的应用性.</p>]]></content>
      
      
      <categories>
          
          <category> big data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近的思考与选择</title>
      <link href="/2024/08/26/2024-8-26-%E6%80%9D%E8%80%83%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
      <url>/2024/08/26/2024-8-26-%E6%80%9D%E8%80%83%E4%B8%8E%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="08f94d87d4e8d7e0184a9e69a040934bb4b7c633c42286498f0724d3920cc2b7">f2790461a6fef943f99cab532869b218d23edfd91720dd2ee5169f698afd7ed5d186964e503f76d362795d40fe77c671041b35f0bff5115c5ff0db73b20465e1d94a04549feac0c6f478df51af62f1ee7500cc69e63906cec5f0e7eddc540c2055c102c123471874885e421cabc26d0465a3a47bdd1662ec3fc6cb4ea7be2f9fba8eb13eec07b5391d1cda8d4e46b2f3bb32c4ca2632c32cd4616b5e2ea66b2dfd628228d0659fcef329f71fb7476a7edbdd943178bb2e5f50cb1e005136acc51737d465f82ee312b1afa79904e6824d0dd4a1fe70163da4de7cea8af9ae052ace85345f7d665c6d10afb5472c56f97380ce44a29dd2e1fbd6f458561918a5c30b513b3bd6eb6a1d2fea4aef19633157998facb9f7091595aa713596de92e73a3e549c25212555f95af6ca56bdc6a9e1c1b865ce0bcd9f3e05aeafc29033db16383c0f2b66f7032634df5806155d281c5fdb7fa065cf677b37d73ec517146e0d15e18e362e0cff44495faaf412f4d64264d2d5173759c09b86bc9aa287e9f582590e2c5fb3e8c1124dc6d6ebd27d9714f2f99f6dd992c593992a7aa286695e365407e39e3f8706be803002ed19cf40b5c4d196279266d7ce8b7f4ad46ffd4fd2d50be0f1c2e7372f8cd87f96cd4937b8fa06dcba177ab9bb91a8320266e8982abc3c73e8c7b33cc2f3daea3603c09149fe040187bb2705efc8911cb37e2193d248b12a9cec2e271f91b5656a27a796e36387fccfc5caa4fb524a733572ac592e8eb8294f07520bec6f1ca6aa1b04f5a8d2f37a61d60a3795ebd5448c8da97114fece2457457ae8fd2f2935871922d61962f6ceb33386deaffed9e852995af0d43ddfa0b0f033382460ad6605eac4c579dfd749a6a7b208f00980905630318df63fd9b70d05f750ef4fb1b1f316c3812612fd056c3cef6252d4426aad9ff2afd2d0f902a40274fa0236a68319162f51291d3d8db4f1e0dc451c81d7883dd3d7a9a9df3cf0adf282624c4fc337b4230c3a20c7fc25b49173106132139b3b6b90109f03f41f769788ac847ccf0627e6a5485812b8607afba5904efbb54f86364dae79ceeba13bfdc4f445bc95742d60434aa14480f6c577b7da3166671ecfe94e2e32e19e97a767cc4c46b7b2c6f87b98c4e0060da04083524ba5b0c5935aea0522be7b8924c947940ef7f774b07121b92561feab7655c6e9f5dc39befbe744dc7fd01439e16e62feb355e9a6bfc1851d23848791fb4b49208ef2ef6390751d2f70d4001f7c8a2b984ec86f0681d5b998f9a6a06089b4ed5d5894d5be7c98010f469c97bfd00735ea4076ec08666f62db1fa1f5a0d216efef4ff14ba18744dc5f7d4e834794d8b61faf598676783cb17489fef49e53bf37f021205f6d7a137948379ffa9d5cbb76400d6862d9c088a4f05c6eb94d838ee2e0563cb385699481a8b25a7aa86a0d53af429a7168f9c72d30d0e5b2dd8942d9790face1408c018afd79ecb23b2e6ae51f467658383bd53f751c482f1bb0c722d355ad7c988343cba9e2f4f899e9761aa58969674f10b76ef450fb3d1bdaf7593872e9e91e71fc9c51111fa3fa320b01fbc85168fb500320551742926acd7e6f59fbbc9e31d9be8cde394951d781cfe66ce0b317f89c9dfdeaf721689a95efc8b72eb335b7f51f6176f72008aa3775f0a082966044d3053498d36bb977ad302f4bb1607e1a570ce79cef3b34e922599dd80d9ba39833c8783fe0228817d294dede403c8c618ac18525cf4a1315c9d37e930d3a83b3604e37b4b76e612236f1e3eb7826e312827417e803b86bae0b7ad743e8f41d27aba08dfea8fc16f1891530db1d0a324196a623636347f342251a2b2bf1dd03a7c3ea2ea224a1ad780ae6e236f585de8eb3f78bebffdb53de04b641601802ce278d86ec34a2ef34cc6bc297189aa7b02feca3e4e8d462d3a48fb80410a4c33a9091d1d41165ecf6fc7122ad7592441c521d459f0c15ed0dc9ef696d9d813f1185dd5c04fb7312974e7c9ffc725fb210d47d87ec0668e1a38cee4f90006bbb9e67b2262e1101454f0b2ce22739cffa285c72d1d425ac8f5027e312e1d7481aba9dcbae73916fa9254711d088f40e3836307179906c846d105d0b150c6d43087fed964a37bc10d8e432ca8ec769d392bacc91f161caec9e97c28f7ed3b2d704d25024f80289f5c26a1b9985efd235b937acd6acbada4785d61f23eea0d4965543dcd3056c96eca85d2aea9cd4b8cb834e271ffd7719e11cddc13c89c6c936dd688852e639d87fffba186bf7af63d98f04498b52a1e306bced1b0bc51812fdbfed96c0f5efc5bd927c02d3e56dc5febff9db3f7e4357c0750558a0d9d5f1aa2a35a58a88b07d39912918b90cced45886bb44c20e2d46e40ce4fa515d1637179e5b47e8d8cd12a4f6ba3d34cb3cd91ebd8c1e0ad2b787e6b5f5f68e6788b901ac93eb80d839d5f39e3fc0f211c795a10ec79d40347625989db3c7b7b9e6a86f3c7504fba50fdab0084e6d820cc4292be261f0a1c901ea5a0950681eab8dd48f81b5ff10cc63202eaa9853b62363f517c766960447c615f613cb6e1ca00fce661dc573814ffcc95c109fde21fc314f3eadc363cd73e8c21c2b587bb6ac26c8a67bf655648e74fdabd77ccb06e61722bae9e1d3c1c7e253e8c32638f89c121aea22367fdb78e63f327d7e4d78eabf075419b3b52c5faa4fde96fac86f0483d4bdcdbba82414c1bddd318f9ec18c1800ed1a16728c9567a6a87d30b6aeb4b44ddc2fb14a757a14be60968a4411ce37608ddcc325716ba8513a5b34d401b365f107a7c2120e69ad450b49afa73a646256fa59591ef3cac064cc19d235746e72ddadb8574a8b59c28a5f9383c2909ae8cb139e82bb35d5a28f793edb520b777c3d3327eb98cd8adda4a54f521f354773e75dee53c349215973502e5554573bb397d89a29e77d09a8d0aeb594c9c17d29b636d8a44a4bb422ca0fd78e3252e215e8cb909adf5198c7d0b00e110099bb02e5e510ee388f127c72afec358f48c560d2cfebce1546be93284432e2b4697eacab1c0acf4d0f2436a7ae3c22cc3a31cc79c3454422cbdae9019f71da2d1035507b86e596df9a870e795cff53ca361dc7776ea47530ffbbbca84e66216616fa7e2c3087e436c8e3c4b58bf7b134b57afd4f19d70669fb528c56e53d425834234431c230e2a933cc9f7819fd2dafd4cfcc5d48b01f691388d836aec0c68e80a745b0e3d2f980902812352a9ef11c83a21bd51b0e21f628949acf803d42bdae8d1a4e52c3fe06c757bea29607fdead5778cdff74bb7ee9adf23c949560c5ebe42acf697567f7b506816c694d67fd884d32181229395f4076bd2a8fb96b578efc91afb092427871e9b0e4d1388c5132f22ce71238b3437d7cf78469f61c85456871cfed32f463054915372314cdc5901314167226dee2599d99efef4e464c316ee373c332c51034b35ee4e7d6e3e601bd0fb0aa71605ec00a7d0ce6faec4b8bbcbe253b091980b43db4a58aae7c79d03f7be2e697c3f6bce7a7cd8d0bd3cb87c527a1c9a399c0ca31a7f8d618693516dab56610a71cd4146d9a8d7581cd1a70aa81625c261b3df5d289a12bfe27e97b96317678952bd77ca329b4fbbf5fd15188ff5cd725a879a89b34750ea9dc668115a9f6b73156c4eec8903f4c8c041ea7d4c2b2f9718b18773f45eba7766fe62e29327ffb9ec693dd04176cd77659b9dcd9c1c04fc0377799581bfd4ee8f4d8fcf2fbac983c5a5da0c6db369c2d4b33abad6f275fcce4c339d7940b3a04c2581c67a10c884da7750ff5db63a27d619485580690dc369845bd7507df8a6e68c9bf0bb67767b1cb05998d77dbba3d83ed0ed5b30a517f16af3ab48bcfe939f5fdf5526f32c7109974f67bd74a202db5e2a244c02ccc7356d159b6b80adf7191f88e0066169297b1923f71e84f13ec2cd2167f8647f6d1cf263aa576f89f7dcb6fc7eb6d010fa121272c5fc4c4d821a612dc3475ea226b9c0c6247e50631ca4be9990c5edc9dcbbf57cbd036be5cb1056aefb2fc90659b40d54c239607759929771038e61860038fda531b234fbd88157c66eea29d209c20432f57627d9e6e06eb5fca89c5a007f6c142029628ab5e1bd2fd4383a3c0a3ac791a0691c001fa032ce9ac8eece4845dcb002e7a50ce5241fdd71de7aa1a8b3b96db74d2b842af7b916e0bd370a8d886508b910d1eb6e61184c2dc03a93021a3764170693adadb4f288dd00c9b2d72259ed1d18fe586f0532606c70646374921709bed7fee7a1d4a5f108bb3c290146a773965c35ac6fcc9af04aeddd8909d9d95d0e0243c015ec2423d93c5623acc35103a50b70158f22f6b71b79e2f49520ffbc180577ecc0d77b50d1b7829a4bab3b00e71db587d507df1bfa6715b66956f4c2cec5d7ac0df196f91aad922ffd68a854729ac3d4436dd5b1df02b49d0346ad2a28f6356f1be5bc8d6973aafa1cc2a1cbffdf9c73d338394e189a4e9cf70d58cf2b3533ecbf9a33f5d25e353d5964fd8a3fc3019e1b9bb11749e056fe64aaf34b6e856d4de2d03f269fa3282adce5a123c634bce5c29ce6ee9abe6ffc1856edb75e685cbd99ed9a54512ced58637d6d4edf97da8cb9434f9df6734ac9af4034f6064a87c1110823b4d2247508906579daa7a883de1b870ad7691cb6d135615b885781ed769ed1dff10d10e635e972163a01e0adb8e9b981782725b8d2263767812d00f096d5338bcee936e3ad7623f73f6b5cd4d366039e8e13e77646ca6e7c04e7dfe142b727e265ad95a9590c0a7d2cb55317c6a3f16038ce3ff9900df349bbadc53627606e2ab70e1e8e9b1035264fe10407e992fb483efbd15b3f20bd7a15817b5aa5e6630bf17e503d5e9bbecbd80697743b1fd9de60a88b21d87756a81e88ce924e80017fc267558106d9c2a6a0a3cd9ac9a4051f0ae4306ba1918f6655250ab2ff03b3b354bb2b292608413da3b49939c9997276458e5f7c83d530f3af97a7d8cdc6f2ad86591245109a12d25b4bb56e0fa2d2fb6ffcb3897c28d8e104d23e8860c05ae944e8fd97461b3942effe94aeca89699777499e0689197ecd0bbdff03d357ede808e48e80034cb9318fbb6ff947363e5f7a4b8e53e8ef1b57ea2cc985944494437de5e9e7cedf8b4054f96eb1f654e18f3cfbb9f1795c606395cfb98482f3fb275f1035f0b0a7390553ae5742876826b544b15747fb7b60bf2e7f6028f63d5a08cd8069e4f5c2d2ecf4dc372bfd2913c4799112bc215378ab1c6a8e616154788309fb2f35b7477878a27be753b8e9bbc3fd0ab9a6e6ab0994fc4de4c81869c1ca2421c8c39833270f7df00489e91f812e5f3e9da2265aaee7b012c6f3504469d099a35ee8bc55689724334b5fd9f30322a59fa11624b9623c0459b5f59a5577056b35fa19de9ae94e070b33e4d4e9267e8bebe619ff23d01990279822bd7f9ac22904c23118c7f2f21dae8a78cde7a0dee9047e656e1fe6a55a6c232c403ff1c0aaa76311fd6e4d0bc69ab4db7c42d6e6fe6e695008f6d1c2c8628e61f45a9e289ab400b836c7c241d588813ef02eee98d6bd349b410fbebf7cb421d8538a0a8cd448addd298332c6b4e280cea82dc9a107983ea48c3eacdba190e63c8cd60a9393d381067c1de82765aa16914a4cf294b73411d6671e5bebacb5af458108a7494a643d70427d1ef2fa8a0222f2ed28af9f567b209a1e555cfe32dc9399624872df5b68387d9ee5b12731c22aa37457123c19953d3c550f98aa13c6b262a0a59ac6bd74e672632fab865dc858f9cb413d48e63b376753b5a535d9a21e616dcdc1cdb615539a1f272310f98621e60aa00791a0959c668683f3c157e846652147052394b4348fcd8939ba1a6f601037447d04413db72684d05a3edeb66275fc8d71fed00c6c61d0909d7493d4d5e181469f824f9424fcf234fedfb8fe7146c7fc51baff80a96cb51ea40577b46292900e5a82385be244b286830993fa66a582e759cdd15f314f9bc8718e27fa51740886a69a35f0cfcd8cac157ac6555118f6e1252525cd898313722758accfa90ccac16ee5f3bfe0beac13373d5eb54bbc325fac5e0c551bf9200074867d11ac44c2d1e3b5cce6592660bf6d0f1d509e147f0cf99adfaf280600a70d7202ade9919f88a8470e437d508666cd224b7f8f924765759f3bcd8291fcefef11c1fe95de6e10ea7442e6c81de6db14948a4ec008ea36d35cc9deabd0a488a9b9469171696b6190b659ee46a7f7a852729be268263ba93e8965b341d9b7039265463e4072939b1159602e66c2bff5257a052ff3368896016b8ddf24dfed4c9d295ed8a8d39f91ec47ecccf134e371304a44fafc857cc9b758befa71d0567d13f5432b61c910ade31a6b2074ec25cd24a658a1c780d0e40ea8070b125bb758f1a0b84069cb29dc20403774f59d89b14293129fab49b24be913103179475a2f2c2607b26f0da437e62043c346311edeefe9a299d30382e05f8553775341273079696318b5abd3cd91f4014563daebadea99caeae7827d11f30da8d49fe11b913653d15dc42ef1fea217f0ad9bea65ec4c0b2924284b6288ceae503f710c4a9fa9bcbedc223b124b7e4c85e492f4fb10d0d26193fa3f713fc0530e3a08143d3b6cc7cf2e438294f545c12d8c5b2521b74548796a42d8fa2f8c14759748bae7723cabfbf786e516ebb76774ff350c1a89adfe4513c1f5bd644a9db55317363106183936104c7ad13b221e9be026d8b503b97630030d592399a1ef3508ee895d92ab9f45770fc1f40476e05cc21cb9b30af2d3413a57be2324f201752a1a0437c21cef5ee5c7ea098e349fe3ce834922704e89f93d5408a30a51ebb206ecad4360f291d91afcab698995dd92f373f7e0d44c561d03fb68529dd82e00c76489f76fcbfe787ec36269c7daee56f2d6f420d3f89371ec0f3f5d9f6935da2e6bd1df45546fe830a238545b6f191022003c25920b9f911665e9a5f879d2b67ca609ed4d4677dc9fb3d49abefb61d1f312774deed7e977688d8251cba98a84c1eee27d755f8e4a188d4598300d2f4d942e55c92b0a4a7ae0e723ec3d5acee82b8d5c816e2d48a7e23354f544613c9a8bfbfdb2900f0fbde8a4e7b2d895c93300b7db93900dc0afa3cc875c030d08a89a49bd6ef4c81fa948435a43868cba827eee1850b01d04381b2c0518dd19dc5072f1c9fc5a1756cdce4b18c2230c2ef6fd4a755f49f93720fcc9ab50b03325f6b8482a34dbaeb3e035623b154fe97aeb4a7e09fc2c92e8ed71b828cc43d57424b59ed6dba7e9a33f68a8d2f6b4ca91d87b41e86267e018416d18c2fa</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">2025/04/19转为加密文章, 请使用密码访问</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> memo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS Paper Reading</title>
      <link href="/2024/08/07/2024-8-7-HDFS/"/>
      <url>/2024/08/07/2024-8-7-HDFS/</url>
      
        <content type="html"><![CDATA[<h2 id="HDFS-Paper-Reading">HDFS Paper Reading</h2><p>我认为HDFS是一个更加通用的开源的GFS, 其架构和设计思路与GFS非常相似, 但是HDFS在实现上更加简单, 更加通用, 所以我会关注常见的问题和显著不同的地方.</p><h3 id="HDFS写流程">HDFS写流程</h3><ol><li>客户端发送写请求, 通过RPC与NameNode建立通信, NameNode检查该用户是否有写权限, 以及写入的文件是否在HDFS对应的目录下重名, 如果这两者有任意一个不满足, 则直接报错, 如果两者都满足, 则授予客户端一个写入租约(lease)</li><li>Client根据文件的大小进行切分, 默认128M一块, 切分完成之后给NameNode发送请求第一个block块写入到哪些服务器上</li><li>NameNode收到请求之后, 根据网络拓扑和机架感知以及副本机制进行文件分配, 返回可用的DataNode的地址</li><li>客户端收到地址之后与服务器地址列表中的一个节点进行通信, 建立pipeline, Client-&gt;DN0-&gt;DN1-&gt;DN2</li><li>Client向DN0以packet(64kb)形式传输数据, 然后沿着pipeline传输, ack响应会沿着pipeline逆序返回, 直到DN2收到数据, DN2向DN1发送ack, DN1向DN0发送ack, DN0向Client发送ack</li><li>当Client收到DN0的ack之后, 意味着对应的packet传输完成, 整个block传输完成后, Client再次请求NameNode上传第二个block</li></ol><p>从写流程中我们便能看出一些HDFS与GFS的相同之处, 也有一些不同之处</p><h4 id="GFS和HDFS中的租约-lease-机制是相同的吗">GFS和HDFS中的租约(lease)机制是相同的吗?</h4><p>不相同. GFS使用租约机制来确保对数据块的写入操作是有序的, 它会指定一个副本作为主副本, 主副本负责为所有对该数据块的写操作分配一个全局的序列号，来保证写入的顺序性; 而HDFS中的租约机制则用于确保单个客户端对文件的写入操作的独占性. 当一个客户端打开一个文件进行写入时, 它会获得一个租约. 这个租约确保在租约有效期内, 没有其他客户端可以写入同一个文件.</p><h4 id="GFS和HDFS中的pipeline传输机制是相同的吗">GFS和HDFS中的pipeline传输机制是相同的吗?</h4><p>几乎相同, 只不过GFS中存在主次副本的概念, Client传输(写入)的第一个对象就是主副本, 而HDFS中副本之间是平等的, 所以Client会将数据第一个传给离它最近的NameNode.</p><h3 id="HDFS和GFS的一致性">HDFS和GFS的一致性</h3><p>HDFS的一致性比GFS强一些, HDFS在文件完成写入后是不可变的(更准确地说, HDFS的文件在关闭之后不能被覆盖或在任意位置修改), 而GFS在文件完成写入后是可以修改的. 有人会问HDFS不是支持文件追加吗? 怎么是不可变呢? 和GFS的记录追加有什么区别呢? 主要的区别是GFS中的记录追加是为了并发写入而设计的, 它只能保证<code>至少一次</code>的一致性, 多个副本之间的数据是有可能不相同的(这种不一致是<strong>暂时的</strong>, 最终会通过内部机制达成一致); HDFS不支持对同一文件的并发写入, 它的文件追加是顺序写入, 能够做到<code>恰好一次</code>, 每个副本之间的数据是相同的, 所以HDFS的一致性更好.</p><h3 id="可用性">可用性</h3><p>HDFS论文中提到了CheckpointNode和BackupNode. CheckpointNode(也称为Secondary NameNode, 中文的资料中主要提的是这个)的主要作用是CheckpointNode会定期从NameNode接收编辑日志(EditLog)和文件系统镜像(FSImage), 然后合并它们, 生成一个新的FSImage, 并将这个新的FSImage发送回NameNode. 这个过程有助于减少EditLog的大小, 防止其无限增长, 从而避免NameNode在启动或恢复时需要处理巨大的EditLog, 提高了系统的稳定性和恢复速度. BackupNode可以作为NameNode的热备份, 存储NameNode的元数据的副本, 以便在NameNode故障时快速恢复.</p><p>但这两种方案都是Hadoop早期的做法, 在Hadoop 2.x版本中, NameNode引入了高可用(HA)特性, 通过配置Active NameNode和Standby NameNode, 可以实现NameNode的自动故障转移, Standby NameNode实时同步Active NameNode的状态, 确保在Active NameNode故障时能够迅速切换, 保证服务的连续性, 提高了系统的可用性和可靠性. 在Hadoop 3.x版本中, NameNode引入了联邦(Federation)特性, 可以将多个NameNode组成一个集群, 每个NameNode管理一部分命名空间, 这样解决了NameNode内存瓶颈问题,  提高了系统的扩展性和性能.</p><p>下面这是一张Hadoop 2.x版本中的高可用架构图, 3.x版本只比它多增加了一些NameNode的配置</p><p><img src="https://pb01.s3.bitiful.net/223.webp" alt="avatar"></p><p>监控NameNode状态采用zookeeper, 两个NameNode节点的状态存放在zookeeper中, 另外两个NameNode节点分别有一个进程监控程序, 实施读取zookeeper中有NameNode的状态, 来判断当前的NameNode是不是已经挂了. 如果Standby的NameNode节点的ZKFC发现主节点已经挂掉, 那么就会强制给原本的Active NameNode节点发送强制关闭请求, 之后将备用的NameNode设置为Active.</p><p>元数据信息同步在 HA 方案中采用的是共享存储, 每次写文件时, 需要将日志同步写入共享存储, 这个步骤成功才能认定写文件成功. 然后备份节点定期从共享存储同步日志, 以便进行主备切换. 共享存储采用的是基于QJM(Quorum Journal Manager)的方案, QJM共享存储的基本思想来自于Paxos算法, 采用多个称为JournalNode的节点组成的JournalNode集群来存储EditLog. 每个JournalNode保存同样的EditLog副本. 每次NameNode写EditLog的时候, 除了向本地磁盘写入EditLog之外, 也会并行地向JournalNode集群之中的每一个JournalNode发送写请求, 只要大多数的JournalNode节点返回成功就认为向JournalNode集群写入EditLog成功. 如果有2N+1台JournalNode，那么根据大多数的原则, 最多可以容忍有N台JournalNode节点挂掉.</p><h3 id="常见问题">常见问题</h3><h4 id="HDFS读流程">HDFS读流程</h4><ol><li>Client向NameNode发送读请求</li><li>NameNode收到请求之后会检查用户权限以及是否有这个文件, 如果都符合, 则会视情况返回部分或全部的block列表, 对于每个block, NameNode都会返回含有该block副本的DataNode地址; 这些返回的DataNode地址, 会按照集群拓扑结构得出DataNode与客户端的距离, 然后进行排序(规则: 网络拓扑结构中距离Client近的排靠前; 心跳机制中超时汇报的DataNode状态为STALE, 这样的排靠后)</li><li>Client选取排序靠前的DataNode来读取block，如果客户端本身就是DataNode,那么将从本地直接获取数据(短路读取特性)</li><li>当读完列表的block后, 若文件读取还没有结束, 客户端会继续向NameNode获取下一批的block列表</li><li>读取完一个block都会进行checksum验证, 如果读取DataNode时出现错误, 客户端会通知NameNode, 然后再从下一个拥有该block副本的DataNode继续读</li><li>最终读取来所有的block会合并成一个完整的最终文件</li></ol><h4 id="NameNode在启动的时候会做哪些操作">NameNode在启动的时候会做哪些操作?</h4><p><strong>首次启动NameNode</strong>:</p><ol><li>格式化文件系统, 生成fsimage镜像文件</li><li>启动NameNode:</li></ol><ul><li>读取fsimage文件, 将文件内容加载进内存</li><li>等待DataNade注册与发送block report</li></ul><ol start="3"><li>启动DataNode:</li></ol><ul><li>向NameNode注册</li><li>发送block report</li><li>检查fsimage中记录的块的数量和block report中的块的总数是否相同</li></ul><ol start="4"><li>对文件系统进行操作(创建目录/上传文件/删除文件等):</li></ol><ul><li>此时内存中已经有文件系统改变的信息, 但是磁盘中没有文件系统改变的信息, 此时会将这些改变信息写入edits文件中, edits文件中存储的是文件系统元数据改变的信息</li></ul><p><strong>非首次启动NameNode</strong>:</p><ol><li>读取fsimage和edits文件</li><li>将fsimage和edits文件合并成新的fsimage文件</li><li>创建新的edits文件, 内容开始为空</li><li>启动DataNode</li></ol><h4 id="Secondary-NameNode-CheckpointNode-的工作机制是怎样的">Secondary NameNode(CheckpointNode)的工作机制是怎样的?</h4><ol><li>Secondary NameNode询问NameNode是否需要checkpoint</li><li>Secondary NameNode请求执行checkpoint</li><li>NameNode滚动正在写的edits日志(写到新的日志文件)</li><li>将滚动前的编辑日志和镜像文件拷贝到Secondary NameNode</li><li>Secondary NameNode加载编辑日志和镜像文件到内存, 并合并</li><li>生成新的镜像文件fsimage.chkpoint</li><li>拷贝fsimage.chkpoint到NameNode</li><li>NameNode将fsimage.chkpoint重新命名成fsimage</li></ol><h4 id="在NameNode-HA中，会出现脑裂问题吗？怎么解决">在NameNode HA中，会出现脑裂问题吗？怎么解决?</h4><p>有可能会出现脑裂, 但概率比较小. 假设NameNode1当前Active状态, NameNode2当前为Standby状态. 如果某一时刻NameNode1对应的ZKFailoverController进程发生了&quot;假死&quot;现象, 那么 Zookeeper服务端会认为NameNode1挂掉了, 根据前面的主备切换逻辑, NameNode2会替代NameNode1进入Active 状态. 但是此时NameNode1可能仍然处于Active状态正常运行, 这样NameNode1和NameNode2都处于Active状态, 都可以对外提供服务, 即发生了脑裂.</p><p>会采用隔离的解决方案, 即把旧的 Active NameNode 隔离起来, 使它不能正常对外提供服务:</p><ol><li>首先尝试调用这个旧Active NameNode的 HAServiceProtocol RPC 接口的<code>transitionToStandby</code>方法, 看能不能把它转换为Standby状态</li><li>如果 transitionToStandby 方法调用失败, 那么就执行 Hadoop 配置文件之中预定义的隔离措施, Hadoop 目前主要提供两种隔离措施，通常会选择 <code>sshfence</code>:</li></ol><ul><li>sshfence: 通过 SSH 登录到目标机器上, 执行命令 fuser 将对应的进程杀死</li><li>shellfence: 执行一个用户自定义的 shell 脚本来将对应的进程隔离</li></ul>]]></content>
      
      
      <categories>
          
          <category> big data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GFS Paper Reading</title>
      <link href="/2024/08/01/2024-8-1-GFS/"/>
      <url>/2024/08/01/2024-8-1-GFS/</url>
      
        <content type="html"><![CDATA[<h2 id="GFS-Paper-Reading">GFS Paper Reading</h2><h3 id="架构-Architecture">架构(Architecture)</h3><p><img src="https://pb01.s3.bitiful.net/220.webp" alt="avatar"></p><p>GFS采用单Master架构, 由master和chunkserver这两类服务器组成, master是主控节点, 而chunkserver是存储数据的节点, 其实就是Linux服务器. GFS使用Linux上的文件作为基础存储层, 通过<strong>命名空间+文件名</strong>来定义一个文件. 文件按每64M划分为一个chunk, 每个chunk都自己的唯一标识(chunk handle). 为了确保数据不会因为某一个chunkserver坏了就丢失了，每个chunk都会有三份副本(replica). 其中一份是主副本(primary), 两份是次副本(secondary), 当三份副本出现不一致的时候, 就以主副本为准. 有了三个副本，不仅可以防止因为各种原因丢数据, 还可以在有很多并发读取的时候, 分摊系统读取的压力</p><p>Master会存放三种元数据: 文件和chunk的命名空间信息, 文件名和chunk handle的映射关系(文件被拆分成了哪几个chunk), chunk handle和chunkserver的映射关系(chunk被存储在哪个chunkserver中).</p><p>客户端想要读取GFS中的文件的步骤:</p><ol><li>客户端先去问 master，我们想要读取的数据在哪里。这里，客户端会发出两部分信息，一个是文件名，另一个则是chunk index, 因为客户端知道自己所要读取的数据的偏移量(offset)和长度, 它可以算出需要的是这个文件的哪几个chunk</li><li>master 拿到了这个请求之后，就会把这些chunk的chunk handle和对应的所有副本所在的位置，告诉客户端。</li><li>客户端发送chunk handle和byte range向对应的chunkserver(通常是离得最近的chunkserver)请求读取数据</li><li>chunkserver读取数据并返回给客户端</li></ol><p>看完上面你可能会觉得GFS的设计十分简单, 确实如此, 那么代价是什么呢? 代价就是master的压力会很大, master需要承受数百台客户端的并发访问, 于是Google决定将master中的数据存储在内存中, 以提高性能. master中存储的信息是非持久化的, 它会通过周期的心跳检测保证存储的是最新的信息.</p><h3 id="可用性保障-Availability-assurance">可用性保障(Availability assurance)</h3><p>master节点如果挂掉了怎么办呢? 首先设计了可恢复机制, GFS在日志增长超过一定的大小的时候会对对当前状态设置一个checkpoint, 然后会把日志和checkpoint存储在磁盘上, 当master挂掉之后, 可以从checkpoint和日志中恢复状态, checkpoint的目的缩短恢复的时间, 回到一个较新的状态再根据操作日志恢复比从头根据日志恢复要快得多.</p><p>那如果硬件出问题, master无法恢复怎么办呢? GFS为master准备了几个备胎, 即backup master, master 的所有修改, 都需要同样写到backup master上. 只有当数据在 master上操作成功, 对应的操作记录持久化到硬盘上, 并且backup Master的数据也写入成功, 并把操作记录持久化到硬盘上, 整个操作才会被视为操作成功, 这就是同步复制. 如果要切换master, 为了实现无感的切换, GFS通过一个规范名称(Canonical Name)来指定master，而不是通过IP地址或者Mac地址. 这样, 只需要修改DNS的别名, 就能达到目的.</p><p>在恢复master的等待时间内, 就不能提供任何服务了吗? 对于写入服务, 确实如此, 但对于读取服务, GFS提供了只读的shadow master(异步复制). shadow master中的数据不一定和master以及backup master完全一致, 因为数据在master和backup master上写入完成就算真正成功了, shadow master的数据可能还没有更新, 但它会尽量与master保持一致. 想要读到有问题的数据的概率是不大的, 需要满足三个条件: 1. master挂了 2. master的日志还没有同步到backup master 3. 要读的数据恰好是还没有更新的那部分</p><h3 id="交互">交互</h3><p>由于master的性能瓶颈, 我们需要尽量减少其他节点(client,chunkserver)和master之间的交互, 于是设计了租约和数据流与控制流分离. 租约是master对primary replica(主副本)对变更顺序的授权, 因为我们需要写入三份. 一个写入流程如下图:</p><p><img src="https://pb01.s3.bitiful.net/221.webp" alt="avatar"></p><p>具体流程如下:</p><ol><li>客户端会请求master哪一个chunkserver持有当前的租约, 以及其他的副本位置. 如果没有副本持有租约, master会选一个副本授权租约给它. 客户端在询问master数据应该写到哪里</li><li>master会返回给客户端所有主副本和次副本的相关信息</li><li>客户端会把要写的数据发给所有的副本. 不过此时, chunkserver拿到发过来的数据后还不会真的写下来, 只会把数据放在一个LRU(Least Recently Used)的缓冲区里</li><li>一旦副本确认收到了数据, 客户端会发一个写请求给主副本. 该请求标识了之前推送给所有副本的数据. 然后主副本会分配一个连续的序列号给所有它接受到的变更(可能来自于多个client). 然后主副本会将按照前面的序列号将变更应用到本地的副本上</li><li>主副本会把对应的写请求转发给所有的次副本, 所有次副本会和主副本以同样的数据写入顺序, 把数据写入到硬盘上</li><li>等其他副本都写入完成了, 会返回给主副本操作完成</li><li>主副本会响应给客户端. 任何副本碰到的错误信息都会返回给client. 出现错误时, 写操作可能已经在主副本以及部分副本上执行成功了(如果是主副本失败了，就不会有变更的序列号分配给其他的副本也就是不会有后面的操作了). 如果遇到错误, 那么客户端的请求会被认为是失败的, 修改的region认为是处于不一致的状态. 我们客户端的代码代码会通过重试这些变更来处理这样的错误. 它会先在3-7步骤进行一些尝试后再从头重试写操作.</li></ol><p>控制流和数据流的分离使得实际的数据传输过程和提供写入指令的动作是完全分离的. 客户端会将数据推送到最近的chunkserver, 然后这个chunkserver再推送到最近的另一个chunkserver, 依次类推, 实现链式的数据推送, 不采用客户端推送给全部chunkserver的做法充分利用了每台机器的带宽, 并且有效降低了延迟</p><p>GFS还为文件复制设计了一个Snapshot指令, 这个指令会通过控制流, 下达到主副本服务器, 主副本服务器再把这个指令下达到次副本服务器, 各个chunkserver会将本地的对应的chunk复制一份, 不需要传输数据. 如果没有这个指令, 客户端需要将文件从chunkserver读取回来, 再写入到chunkserver中去, 这极大地节省了时间和网络资源.</p><h3 id="一致性-Consistency">一致性(Consistency)</h3><p>文件的namespace的变更是原子性的. 他们只被master处理: 命名空间锁保证了原子性和准确性; master的操作日志定义了全局全部操作的顺序.</p><p><img src="https://pb01.s3.bitiful.net/222.webp" alt="avatar"></p><ul><li>如果数据写入失败, GFS里的数据就是不一致的.</li><li>如果客户端的数据写入是顺序的, 并且写入成功了, 那么文件里面的内容就是确定的(Defined, 即客户端写入GFS的数据能够完整的被读取).</li><li>如果由多个客户端并发写入数据，即使写入成功了, GFS 里的数据也可能会进入一个一致(无论从哪个副本读的数据都是相同的)但是非确定的状态.</li></ul><p>为什么会出现第三种情况呢? 主要原因有两点: 一是数据写入的顺序是由主副本来管理的, 并不需要通过master; 二是数据的写入往往要跨越多个chunk. 比如说针对相同的数据写, 先前的变更会被新的变更所覆盖, 这样会导致读取到两次变更组合后的结果. 所以我们需要尽量避免随机的数据写入, 可以从客户端入手来保证写入的顺序性.</p><p>如果说让客户端保证写入的顺序性, 那GFS支持并发读写不就是一个笑话吗? 这是是因为随机写入并不是GFS设计的主要的数据写入模式, GFS设计了记录追加(Record Appends), 这是 GFS 希望我们主要使用的数据写入的方式, 由覆盖写改为了追加写, 牺牲一部分存储空间来保证一致性.</p><p>记录追加首先会检查当前的chunk是不是可以写得下现在要追加的记录. 如果当前chunk已经写不下了, 那么它先会把当前chunk填满空数据后, 主副本会告诉客户端，让它去下一个chunk继续追加. 追加的记录大小需要控制在trunk最大值的四分之一以内，以保证最坏情况下的碎片在一个可以被接受的等级, 即最后一个chunk会留出最多四分之一的空间来为了之后的记录追加, 四分之一是在高效的追加和空间浪费直间的权衡.</p><p>如果在主副本上写入成功了, 但是在次副本上写入失败了怎么办呢? 这样不是还会出现数据不一致的情况吗? 在前面我们提到出现这种会让客户端重试, 即使在有些副本上同样的内容写入了多次, 但我们保证了数据至少被写入了一次, 所以数据不会丢失. 对于Google的使用场景来说, 同样的网页被存储了两次并不是什么大问题, 可以在排序后进行去重<br>. 这个至少一次的机制虽然牺牲了一定的<strong>可用性</strong>, 但保证了<strong>高并发和高性能</strong></p>]]></content>
      
      
      <categories>
          
          <category> big data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> GFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用密码学与网络安全实验通关指南</title>
      <link href="/2024/06/26/2024-6-26-%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
      <url>/2024/06/26/2024-6-26-%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="应用密码学与网络安全实验通关指南">应用密码学与网络安全实验通关指南</h2><p>这是计科网络方向应用密码学与网络安全的随课实验, 占课程分数的20%. 第一次主要是介绍内容, 两周后的第二次实验主要是验收, 实验内容自己线下完成即可.</p><p>实验内容如下:</p><ol><li>密码学及应用：熟悉云安全实验平台及环境，完成：<br>实验1（古典密码算法）――&gt;练习一Caesar密码，<br>实验1（古典密码算法）――&gt;练习二单表置换密码，<br>实验1（古典密码算法）――&gt;练习三仿射密码</li><li>密码学及应用：<br>实验2（对称密码算法）――&gt;练习一DES，<br>实验2（对称密码算法）――&gt;练习二AES</li><li>密码学及应用：<br>实验3（非对称密码算法）――&gt;练习一RSA，<br>实验4（ Hash算法）   ――&gt;练习一MD5</li><li>密码学及应用：<br>实验5（密码应用）――&gt;练习一文件安全传输</li></ol><p>这个实验的目的是为了考察对于各个加密算法的流程的理解和掌握, 并不是要让你真的手搓这些算法(当然能手搓也是一种能力). 最后验收只要将结果展示出来并且能解释清楚(需要完整讲述算法流程, 主要验收DES, AES, RSA, MD5, 以及文件安全传输)</p><h3 id="DES">DES</h3><p>DES 算法是在 Feistel network 的基础上执行的.以下是 DES 算法的流程图:</p><p><img src="https://pb01.s3.bitiful.net/211.webp" alt="avatar"></p><p>我们可以看到DES算法可以分为左右两个部分, 左半部分为迭代加密, 右半部分为子密钥生成.</p><p><strong>子密钥生成</strong></p><p>我们要从初始的64位的秘钥中生成16个48位的子密钥(Sub-key), 大致步骤如下:</p><ol><li>初始秘钥经过PC-1置换, 得到56位的初始秘钥, 剩余的8位做校验位</li><li>将56位的初始秘钥分成左右两部分, 分别记为C<sub>i</sub>, D<sub>i</sub></li><li>将左右两部分分别循环左移1~2位, 即可得到C<sub>i+1</sub>, D<sub>i+1</sub>, 当i=1,2,9,16时左移1位，其它左移2位。</li><li>将C<sub>i+1</sub>, D<sub>i+1</sub>分别经过PC-2置换, 合并到一起就得到了48位的子密钥</li><li>如此总共进行16轮, 就得到了16个48位的子密钥</li></ol><p><strong>迭代加密</strong></p><p>迭代加密部分, 主要分为两个步骤:</p><ol><li>初始明文经过IP置换, 将其分为左右两半部分分别为L和R</li><li>每一轮迭代，都是接收一组 L, R，返回 L’, R’ ，作为下一轮迭代的 L, R . 迭代过程如下：其中F函数（称为轮函数）是整个算法的核心，功能是：以一个子密钥，加密 32-bit 的信息。<br><img src="https://pb01.s3.bitiful.net/212.webp" alt="avatar"></li><li>利用之前得到的 16 个子密钥，执行步骤 2 一共 16 次</li><li>将最终的 R 与 L 拼接，再做一次FP置换(IP置换的逆变换)，即得到密文</li></ol><p><strong>轮函数</strong></p><ol><li>对32位的输入进行E扩展, 变为为48位的扩展输出</li><li>扩展输出与子密钥进行异或运算</li><li>扩展输出经过S盒置换, 得到32位的输出</li><li>P置换, 得到28位的输出</li></ol><h3 id="AES">AES</h3><p>AES算法的流程图:<br><img src="https://pb01.s3.bitiful.net/213.webp" alt="avatar"></p><p>每一轮迭代都是字节替换, 行移位, 列混淆, 轮秘钥加这四个步骤. 以128位秘钥为例, N=10, 需要N+1(11)个轮秘钥, 中间循环迭代N-1(9)轮, 也可以说迭代N轮, 最后一轮不进行列混淆</p><p>关于字节替换, 行移位, 列混淆的具体细节可以去看PPT, 在验收时不要求能详细说出来.</p><p><strong>秘钥扩展</strong></p><p>AES加密可以采用不同长度的秘钥, 一般为128位, 192位, 256位, 分别对应10轮, 12轮, 14轮. 秘钥扩展的步骤如下(以128位秘钥为例):</p><ol><li>扩展密钥的前四个字直接由输入密钥中复制，即w[0]~w[3], w[i]的值等于w[i-1]异或w[i-4] (i&gt;=4,i不是4的倍数)</li><li>对于下标为4的倍数的密钥字，其产生方法更为复杂，表示为函数g(w[i-1]). 包括的运算步骤有：字循环(RotWord)：使一个字中的4个字节循环左移一个字节; 字节代换(SubWord)：利用S盒对输入字中的每个字节进行代替; 字循环与字节代换的结果再与轮常量Rcon[j]相异或</li><li>w[i]的值等于w[i-4]异或g(w[i-1]) (i&gt;=4, i是4的倍数)</li></ol><p>示意图:<br><img src="https://pb01.s3.bitiful.net/214.webp" alt="avatar"></p><h3 id="MD5">MD5</h3><p>MD5是一个基于哈希函数的加密算法, 其输入为任意长度的二进制数据, 输出为128位的二进制数据.<br>其流程如下:</p><ol><li>对输入明文进行填充, 使其能被512整除(后面每一轮的输入都是512位),填充的具体步骤如下: 首先将数据长度表示为二进制形式，并附加到数据的末尾; 在数据末尾添加一个’1’比特，然后填充0直到数据长度满足对512取模的结果为448(即数据长度模512等于448); 将数据长度（64位）附加到填充后的数据末尾，以二进制表示</li><li>将512位的明文分组划分为16个子明文分组，每个子明文分组为32位</li><li>初始化4个32位的链接变量，记为A、B、C、D, 初始是固定值</li><li>对每个子明文分组和四个链接变量(a,b,c,d, 如果是第一次运算的话, 就是ABCD的值)都进行FF,GG,HH,II四轮运算(共64次运算)</li><li>将运算之后的链接变量a,b,c,d与初始链接变量A,B,C,D进行求和运算得到新的链接变量</li><li>新的链接变量作为下一个明文分组的输入重复进行以上操作</li><li>最后，4个链接变量里面的数据就是MD5摘要</li></ol><p>RSA比较简单我就不写了</p><h3 id="文件安全传输">文件安全传输</h3><p>要设计一套A和B之间可以安全通信的方案, 不需要考虑传输部分, 因为这是基于前面的代码的, 集成起来比较麻烦. 验收时讲解流程和展示结果即可, 不需要现场运行</p><p>方案设计:</p><p><img src="https://pb01.s3.bitiful.net/215.webp" alt="avatar"></p><p><strong>参数选取</strong></p><p>RSA A：选择 p=61，q=53，e=17 得到公钥（e，n）=（17，3233） 私钥（d，<br>n）=（2573，3233）<br>RSA B:选择 p=47，q=59，e=63 得到公钥（e，n）=（63，2773） 私钥（d，<br>n）=（847，2773）<br>明文: levit<br>AES 秘钥: 12345678KJNMLSDG</p><p><strong>加密过程(A)</strong>:<br>AES 密文: 640246746 37579803911 321220508 1223758774 116<br>用 B 的公钥对 AES 秘钥进行 RSA 加密 RSA_AES_miyao : ۯ Ϳ ʭ ؆ ĳ β ճ ਝ ѽ<br>॥ ¤ ઁ উ ३ ષ<br>对明文计算 MD5 摘要,MD5_miwen: ea152a3ff6469c391ee8c79a01191d80<br>A 的私钥对 MD5_miwen 加密, RSA_MD5_miwen: ઁ ઁ ઁ ۰ χ χ స ص<br>స ਘ ō ۰ ਘ ұ ō ਘ ઁ ਐ ਘ Ɵ ұ ਐ ষ<br>最后把加密生成的文件 AES_miwen.txt、RSA_AES_miyao.txt、<br>RSA_MD5_miwen.txt 打包发给终端 B</p><p><strong>解密过程(B)</strong>:<br>终端 B 的私钥对 RSA_AES_miyao.txt 进行 RSA 解密, 得到:AES_Key<br>对 AES_miwen 解密，得到明文 AES_mingwen.txt<br>用 MD5 算法对所得明文 AES_mingwen.txt 进行加密生成解密后的明文摘要。得<br>到： AES_mingwen_MD5.txt<br>RSA 算法用终端 A 的公钥对 RSA_MD5_miwen.txt 进行解密，得到:<br>RSA_MD5_mingwen.txt<br>比较 RSA_MD5_mingwen.txt 和 AES_mingwen_MD5.txt 有什么不同</p><p>加密结果与编码有关, 同样参数也可能显示不一样的结果</p><p>结果展示:</p><p><img src="https://pb01.s3.bitiful.net/216.webp" alt="avatar"><br><img src="https://pb01.s3.bitiful.net/217.webp" alt="avatar"><br><img src="https://pb01.s3.bitiful.net/218.webp" alt="avatar"><br><img src="https://pb01.s3.bitiful.net/219.webp" alt="avatar"></p><p>代码和实验报告开源在了我的<a href="https://github.com/Marvel-Gu/XDU_CS_Applied_cryptography.git" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">github</a>上, 如果对你有帮助的话, 欢迎star和follow😘</p>]]></content>
      
      
      <categories>
          
          <category> xdu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学者眼中的Go语言</title>
      <link href="/2024/05/27/2024-5-27-GO%E5%85%A5%E9%97%A8/"/>
      <url>/2024/05/27/2024-5-27-GO%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="初学者眼中的Go语言">初学者眼中的Go语言</h3><p>最近花了一些时间过了一遍<a href="https://go-zh.org/doc/" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">Go编程语言</a>中的<a href="https://tour.go-zh.org/welcome/1" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">Go语言之旅</a>, 也算是入门了, 下面谈谈我认知的Go语言</p><h4 id="类型">类型</h4><p>不像绝大数语言,类型定义在了变量名之前,Go中<code>类型在变量名之后</code>,如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;  </span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等效于</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方也在博客<a href="https://blog.go-zh.org/gos-declaration-syntax" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">Go’s Declaration Syntax</a>中给出了理由, 但可能是由于惯性, 我仍然不是很喜欢这种设计🤥</p><p>关于<code>变量初始化</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i, j <span class="type">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="comment">//等效于</span></span><br><span class="line"><span class="keyword">var</span> i, j = <span class="number">1</span>, <span class="number">2</span></span><br></pre></td></tr></table></figure><p>幸亏变量初始化时类型声明可以忽略, 不然真的看上去很怪, 忽略后一看, 这不是JavaScript吗🥰</p><h4 id="Go没有while">Go没有while</h4><p>绝大多数编程语言都是有while循环的, 虽然while循环的本质还是for循环, Go说: <code>for是Go中的while</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</span><br><span class="line">sum += sum</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="defer">defer</h4><p>defer 语句会将函数推迟到外层函数返回之后执行。其他编程语言中没见过这个特性, 但在Go中, 它被广泛使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure><p>在实际使用上来说, 这有点像Java和Python中的<code>finally</code>, 但不同的是, <code>finally</code>是异常处理的一部分, 靠控制流机制实现, 而<code>defer</code>是通过栈机制实现的。推迟调用的函数调用会被压入一个栈中。 当外层函数返回时，被推迟的调用会按照后进先出的顺序调用。</p><h4 id="切片">切片</h4><p>说到切片其实很容易让人想到Python, 它和Go中的切片有什么不同点呢?</p><ol><li><p><strong>通用性</strong>: Python中的切片操作非常通用，可以对列表、元组、字符串等进行切片。Go中的切片是一种具体的数据结构，只能用于切片类型。</p></li><li><p><strong>语法</strong>: 两者语法相似, 都可以写做[a,b,c], 但Python中a,b,c的取值可以是负值, 而Go中不可以, 并且c这个位置在两种语言中的含义也不相同, Python中的c表示步长, 而Go中的c表示切片的容量。</p></li><li><p><strong>返回值</strong>: Python切片操作返回一个新的对象，与原对象在内存中是分离的。而Go中的切片操作返回的是原切片的一个视图，共享相同的底层数组。</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">printSlice(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 截取切片使其长度为 0</span></span><br><span class="line">s = s[:<span class="number">0</span>]</span><br><span class="line">printSlice(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展其长度</span></span><br><span class="line">s = s[:<span class="number">4</span>]</span><br><span class="line">printSlice(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 舍弃前两个值</span></span><br><span class="line">s = s[<span class="number">2</span>:]</span><br><span class="line">printSlice(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;len=%d cap=%d %v\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="built_in">len</span>=<span class="number">6</span> <span class="built_in">cap</span>=<span class="number">6</span> [<span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">11</span> <span class="number">13</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">0</span> <span class="built_in">cap</span>=<span class="number">6</span> []</span><br><span class="line"><span class="built_in">len</span>=<span class="number">4</span> <span class="built_in">cap</span>=<span class="number">6</span> [<span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">2</span> <span class="built_in">cap</span>=<span class="number">4</span> [<span class="number">5</span> <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s []<span class="type">int</span></span><br><span class="line">printSlice(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可在空切片上追加</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">0</span>)</span><br><span class="line">printSlice(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个切片会按需增长</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>)</span><br><span class="line">printSlice(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以一次性添加多个元素</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">printSlice(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;len=%d cap=%d %v\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"><span class="built_in">len</span>=<span class="number">0</span> <span class="built_in">cap</span>=<span class="number">0</span> []</span><br><span class="line"><span class="built_in">len</span>=<span class="number">1</span> <span class="built_in">cap</span>=<span class="number">1</span> [<span class="number">0</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">2</span> <span class="built_in">cap</span>=<span class="number">2</span> [<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">5</span> <span class="built_in">cap</span>=<span class="number">6</span> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>切片的长度和容量之间的关系有以下几点：</p><ol><li>切片的长度（<code>len</code>）总是小于或等于其容量（<code>cap</code>）。</li><li>当切片被创建时，长度和容量通常是相等的，但如果从一个较大的数组或切片创建一个新的切片时，新切片的容量可能会大于其长度。</li><li>当使用内建函数<code>append</code>向切片追加元素时，如果追加的元素超出了当前长度但未超出容量，切片的长度会增加，而容量保持不变。</li><li>如果<code>append</code>导致切片长度超过容量，Go运行时会分配一个新的底层数组，并将现有的元素和新元素复制到这个新数组中。这时，切片的容量会变为新的长度值，因为新数组的大小至少是新长度的两倍（具体增长策略可能更复杂，但至少是这个保证）。</li><li>切片可以通过重新切片（reslicing）来减少长度，但这样做不会改变其容量。重新切片的语法是<code>slice[low:high]</code>，其中<code>low</code>是切片的起始索引，<code>high</code>是结束索引（不包括）。如果省略<code>low</code>，则默认从切片的开始；如果省略<code>high</code>，则默认到切片的末尾。</li></ol><h4 id="并发编程">并发编程</h4><p>Go的并发机制个人认为比Java要更容易上手, 协程和信道的设计加上<code>go</code>关键字启动, 使得并发变得更加简单</p><p>谈谈Go和Java的区别:</p><ol><li><p><strong>并发模型的本质</strong>: Java是基于线程的并发模型，其中每个线程都是操作系统的轻量级进程。Go语言采用了基于协程(goroutine)的并发模型。Goroutines是轻量级的线程，由Go运行时管理，而不是操作系统。</p></li><li><p><strong>内存模型和同步</strong>: Java有一个明确定义的内存模型，它涵盖了变量的可见性、有序性和原子性。Java提供了多种同步机制，如synchronized关键字、Lock接口和volatile关键字，以确保并发安全。Go也有自己的内存模型，它通过goroutines和channels来保证数据的同步。Go鼓励使用channels进行通信，而不是传统的锁机制。这有助于减少竞争条件和死锁的问题。</p></li><li><p><strong>运行时管理</strong>: Java的并发管理主要由JVM负责。Go的并发管理由Go运行时负责。</p></li><li><p><strong>性能和可扩展性</strong>: Java线程的创建和上下文切换开销相对较高。因此，Java程序在创建大量线程时可能会遇到性能问题。goroutines的创建和上下文切换开销非常低，这使得Go程序能够轻松创建数以万计的goroutines。Go的运行时能够更有效地在多个OS线程上调度这些goroutines。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美赛经验分享</title>
      <link href="/2024/05/13/2024-5-13-%E7%BE%8E%E8%B5%9B/"/>
      <url>/2024/05/13/2024-5-13-%E7%BE%8E%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h3 id="美赛经验分享">美赛经验分享</h3><p>前一段时间美赛出成绩了, 侥幸得了个M, 虽然不是什么大奖, 但也有一些浅薄的经验可以分享(主建模和画图)</p><p><img src="https://pb01.s3.bitiful.net/207.webp" alt="avatar"></p><h4 id="组队">组队</h4><p>其实组队是决定你数模成绩的<strong>最重要</strong>的一步,和认真负责的队友组队会让你的成功几率上升一大截. 首先我推荐找一个靠谱的熟人, 再让他找一个.这样就是比较好的方式, 或者找两个熟人也行, 不太推荐去各种墙上找人,一般找到的都不太靠谱. 组完队之后, 在比赛开始前, 我们学校一般会有训练(其实就是做往年题), 在这个时候你应该能大致判断队友靠不靠谱了, 如果他天天有事不参加模拟训练或者说不积极不干活, 建议和另一个队友商量把他踢出去, 或者说你觉得另外两个队友都不靠谱, 那就退出重新寻找队伍. 熟人组队的一大劣势就是想踢人很难, 我国是个人情社会(bushi), 所以一开始就要认真思考.</p><h4 id="准备">准备</h4><p>首先要确定好1~2个主攻的题型,然后队内三个人的分工要明确, 特别是对于低年级第一次参赛的选手, 分工不明确的话学完很难.</p><p>从<strong>建模</strong>的角度来说,提升最快的就是看优秀论文,O/F的都可以看看,提取应对某一类问题通用的解决方案和他们论文中的闪光点.积累到自己的笔记上, 比赛时可以快速选取一些解决方案. 还有就是自建模型或者结合基础模型的时候, 要考虑到可实现性, 如果你的模型无法实现, 或者实现起来太复杂, 那就妥协一些东西(简化模型/数据), 有结果总比没有结果强.</p><p>从<strong>画图</strong>的角度上来说, 最重要的就是复刻别人论文中的图, 积累好常用图像(像our work, 常用算法的原理图, 对比图等)的几种模版供比赛的时候使用, 常用图现画是不太经济的一种做法,即使是从现有的图调整往往也需要很久. 还可以去文献中找图复刻, 很多科研论文中的图看上去真的很高级, 也许表达的含义差不多, 但漂亮的插图绝对是一大加分项.</p><p>从<strong>编程</strong>的角度来说, 要复现优秀论文中的算法(虽然大多数情况下是调包侠), 常用算法要有一套能跑的, 如果要用在上面修改即可, 这样会快很多. 遇到问题可以去问问GPT-4, 代码的第一个版本也可以让它写, 简单的python代码还是可以写出来的.</p><p>从<strong>论文</strong>的角度来说, Latex学会基本使用就行. 有了大语言模型之后, 翻译的工作也轻松了很多, 其实三个人一起干会很快, 论文手在最后要对于排版进行调整.</p><h4 id="其他Tips">其他Tips</h4><ol><li><p>要注重<code>细节</code>的处理, 某一部分有亮点往往会让论文的评价上一个档次</p></li><li><p>要<code>充分利用每个人的时间</code>, 尽量不要让队伍中的人无事可做, 手里的事情做完了就要主动去承担别的职责.</p></li><li><p>要懂得<code>快速试错</code>, 如果某个算法跑不出来, 立马换另一个去尝试. 如果结果不理想, 先考虑参数是否可以优化, 如果不行, 考虑换一个算法, 不要死磕一个算法, 你即使慢慢去调参优化, 往往不如换一个算法带来的提升更加明显, 找一个效果最好的算法再进行优化.</p></li><li><p>要适当的去<code>美化</code>自己的结果(不是造假修改数据哦😇), 比如说如果最后的结果对于全数据集来说效果不是特别好, 那可以挑部分效果好的数据集来验证(这也要看任务,不能无脑用), 那这样就可以说模型特别适用于某某场景, 后面的缺点或者模型改进也有东西可写</p></li><li><p><code>摘要</code>是最重要的部分之一, 它决定你是否可以通过第一轮的筛选, 通不过的话就是S, 没得商量. 在摘要中要量化自己的结果, 不要只用主观的描述, 这会让人怀疑真实性</p></li><li><p>如果论文没有什么突出的创新点, <code>提高工作量</code>也是一种选择, 比如说加入多种模型的对比, 扩充数据集等.</p></li></ol><h4 id="论文">论文</h4><p>为了保护隐私,把队号删了🥰. PDF经过压缩, 图片不是很清晰, 原件看上去是清晰的</p><div class="row">    <embed src="/MCM_compressed.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MCM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据隐私保护</title>
      <link href="/2024/05/07/2024-5-7-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E4%B8%8E%E9%9A%90%E7%A7%813/"/>
      <url>/2024/05/07/2024-5-7-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E4%B8%8E%E9%9A%90%E7%A7%813/</url>
      
        <content type="html"><![CDATA[<h3 id="数据安全检索">数据安全检索</h3><p>大数据安全与隐私这门课的lab4,要求如下图:</p><p><img src="https://pb01.s3.bitiful.net/208.webp" alt="avatar"></p><p>实现:<br>• 对原始数据集进行预处理后, 计算平均年龄<br>• 调用了mondrian库来实现k匿名，并计算了k匿名后的平均年龄<br>• 通过添加拉普拉斯噪声来实现差分隐私发布<br>• 随机删除一条数据后再次计算平均年龄进行对比</p><h3 id="结果">结果</h3><p><img src="https://pb01.s3.bitiful.net/209.webp" alt="avatar"></p><h3 id="代码">代码</h3><p>结构:<br><img src="https://pb01.s3.bitiful.net/210.webp" alt="avatar"></p><h4 id="main-py"><a href="http://main.py">main.py</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secure.lab3 <span class="keyword">import</span> utils</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> preprocess, txt_Reader</span><br><span class="line"><span class="keyword">from</span> library.mondrian <span class="keyword">import</span> *</span><br><span class="line">filename = <span class="string">&quot;adult.data.txt&quot;</span></span><br><span class="line">title_column = [<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;workclass&#x27;</span>, <span class="string">&#x27;fnlwgt&#x27;</span>, <span class="string">&#x27;education&#x27;</span>, <span class="string">&#x27;education-num&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;marital-status&#x27;</span>, <span class="string">&#x27;occupation&#x27;</span>, <span class="string">&#x27;relationship&#x27;</span>, <span class="string">&#x27;race&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;capital-gain&#x27;</span>, <span class="string">&#x27;capital-loss&#x27;</span>, <span class="string">&#x27;hours-per-week&#x27;</span>, <span class="string">&#x27;native-country&#x27;</span>, <span class="string">&#x27;class&#x27;</span>]</span><br><span class="line">QI_list = [<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>, <span class="string">&#x27;race&#x27;</span>]</span><br><span class="line">data = txt_Reader(filename).read_txt(<span class="string">&#x27;./Adult Data Set/&#x27;</span>, title_column)</span><br><span class="line">data.sort_values(by=<span class="string">&#x27;age&#x27;</span>, ascending=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">rawlen = <span class="built_in">len</span>(data)</span><br><span class="line">preprocess(data)  <span class="comment"># 删除非法数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原有数据有&#123;&#125;行; 清洗后的数据有&#123;&#125;行&quot;</span>.<span class="built_in">format</span>(rawlen, <span class="built_in">len</span>(data)))</span><br><span class="line">raw_data_list = utils.df2list(data)  <span class="comment"># 转换为列表</span></span><br><span class="line">pre_ages = [<span class="built_in">int</span>(item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> raw_data_list]</span><br><span class="line"></span><br><span class="line">avg_pre_ages = (<span class="built_in">sum</span>(pre_ages) / <span class="built_in">len</span>(raw_data_list))  <span class="comment"># 求原数据平均年龄</span></span><br><span class="line">k = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;需要匿名化的k为&quot;</span>))</span><br><span class="line"></span><br><span class="line">DATA, order = utils.read_data()</span><br><span class="line">res, b = mondrian(DATA, k, <span class="literal">False</span>)  <span class="comment"># k-匿名</span></span><br><span class="line">res = utils.covert_to_raw(res, order)</span><br><span class="line">post_ages = [item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> res]</span><br><span class="line">avg_post_ages = utils.cal_post_ages(post_ages)</span><br><span class="line">utils.write_result(res, k)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原数据的平均年龄为: %f&quot;</span> %avg_pre_ages)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d-匿名后的平均年龄为:&quot;</span>%k, avg_post_ages)</span><br><span class="line"></span><br><span class="line">dp_ages = utils.diff_privacy_add_laplace_noise(pre_ages, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">avg_dp_ages = utils.avg_ages(dp_ages)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;差分隐私后的平均年龄为: %f&quot;</span> %avg_dp_ages)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试在删除某条数据后，k匿名发布的平均年龄、真实发布平均年龄、差分隐私平均年龄对用户隐私信息(年龄) 泄露的可能性</span></span><br><span class="line"></span><br><span class="line">idx = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(pre_ages))</span><br><span class="line">co_pre_ages = copy.deepcopy(pre_ages)</span><br><span class="line">co_post_ages = copy.deepcopy(post_ages)</span><br><span class="line">co_dp_ages = copy.deepcopy(dp_ages)</span><br><span class="line"></span><br><span class="line">co_pre_ages.pop(idx)</span><br><span class="line">co_post_ages.pop(idx)</span><br><span class="line">co_dp_ages = utils.diff_privacy_add_laplace_noise(co_pre_ages, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=====================================================================================&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;随机删除的数据为&quot;</span>, pre_ages[idx])</span><br><span class="line">avg_pre = utils.avg_ages(co_pre_ages)</span><br><span class="line">avg_post = utils.cal_post_ages(co_post_ages)</span><br><span class="line">avg_dp = utils.avg_ages(co_dp_ages)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均年龄分别为原数据&#123;&#125;、k-匿名后数据&#123;&#125;、差分隐私后数据&#123;&#125;&quot;</span>.<span class="built_in">format</span>(avg_pre, avg_post, avg_dp))</span><br><span class="line"></span><br><span class="line">val_pre = avg_pre_ages * (<span class="built_in">len</span>(co_pre_ages) + <span class="number">1</span>) - avg_pre * <span class="built_in">len</span>(co_pre_ages)</span><br><span class="line">val_post = avg_post_ages * (<span class="built_in">len</span>(co_post_ages) + <span class="number">1</span>) - avg_post * <span class="built_in">len</span>(co_post_ages)</span><br><span class="line">val_dp = avg_dp_ages * (<span class="built_in">len</span>(co_dp_ages) + <span class="number">1</span>) - avg_dp * <span class="built_in">len</span>(co_dp_ages)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;随机删除的用户年龄数据分别为:原数据推断年龄&#123;&#125;、k-匿名后数据推断年龄&#123;&#125;、差分隐私后数据推断年龄&#123;&#125;&quot;</span>.<span class="built_in">format</span>(val_pre, val_post, val_dp))</span><br></pre></td></tr></table></figure><h3 id="utils-py"><a href="http://utils.py">utils.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">AGE_CONF = <span class="string">&#x27;./hierarchy/age_hierarchy.txt&#x27;</span></span><br><span class="line">WORKCLASS_CONF = <span class="string">&#x27;./hierarchy/workclass_hierarchy.txt&#x27;</span></span><br><span class="line">EDU_CONF = <span class="string">&#x27;./hierarchy/education_hierarchy.txt&#x27;</span></span><br><span class="line">EDUNUM_CONF = <span class="string">&#x27;./hierarchy/edunum_hierarchy.txt&#x27;</span></span><br><span class="line">MARITAL_CONF = <span class="string">&#x27;./hierarchy/martial_hierarchy.txt&#x27;</span></span><br><span class="line">RELATIONSHIP_CONF = <span class="string">&#x27;./hierarchy/relationship_hierarchy.txt&#x27;</span></span><br><span class="line">RACE_CONF = <span class="string">&#x27;./hierarchy/race_hierarchy.txt&#x27;</span></span><br><span class="line">SEX_CONF = <span class="string">&#x27;./hierarchy/sex_hierarchy.txt&#x27;</span></span><br><span class="line">HPW_CONF = <span class="string">&#x27;./hierarchy/hours_per_week_hierarchy.txt&#x27;</span></span><br><span class="line">COUNTRY_CONF = <span class="string">&#x27;./hierarchy/country_hierarchy.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">title_column = [<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;workclass&#x27;</span>, <span class="string">&#x27;fnlwgt&#x27;</span>, <span class="string">&#x27;education&#x27;</span>, <span class="string">&#x27;education-num&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;marital-status&#x27;</span>, <span class="string">&#x27;occupation&#x27;</span>, <span class="string">&#x27;relationship&#x27;</span>, <span class="string">&#x27;race&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;capital-gain&#x27;</span>, <span class="string">&#x27;capital-loss&#x27;</span>, <span class="string">&#x27;hours-per-week&#x27;</span>, <span class="string">&#x27;native-country&#x27;</span>, <span class="string">&#x27;class&#x27;</span>]</span><br><span class="line"></span><br><span class="line">QI_INDEX = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">13</span>]</span><br><span class="line">IS_CAT = [<span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]</span><br><span class="line">SA_INDEX = -<span class="number">1</span></span><br><span class="line">__DEBUG = <span class="literal">False</span></span><br><span class="line">INTUITIVE_ORDER = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess</span>(<span class="params">load_data: pd.DataFrame</span>):</span><br><span class="line">    load_data.replace(<span class="string">&#x27; ?&#x27;</span>, np.nan, inplace=<span class="literal">True</span>)</span><br><span class="line">    load_data.dropna(axis=<span class="number">0</span>, how=<span class="string">&#x27;any&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_data</span>():</span><br><span class="line"></span><br><span class="line">    QI_num = <span class="built_in">len</span>(QI_INDEX)</span><br><span class="line">    data = []</span><br><span class="line">    intuitive_dict = []</span><br><span class="line">    intuitive_order = []</span><br><span class="line">    intuitive_number = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(QI_num):</span><br><span class="line">        intuitive_dict.append(<span class="built_in">dict</span>())</span><br><span class="line">        intuitive_number.append(<span class="number">0</span>)</span><br><span class="line">        intuitive_order.append(<span class="built_in">list</span>())</span><br><span class="line">    data_file = <span class="built_in">open</span>(<span class="string">&#x27;Adult Data Set/adult.data.txt&#x27;</span>, <span class="string">&#x27;rU&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data_file:</span><br><span class="line">        line = line.strip()</span><br><span class="line">        <span class="comment"># remove empty and incomplete lines</span></span><br><span class="line">        <span class="comment"># only 30162 records will be kept</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(line) == <span class="number">0</span> <span class="keyword">or</span> <span class="string">&#x27;?&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># remove double spaces</span></span><br><span class="line">        line = line.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        temp = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        ltemp = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(QI_num):</span><br><span class="line">            index = QI_INDEX[i]</span><br><span class="line">            <span class="keyword">if</span> IS_CAT[i]:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    ltemp.append(intuitive_dict[i][temp[index]])</span><br><span class="line">                <span class="keyword">except</span> KeyError:</span><br><span class="line">                    intuitive_dict[i][temp[index]] = intuitive_number[i]</span><br><span class="line">                    ltemp.append(intuitive_number[i])</span><br><span class="line">                    intuitive_number[i] += <span class="number">1</span></span><br><span class="line">                    intuitive_order[i].append(temp[index])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ltemp.append(<span class="built_in">int</span>(temp[index]))</span><br><span class="line">        ltemp.append(temp[SA_INDEX])</span><br><span class="line">        data.append(ltemp)</span><br><span class="line">    <span class="keyword">return</span> data, intuitive_order</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">txt_Reader</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        self.filename = filename</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_txt</span>(<span class="params">self, path: <span class="built_in">str</span>, title_column: <span class="built_in">list</span></span>) -&gt; pd.DataFrame:</span><br><span class="line">        filepath = path + self.filename</span><br><span class="line">        txtlist = []</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, encoding=<span class="string">&#x27;gbk&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                txtlist.append(line.strip().split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">            f.close()</span><br><span class="line">        <span class="keyword">return</span> pd.DataFrame(txtlist, columns=title_column)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">xlsx_Reader</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        self.filename = filename</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_xlsx</span>(<span class="params">self, path: <span class="built_in">str</span></span>) -&gt; pd.DataFrame:</span><br><span class="line">        filepath = path + self.filename</span><br><span class="line">        <span class="keyword">return</span> pd.read_excel(filepath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_result</span>(<span class="params">result, k</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;res/adult_%d_kanonymity.data&quot;</span> %k, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> result:</span><br><span class="line">            f.write(<span class="string">&#x27;,&#x27;</span>.join(line) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">df2list</span>(<span class="params">df: pd.DataFrame</span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">    data_array = np.array(df)</span><br><span class="line">    new_data_array = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data_array:</span><br><span class="line">        line = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> item:</span><br><span class="line">            line.append(i.strip())</span><br><span class="line">        new_data_array.append(line)</span><br><span class="line">    <span class="keyword">return</span> new_data_array</span><br><span class="line">    <span class="comment">#return data_array.tolist()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_categorical_loss_metric_map</span>(<span class="params">leaves_num, hierarchies</span>):</span><br><span class="line">    loss_metric_map = &#123;attr: &#123;&#125; <span class="keyword">for</span> attr <span class="keyword">in</span> hierarchies.keys()&#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nleaves_num:\n&#x27;</span>, leaves_num)</span><br><span class="line">    <span class="keyword">for</span> attr, vals <span class="keyword">in</span> hierarchies.items():</span><br><span class="line">        loss_metric_map[attr][<span class="string">&#x27;*&#x27;</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> vals:</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> leaves_num[attr].keys():</span><br><span class="line">                loss_metric_map[attr][v] = (leaves_num[attr][v] - <span class="number">1</span>) / (leaves_num[attr][<span class="string">&#x27;*&#x27;</span>] - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                loss_metric_map[attr][v] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> loss_metric_map</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">categorical_loss_metric</span>(<span class="params">qi_columns, leaves_num, hierarchies, sup</span>):</span><br><span class="line">    loss_metric_map = generate_categorical_loss_metric_map(leaves_num, hierarchies)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nloss_metric_map:\n&#x27;</span>, loss_metric_map)</span><br><span class="line">    loss_metric = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> qi_columns:</span><br><span class="line">        col = qi_columns[attr].tolist()</span><br><span class="line">        <span class="comment"># the loss for an attribute is the AVERAGE of the loss for all tuples</span></span><br><span class="line">        <span class="comment"># the loss for the entire data set is the SUM of the losses for each attribute</span></span><br><span class="line">        sum_attr_lm = <span class="built_in">sum</span>([loss_metric_map[attr][<span class="built_in">str</span>(v)] <span class="keyword">for</span> v <span class="keyword">in</span> col])</span><br><span class="line">        loss_metric += (sum_attr_lm + sup) / (<span class="built_in">len</span>(col) + sup)</span><br><span class="line">    <span class="keyword">return</span> loss_metric</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_numerical_loss_metric</span>(<span class="params">column</span>):</span><br><span class="line">    loss = <span class="number">0</span></span><br><span class="line">    <span class="comment"># initialize lowest and highest values</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(column[<span class="number">0</span>], <span class="built_in">int</span>):  <span class="comment"># string value, e.g., &#x27;35-40&#x27;</span></span><br><span class="line">        current_range = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(column[<span class="number">0</span>].replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;-&#x27;</span>))]</span><br><span class="line">        lowest, highest = current_range[<span class="number">0</span>], current_range[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># integer value, e.g., 37</span></span><br><span class="line">        lowest, highest = column[<span class="number">0</span>], column[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># iterate through column</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> column:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(v, <span class="built_in">int</span>):  <span class="comment"># extract range from table content (string, e.g., &#x27;35-40&#x27;)</span></span><br><span class="line">            current_range = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(v.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;-&#x27;</span>))]</span><br><span class="line">            loss += current_range[<span class="number">1</span>] - current_range[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># update lowest &amp; highest</span></span><br><span class="line">            lowest = <span class="built_in">min</span>(lowest, current_range[<span class="number">0</span>])</span><br><span class="line">            highest = <span class="built_in">max</span>(highest, current_range[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># integer value, loss is 0 here</span></span><br><span class="line">            lowest = <span class="built_in">min</span>(lowest, v)</span><br><span class="line">            highest = <span class="built_in">max</span>(highest, v)</span><br><span class="line"></span><br><span class="line">    max_range = highest - lowest</span><br><span class="line">    <span class="keyword">return</span> loss / (max_range * <span class="built_in">len</span>(column))  <span class="comment"># average</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numerical_loss_metric</span>(<span class="params">qi_columns</span>):</span><br><span class="line">    loss_metric = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> qi_columns:</span><br><span class="line">        col = qi_columns[attr].tolist()</span><br><span class="line">        <span class="comment"># the loss for the entire data set is the SUM of the losses for each attribute</span></span><br><span class="line">        loss_metric += compute_numerical_loss_metric(col)</span><br><span class="line">    <span class="keyword">return</span> loss_metric</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x==y:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp_str</span>(<span class="params">element1, element2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    compare number in str format correctley</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> cmp(<span class="built_in">int</span>(element1), <span class="built_in">int</span>(element2))</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> cmp(element1, element2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp_value</span>(<span class="params">element1, element2</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(element1, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">return</span> cmp_str(element1, element2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> cmp(element1, element2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">value</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;Return the numeric type that supports addition and subtraction&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(x, (<span class="built_in">int</span>, <span class="built_in">float</span>)):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">float</span>(x)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(x, datetime):</span><br><span class="line">        <span class="keyword">return</span> time.mktime(x.timetuple())</span><br><span class="line">        <span class="comment"># return x.timestamp() # not supported by python 2.7</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">float</span>(x)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_qi_value</span>(<span class="params">x_left, x_right, connect_str=<span class="string">&#x27;~&#x27;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;Connect the interval boundary value as a generalized interval and return the result as a string</span></span><br><span class="line"><span class="string">    return:</span></span><br><span class="line"><span class="string">        result:string</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(x_left, (<span class="built_in">int</span>, <span class="built_in">float</span>)):</span><br><span class="line">        <span class="keyword">if</span> x_left == x_right:</span><br><span class="line">            result = <span class="string">&#x27;%d&#x27;</span> % (x_left)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="string">&#x27;%d%s%d&#x27;</span> % (x_left, connect_str, x_right)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(x_left, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">if</span> x_left == x_right:</span><br><span class="line">            result = x_left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = x_left + connect_str + x_right</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(x_left, datetime):</span><br><span class="line">        <span class="comment"># Generalize the datetime type value</span></span><br><span class="line">        begin_date = x_left.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">        end_date = x_right.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">        result = begin_date + connect_str + end_date</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_to_file</span>(<span class="params">result, k</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;res/adult_%d_kanonymity.data&quot;</span> %k, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> output:</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">            output.write(<span class="string">&#x27;;&#x27;</span>.join(r) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">covert_to_raw</span>(<span class="params">result, order, connect_str=<span class="string">&#x27;~&#x27;</span></span>):</span><br><span class="line"></span><br><span class="line">    covert_result = []</span><br><span class="line">    qi_len = <span class="built_in">len</span>(order)</span><br><span class="line">    <span class="keyword">for</span> record <span class="keyword">in</span> result:</span><br><span class="line">        covert_record = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(qi_len):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(order[i]) &gt; <span class="number">0</span>:</span><br><span class="line">                vtemp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> connect_str <span class="keyword">in</span> record[i]:</span><br><span class="line">                    temp = record[i].split(connect_str)</span><br><span class="line">                    raw_list = []</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(temp[<span class="number">0</span>]), <span class="built_in">int</span>(temp[<span class="number">1</span>]) + <span class="number">1</span>):</span><br><span class="line">                        raw_list.append(order[i][j])</span><br><span class="line">                    vtemp = connect_str.join(raw_list)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    vtemp = order[i][<span class="built_in">int</span>(record[i])]</span><br><span class="line">                covert_record.append(vtemp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                covert_record.append(record[i])</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(record[-<span class="number">1</span>], <span class="built_in">str</span>):</span><br><span class="line">            covert_result.append(covert_record + [record[-<span class="number">1</span>]])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            covert_result.append(covert_record + [connect_str.join(record[-<span class="number">1</span>])])</span><br><span class="line">    <span class="keyword">return</span> covert_result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_scale</span>(<span class="params">age: <span class="built_in">str</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    pos = age.find(<span class="string">&quot;~&quot;</span>)</span><br><span class="line">    low = age[<span class="number">0</span>:pos]</span><br><span class="line">    high = age[pos + <span class="number">1</span>:<span class="built_in">len</span>(age)]</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(low) + <span class="built_in">int</span>(high)) / <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal_post_ages</span>(<span class="params">post_ages: <span class="built_in">list</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    post_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> post_ages:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;~&quot;</span> <span class="keyword">in</span> item:</span><br><span class="line">            post_sum += split_scale(item)</span><br><span class="line">        <span class="keyword">else</span>: post_sum += <span class="built_in">int</span>(item)*<span class="number">1.0</span></span><br><span class="line">    <span class="keyword">return</span> post_sum / <span class="built_in">len</span>(post_ages)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">avg_ages</span>(<span class="params">ages: <span class="built_in">list</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(ages) / <span class="built_in">len</span>(ages)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diff_privacy_add_laplace_noise</span>(<span class="params">ages: <span class="built_in">list</span>, loc, scale</span>):</span><br><span class="line">    laplace_noise = np.random.laplace(loc, scale, <span class="built_in">len</span>(ages))</span><br><span class="line">    res = [ages[i] + laplace_noise[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ages))]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>还有蒙德里安库的代码去github上随便找一个就行</p>]]></content>
      
      
      <categories>
          
          <category> xdu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客魔改教程之电脑手机黑夜白天四背景</title>
      <link href="/2024/05/02/2024-5-2-%E5%8D%9A%E5%AE%A2%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B-2/"/>
      <url>/2024/05/02/2024-5-2-%E5%8D%9A%E5%AE%A2%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B-2/</url>
      
        <content type="html"><![CDATA[<h3 id="博客魔改教程之电脑手机黑夜白天四背景">博客魔改教程之电脑手机黑夜白天四背景</h3><p>主要做的适配是手机端的背景, 手机端背景和电脑端背景是不同的, 因为手机端屏幕比较小, 电脑端背景在手机端只能显示中间的一部分, 显示效果差, 所以要做适配,效果如下</p><p>电脑端白天背景:<br><img src="https://pb01.s3.bitiful.net/75.webp" alt="avatar"></p><p>手机端白天背景:<br><img src="https://pb01.s3.bitiful.net/206.webp" alt="avatar"></p><h4 id="pc端白天黑夜双背景">pc端白天黑夜双背景</h4><p>修改<code>[BlogRoot]\themes\butterfly\layout\includes\layout.pug</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ - var DefaultBg = page.defaultbg ? page.defaultbg : theme.background.default</span></span><br><span class="line"><span class="addition">+ - var DDMBg = theme.background.darkmode ? theme.background.darkmode : DefaultBg</span></span><br><span class="line"><span class="addition">+ - var DarkmodeBg = page.darkmodebg ? page.darkmodebg : DDMBg</span></span><br><span class="line">  if theme.background</span><br><span class="line">    #web_bg</span><br><span class="line"><span class="addition">+     if page.defaultbg || page.darkmodebg</span></span><br><span class="line"><span class="addition">+       style.</span></span><br><span class="line"><span class="addition">+         #web_bg&#123;</span></span><br><span class="line"><span class="addition">+           background: #&#123;DefaultBg&#125; !important;</span></span><br><span class="line"><span class="addition">+           background-attachment: local!important;</span></span><br><span class="line"><span class="addition">+           background-position: center!important;</span></span><br><span class="line"><span class="addition">+           background-size: cover!important;</span></span><br><span class="line"><span class="addition">+           background-repeat: no-repeat!important;</span></span><br><span class="line"><span class="addition">+         &#125;</span></span><br><span class="line"><span class="addition">+         [data-theme=&quot;dark&quot;]</span></span><br><span class="line"><span class="addition">+           #web_bg&#123;</span></span><br><span class="line"><span class="addition">+             background: #&#123;DarkmodeBg&#125; !important;</span></span><br><span class="line"><span class="addition">+             background-attachment: local!important;</span></span><br><span class="line"><span class="addition">+             background-position: center!important;</span></span><br><span class="line"><span class="addition">+             background-size: cover!important;</span></span><br><span class="line"><span class="addition">+             background-repeat: no-repeat!important;</span></span><br><span class="line"><span class="addition">+           &#125;</span></span><br></pre></td></tr></table></figure><h4 id="手机端白天黑夜双背景">手机端白天黑夜双背景</h4><p>在<code>[BlogRoot]\themes\butterfly\source\css\_layout</code>目录下新建一个<code>web-bg.styl</code>文件，写入以下内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$web</span>-bg-night = <span class="built_in">hexo-config</span>(<span class="string">&#x27;background.darkmode&#x27;</span>) ? <span class="built_in">unquote</span>(<span class="built_in">hexo-config</span>(<span class="string">&#x27;background.darkmode&#x27;</span>)) : <span class="variable">$web</span>-bg</span><br><span class="line"><span class="variable">$mobile</span>-bg-day = <span class="built_in">hexo-config</span>(<span class="string">&#x27;background.mobileday&#x27;</span>) ? <span class="built_in">unquote</span>(<span class="built_in">hexo-config</span>(<span class="string">&#x27;background.mobileday&#x27;</span>)) : <span class="variable">$web</span>-bg</span><br><span class="line"><span class="variable">$mobile</span>-bg-night = <span class="built_in">hexo-config</span>(<span class="string">&#x27;background.mobilenight&#x27;</span>) ? <span class="built_in">unquote</span>(<span class="built_in">hexo-config</span>(<span class="string">&#x27;background.mobilenight&#x27;</span>)) : <span class="variable">$web</span>-bg-night</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line">  <span class="selector-id">#web_bg</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$web</span>-bg-night</span><br><span class="line">    <span class="attribute">background-attachment</span>: local</span><br><span class="line">    <span class="attribute">background-position</span>: center</span><br><span class="line">    <span class="attribute">background-size</span>: cover</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">800px</span>)</span><br><span class="line">  #web_bg</span><br><span class="line">    background: $mobile-bg-day !important</span><br><span class="line">    background-attachment: local !important</span><br><span class="line">    background-position: center !important</span><br><span class="line">    background-size: cover !important</span><br><span class="line">    background-repeat: no-repeat !important</span><br><span class="line">  [data-theme=&quot;dark&quot;]</span><br><span class="line">    #web_bg</span><br><span class="line">      background: $mobile-bg-night !important</span><br><span class="line">      background-attachment: local !important</span><br><span class="line">      background-position: center !important</span><br><span class="line">      background-size: cover !important</span><br><span class="line">      background-repeat: no-repeat !important</span><br></pre></td></tr></table></figure><h4 id="其他修改">其他修改</h4><p>修改<code>[BlogRoot]\themes\butterfly\source\css\var.styl</code>,在约34行</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  $text-line-height = 2</span><br><span class="line"><span class="deletion">- $web-bg = hexo-config(&#x27;background&#x27;) &amp;&amp; unquote(hexo-config(&#x27;background&#x27;))</span></span><br><span class="line"><span class="addition">+ $web-bg = hexo-config(&#x27;background.default&#x27;) &amp;&amp; unquote(hexo-config(&#x27;background.default&#x27;))</span></span><br><span class="line">  $index_top_img_height = hexo-config(&#x27;index_top_img_height&#x27;) ? convert(hexo-config(&#x27;index_top_img_height&#x27;)) : 100vh</span><br></pre></td></tr></table></figure><p>在<code>[BlogRoot]/_config.butterfly.yml</code>中找到background配置项，修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">background:</span></span><br><span class="line">  <span class="attr">default:</span>  <span class="comment">#【必选】默认背景</span></span><br><span class="line">  <span class="attr">darkmode:</span> <span class="comment">#【可选】PC端夜间模式背景</span></span><br><span class="line">  <span class="attr">mobileday:</span> <span class="comment">#【可选】移动端日间默认背景</span></span><br><span class="line">  <span class="attr">mobilenight:</span> <span class="comment">#【可选】移动端夜间模式背景</span></span><br></pre></td></tr></table></figure><p>最后hexo三连即可</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客魔改教程之公告栏欢迎信息</title>
      <link href="/2024/04/29/2024-4-29-%E5%8D%9A%E5%AE%A2%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B-1/"/>
      <url>/2024/04/29/2024-4-29-%E5%8D%9A%E5%AE%A2%E9%AD%94%E6%94%B9%E6%95%99%E7%A8%8B-1/</url>
      
        <content type="html"><![CDATA[<h3 id="博客魔改教程之公告栏欢迎信息">博客魔改教程之公告栏欢迎信息</h3><p>最终的效果大概是这样的:</p><p><img src="https://pb01.s3.bitiful.net/196.webp" alt="avatar"></p><h4 id="腾讯位置服务">腾讯位置服务</h4><p>在<a href="https://lbs.qq.com/map/" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">腾讯位置服务</a>注册账号后, 进入控制台–&gt;应用管理–&gt;我的应用, 点击创建应用:</p><p><img src="https://pb01.s3.bitiful.net/197.webp" alt="avatar"></p><p>应用名称和应用类型随便填, 创建完成后, 点击添加key:<br><img src="https://pb01.s3.bitiful.net/198.webp" alt="avatar"></p><p>然后到配额管理–&gt;账户额度,找到ip定位这一项, 点击配额分配, 根据自己需求分就可以:<br><img src="https://pb01.s3.bitiful.net/199.webp" alt="avatar"></p><p>进入开发文档, 后续的代码也是基于此开发出来的:<br><img src="https://pb01.s3.bitiful.net/200.webp" alt="avatar"></p><p>测试下自己的key(<strong>非必要</strong>), 请求示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://apis.map.qq.com/ws/location/v1/ip?ip=111.206.145.41&amp;key=[你的key]</span><br></pre></td></tr></table></figure><p>测试的话记得把校验关了, 像我这样设置就要把域名白名单设置为空</p><p>测试结果如下:<br><img src="https://pb01.s3.bitiful.net/201.webp" alt="avatar"></p><p>测试结果没问题就可以继续了</p><h4 id="其他配置">其他配置</h4><ol><li><strong>新建[BlogRoot]\source\js\txmap.js</strong>，并写入如下代码，记住替换key的内容和自己所在位置的经纬度：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ipLocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showWelcomeIfReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ipLocation &amp;&amp; ipLocation.<span class="property">result</span> &amp;&amp; ipLocation.<span class="property">result</span>.<span class="property">location</span>) &#123;</span><br><span class="line">        <span class="title function_">showWelcome</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;ipLocation is not ready yet.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get请求</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://apis.map.qq.com/ws/location/v1/ip&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;自己的key&#x27;</span>,</span><br><span class="line">        <span class="attr">output</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        ipLocation = res;</span><br><span class="line">        <span class="title function_">showWelcomeIfReady</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching ip location:&#x27;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDistance</span>(<span class="params">e1, n1, e2, n2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> R = <span class="number">6371</span></span><br><span class="line">    <span class="keyword">const</span> &#123; sin, cos, asin, <span class="variable constant_">PI</span>, hypot &#125; = <span class="title class_">Math</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">getPoint</span> = (<span class="params">e, n</span>) =&gt; &#123;</span><br><span class="line">        e *= <span class="variable constant_">PI</span> / <span class="number">180</span></span><br><span class="line">        n *= <span class="variable constant_">PI</span> / <span class="number">180</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="title function_">cos</span>(n) * <span class="title function_">cos</span>(e), <span class="attr">y</span>: <span class="title function_">cos</span>(n) * <span class="title function_">sin</span>(e), <span class="attr">z</span>: <span class="title function_">sin</span>(n) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> a = <span class="title function_">getPoint</span>(e1, n1)</span><br><span class="line">    <span class="keyword">let</span> b = <span class="title function_">getPoint</span>(e2, n2)</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title function_">hypot</span>(a.<span class="property">x</span> - b.<span class="property">x</span>, a.<span class="property">y</span> - b.<span class="property">y</span>, a.<span class="property">z</span> - b.<span class="property">z</span>)</span><br><span class="line">    <span class="keyword">let</span> r = <span class="title function_">asin</span>(c / <span class="number">2</span>) * <span class="number">2</span> * R</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showWelcome</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dist = <span class="title function_">getDistance</span>(经度, 纬度, ipLocation.<span class="property">result</span>.<span class="property">location</span>.<span class="property">lng</span>, ipLocation.<span class="property">result</span>.<span class="property">location</span>.<span class="property">lat</span>); <span class="comment">//这里换成自己的经纬度</span></span><br><span class="line">    <span class="keyword">let</span> pos = ipLocation.<span class="property">result</span>.<span class="property">ad_info</span>.<span class="property">nation</span>;</span><br><span class="line">    <span class="keyword">let</span> ip;</span><br><span class="line">    <span class="keyword">let</span> posdesc;</span><br><span class="line">    <span class="comment">//根据国家、省份、城市信息自定义欢迎语</span></span><br><span class="line">    <span class="keyword">switch</span> (ipLocation.<span class="property">result</span>.<span class="property">ad_info</span>.<span class="property">nation</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;日本&quot;</span>:</span><br><span class="line">            posdesc = <span class="string">&quot;よろしく，一起去看樱花吗&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;美国&quot;</span>:</span><br><span class="line">            posdesc = <span class="string">&quot;Let us live in peace!&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;英国&quot;</span>:</span><br><span class="line">            posdesc = <span class="string">&quot;想同你一起夜乘伦敦眼&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;俄罗斯&quot;</span>:</span><br><span class="line">            posdesc = <span class="string">&quot;干了这瓶伏特加！&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;法国&quot;</span>:</span><br><span class="line">            posdesc = <span class="string">&quot;C&#x27;est La Vie&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;德国&quot;</span>:</span><br><span class="line">            posdesc = <span class="string">&quot;Die Zeit verging im Fluge.&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;澳大利亚&quot;</span>:</span><br><span class="line">            posdesc = <span class="string">&quot;一起去大堡礁吧！&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;加拿大&quot;</span>:</span><br><span class="line">            posdesc = <span class="string">&quot;拾起一片枫叶赠予你&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;中国&quot;</span>:</span><br><span class="line">            pos = ipLocation.<span class="property">result</span>.<span class="property">ad_info</span>.<span class="property">province</span> + <span class="string">&quot; &quot;</span> + ipLocation.<span class="property">result</span>.<span class="property">ad_info</span>.<span class="property">city</span> + <span class="string">&quot; &quot;</span> + ipLocation.<span class="property">result</span>.<span class="property">ad_info</span>.<span class="property">district</span>;</span><br><span class="line">            ip = ipLocation.<span class="property">result</span>.<span class="property">ip</span>;</span><br><span class="line">            <span class="keyword">switch</span> (ipLocation.<span class="property">result</span>.<span class="property">ad_info</span>.<span class="property">province</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;北京市&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;北——京——欢迎你~~~&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;天津市&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;讲段相声吧。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;河北省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;山西省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;展开坐具长三尺，已占山河五百余。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;内蒙古自治区&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;天苍苍，野茫茫，风吹草低见牛羊。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;辽宁省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;我想吃烤鸡架！&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;吉林省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;状元阁就是东北烧烤之王。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;黑龙江省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;很喜欢哈尔滨大剧院。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;上海市&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;众所周知，中国只有两个城市。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;江苏省&quot;</span>:</span><br><span class="line">                    <span class="keyword">switch</span> (ipLocation.<span class="property">result</span>.<span class="property">ad_info</span>.<span class="property">city</span>) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;南京市&quot;</span>:</span><br><span class="line">                            posdesc = <span class="string">&quot;这是我挺想去的城市啦。&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;苏州市&quot;</span>:</span><br><span class="line">                            posdesc = <span class="string">&quot;上有天堂，下有苏杭。&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="attr">default</span>:</span><br><span class="line">                            posdesc = <span class="string">&quot;散装是必须要散装的。&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;浙江省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;东风渐绿西湖柳，雁已还人未南归。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;河南省&quot;</span>:</span><br><span class="line">                    <span class="keyword">switch</span> (ipLocation.<span class="property">result</span>.<span class="property">ad_info</span>.<span class="property">city</span>) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;郑州市&quot;</span>:</span><br><span class="line">                            posdesc = <span class="string">&quot;豫州之域，天地之中。&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;南阳市&quot;</span>:</span><br><span class="line">                            posdesc = <span class="string">&quot;臣本布衣，躬耕于南阳。此南阳非彼南阳！&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;驻马店市&quot;</span>:</span><br><span class="line">                            posdesc = <span class="string">&quot;峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;开封市&quot;</span>:</span><br><span class="line">                            posdesc = <span class="string">&quot;刚正不阿包青天。&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;洛阳市&quot;</span>:</span><br><span class="line">                            posdesc = <span class="string">&quot;洛阳牡丹甲天下。&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="attr">default</span>:</span><br><span class="line">                            posdesc = <span class="string">&quot;可否带我品尝河南烩面啦？&quot;</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;安徽省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;蚌埠住了，芜湖起飞。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;福建省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;井邑白云间，岩城远带山。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;江西省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;落霞与孤鹜齐飞，秋水共长天一色。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;山东省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;遥望齐州九点烟，一泓海水杯中泻。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;湖北省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;来碗热干面！&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;湖南省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;74751，长沙斯塔克。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;广东省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;老板来两斤福建人。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;广西壮族自治区&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;桂林山水甲天下。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;海南省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;朝观日出逐白浪，夕看云起收霞光。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;四川省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;康康川妹子。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;贵州省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;茅台，学生，再塞200。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;云南省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;玉龙飞舞云缠绕，万仞冰川直耸天。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;西藏自治区&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;躺在茫茫草原上，仰望蓝天。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;陕西省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;来份臊子面加馍。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;甘肃省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;羌笛何须怨杨柳，春风不度玉门关。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;青海省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;牛肉干和老酸奶都好好吃。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;宁夏回族自治区&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;大漠孤烟直，长河落日圆。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;新疆维吾尔自治区&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;驼铃古道丝绸路，胡马犹闻唐汉风。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;台湾省&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;我在这头，大陆在那头。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;香港特别行政区&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;永定贼有残留地鬼嚎，迎击光非岁玉。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;澳门特别行政区&quot;</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;性感荷官，在线发牌。&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    posdesc = <span class="string">&quot;带我去你的城市逛逛吧！&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            posdesc = <span class="string">&quot;带我去你的国家逛逛吧。&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据本地时间切换欢迎语</span></span><br><span class="line">    <span class="keyword">let</span> timeChange;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">if</span> (date.<span class="title function_">getHours</span>() &gt;= <span class="number">5</span> &amp;&amp; date.<span class="title function_">getHours</span>() &lt; <span class="number">11</span>) timeChange = <span class="string">&quot;&lt;span&gt;上午好&lt;/span&gt;，一日之计在于晨！&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (date.<span class="title function_">getHours</span>() &gt;= <span class="number">11</span> &amp;&amp; date.<span class="title function_">getHours</span>() &lt; <span class="number">13</span>) timeChange = <span class="string">&quot;&lt;span&gt;中午好&lt;/span&gt;，该摸鱼吃午饭了。&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (date.<span class="title function_">getHours</span>() &gt;= <span class="number">13</span> &amp;&amp; date.<span class="title function_">getHours</span>() &lt; <span class="number">15</span>) timeChange = <span class="string">&quot;&lt;span&gt;下午好&lt;/span&gt;，懒懒地睡个午觉吧！&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (date.<span class="title function_">getHours</span>() &gt;= <span class="number">15</span> &amp;&amp; date.<span class="title function_">getHours</span>() &lt; <span class="number">16</span>) timeChange = <span class="string">&quot;&lt;span&gt;三点几啦&lt;/span&gt;，一起饮茶呀！&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (date.<span class="title function_">getHours</span>() &gt;= <span class="number">16</span> &amp;&amp; date.<span class="title function_">getHours</span>() &lt; <span class="number">19</span>) timeChange = <span class="string">&quot;&lt;span&gt;夕阳无限好！&lt;/span&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (date.<span class="title function_">getHours</span>() &gt;= <span class="number">19</span> &amp;&amp; date.<span class="title function_">getHours</span>() &lt; <span class="number">24</span>) timeChange = <span class="string">&quot;&lt;span&gt;晚上好&lt;/span&gt;，夜生活嗨起来！&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> timeChange = <span class="string">&quot;夜深了，早点休息，少熬夜。&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//自定义文本和需要放的位置</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;welcome-info&quot;</span>).<span class="property">innerHTML</span> =</span><br><span class="line">            <span class="string">`&lt;b&gt;&lt;center&gt;🎉 欢迎信息 🎉&lt;/center&gt;&amp;emsp;&amp;emsp;欢迎来自 &lt;span style=&quot;color:#5ea6e5&quot;&gt;<span class="subst">$&#123;pos&#125;</span>&lt;/span&gt; 的小伙伴，<span class="subst">$&#123;timeChange&#125;</span>您现在距离站长约 &lt;span style=&quot;color:#5ea6e5&quot;&gt;<span class="subst">$&#123;dist&#125;</span>&lt;/span&gt; 公里，当前的IP地址为： &lt;span style=&quot;color:#5ea6e5&quot;&gt;<span class="subst">$&#123;ip&#125;</span>&lt;/span&gt;， <span class="subst">$&#123;posdesc&#125;</span>&lt;/b&gt;`</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;Pjax无法获取#welcome-info元素🙄🙄🙄&quot;)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果使用了pjax在加上下面这行代码</span></span><br><span class="line"><span class="comment">// document.addEventListener(&#x27;pjax:complete&#x27;, showWelcome);</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>在主题配置文件[BlogRoot]_config.butterfly.yml</strong>中引入jQuery依赖和刚刚的js文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inject: </span><br><span class="line">  bottom: </span><br><span class="line">    - &lt;script src=&quot;https://cdn.staticfile.org/jquery/3.6.3/jquery.min.js&quot;&gt;&lt;/script&gt; # jQuery</span><br><span class="line">    - &lt;script async data-pjax src=&quot;/js/txmap.js&quot;&gt;&lt;/script&gt; # 腾讯位置API</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>在[BlogRoot]\themes\butterfly\layout\includes\widget\card_announcement.pug</strong>的最后一行加上这个, 这个可以根据自己的需求更改添加的位置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//- 添加欢迎访客的信息</span><br><span class="line">#welcome-info</span><br></pre></td></tr></table></figure><p><strong>如果</strong>当前themes目录为空, 将[BlogRoot]\node_modules\hexo-theme-butterfly目录下的全部文件复制到[BlogRoot]\themes\butterfly目录下即可</p><ol start="4"><li><strong>在[BlogRoot]\source\css\custom.css</strong>里添加如下代码，可以根据你自己的喜好去改</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 欢迎信息 */</span></span><br><span class="line"><span class="selector-id">#welcome-info</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#b9f4f3</span>, <span class="number">#e3fbf9</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#welcome-info</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#212121</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="References">References</h4><p><a href="https://ichika.cc/Article/beautiful_IPLocation/" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">给博客添加腾讯地图定位并制作个性欢迎</a></p><p><a href="https://www.fomal.cc/posts/d739261b.html" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">博客魔改教程总结(四)</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西电B测-计算机网络综合实验</title>
      <link href="/2024/04/24/2024-4-24-B%E6%B5%8B/"/>
      <url>/2024/04/24/2024-4-24-B%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="西电B测-计算机网络综合实验">西电B测-计算机网络综合实验</h2><h3 id="ensp安装踩坑">ensp安装踩坑</h3><p>我这台电脑的环境比较混乱, virtualbox, vmware, docker什么的都有, 而且还是win11, 导致疯狂踩坑🤣, 整个安装大概花费3小时😇</p><h4 id="第一个坑">第一个坑</h4><p>virtualbox版本不支持, 我电脑上的virtualbox是7.0.x版本的, 与老版ensp不兼容, 需要降级到5.2.x版本, 最终选了5.2.44版本, 5.2.44版本的virtualbox又和win11不兼容, 需要将<strong>内核隔离</strong>关闭才能正常安装, 路径: 设置–&gt;隐私与安全–&gt;windows安全中心–&gt;设备安全性–&gt;内核隔离</p><h4 id="第二个坑">第二个坑</h4><p>重装之后启动路由器报错,错误代码41, 可以参考这篇<a href="https://blog.csdn.net/weixin_51515423/article/details/122304503" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">博客</a>, 操作之后再次启动路由器报错, 错误代码40, 接下来就是第三个坑</p><h4 id="第三个坑">第三个坑</h4><p>路由器启动报错40之后, 我照着官方文档一通操作, 发现依旧报错40😅, 然后决定全部卸载重装.</p><p>步骤:</p><ol><li>控制面板卸载eNSP、VirtualBox、Wireshark、WinCap四个程序，如果存在USBCap、Npcap，也卸载</li><li>依次查看并删除:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\huawei，若该目录下存在eNSP文件夹，请一并删除。</span><br><span class="line">C:\Program Files，若该目录下存在Npcap文件夹，请一并删除。</span><br><span class="line">C:\Program Files (x86)，若该目录下存在WinCap文件夹，请一并删除。</span><br><span class="line">C:\ProgramData，若该目录下存在VirtualBox文件夹，请一并删除。</span><br><span class="line">C:\Users\你的用户名，若该目录下存在.virtualbox文件夹，请一并删除。</span><br><span class="line">C:\Users\你的用户名\AppData\Local，若该目录下存在eNSP文件夹，请一并删除。</span><br></pre></td></tr></table></figure><ol start="3"><li>清理无效注册表,cmd输入regedit进入, 删除相关注册表, 主要是virtualbox相关的</li></ol><p><strong>然后重装,发现还是报错40</strong>🥰</p><p>然后我用<strong>virtualbox去启动AR_Base</strong>, 得到报错<code>Raw-mode is unavailable courtesy of Hyper-V. (VERR_SUPDRV_NO_RAW_MODE_HYPER_V_ROOT)</code>, 这时我意识到是Hyper-V的问题, 但我的Hyper-v其实是没有勾选启用的, 其他<br>相关选项也没有勾选,如图:</p><p><img src="https://pb01.s3.bitiful.net/190.webp" alt="avatar"></p><p>我想到可能曾经安装Docker开启Hyper-V后, 即使现在不勾选了, 它仍然没有真正关闭.</p><p>管理员权限打开cmd, 输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit</span><br></pre></td></tr></table></figure><p>看到hypervisorlaunchtype的值是Auto,输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure><p>就可以关闭</p><p><img src="https://pb01.s3.bitiful.net/191.webp" alt="avatar"></p><p>所以之前如果没有安装过Docker或者动过Hyper-v是不会出现这个问题的,解释如下:</p><p><strong>hypervisorlaunchtype</strong>是Windows操作系统的引导选项，用于控制处理器和虚拟化技术之间的交互方式。这个选项的值可以是&quot;Auto&quot;、“Off&quot;或&quot;Hypervisor”。它的默认值为&quot;Auto&quot;，表示处理器将根据需要自动启用或禁用虚拟化技术。1如果Windows中安装了Docker，想要正常使用的话就必须开启Hyper-V，否则会出现错误提示。但是如果Windows系统中同时存在VMware虚拟机的话，开启Hyper-V又会导致虚拟机用不了，这个时候就只能关闭Hyper-V。</p><h3 id="实验">实验</h3><h4 id="实验内容和要求">实验内容和要求</h4><p><strong>内容</strong>:</p><ol><li>利用华为eNSP网络模拟器，搭建与下图相对应的网络拓扑。在实验拓扑中共有3个网段（网1、网2和网3），其网络参数参见表格。每个网段使用1台交换机。</li><li>路由器R1连接网1与网2，路由器R2连接网2与网3。</li><li>按照要求对每台设备进行配置，最终保证所有设备的连通性。</li></ol><p><img src="https://s3.bitiful.net/pb01/192.webp" alt="avatar"></p><table><thead><tr><th>网络</th><th>子网掩码</th><th>网络号</th></tr></thead><tbody><tr><td>网1</td><td>255.255.255.0</td><td>192.168.1.0</td></tr><tr><td>网2</td><td>255.255.255.0</td><td>192.168.5.0</td></tr><tr><td>网3</td><td>255.255.255.0</td><td>192.168.3.0</td></tr></tbody></table><p><strong>要求</strong>:</p><ol><li>主机A与主机B的IPv4地址、子网掩码以及默认网关等参数由网络设备中的DHCP服务自动分配；</li><li>主机C和主机D的IPv4地址、子网掩码以及默认网关等参数由手动分配，且地址的最后一个字节必须设置为任一组员学号的后三位，否则测试不通过。</li><li>对主机A所连接的网络设备端口进行限速，其中入方向和出方向均限制为端口最大速率的50%。</li><li>选择合适的网络设备，配置至少两种防ARP泛洪攻击功能以及至少两种防ARP欺骗攻击功能。</li></ol><h4 id="保姆级教程">保姆级教程</h4><p>选用设备: PC,交换机S5700,路由器AR1220</p><p>总的连接图:</p><p><img src="https://s3.bitiful.net/pb01/186.webp" alt="avatar"></p><p><strong>自动获取IP</strong>:<br>PC1和PC2右键打开设置,ipv4勾选DHCP</p><p><img src="https://s3.bitiful.net/pb01/187.webp" alt="avatar"></p><p><strong>配置AR2</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sys <span class="comment"># 进入系统视图</span></span><br><span class="line">int g0/0/0 <span class="comment"># 配置GE 0/0/0端口</span></span><br><span class="line">ip address 192.168.1.195 24 <span class="comment"># 设置端口处IP mask</span></span><br><span class="line">dhcp <span class="built_in">enable</span> <span class="comment"># 启动DHCP服务</span></span><br><span class="line">ip pool ggls_p1 <span class="comment"># 创建IP池</span></span><br><span class="line">network 192.168.1.0 mask 24 <span class="comment"># 建立网段 网络号 mask</span></span><br><span class="line">gateway-list 192.168.1.195 <span class="comment"># 网关 IP</span></span><br><span class="line">int g0/0/0 </span><br><span class="line">dhcp <span class="keyword">select</span> global <span class="comment"># 启动分配</span></span><br><span class="line">int g0/0/1</span><br><span class="line">ip address 192.168.5.2 24 <span class="comment"># 将路由器GE 0/0/1拉入 192.168.5.0 网段，后面要用</span></span><br><span class="line">quit</span><br><span class="line"><span class="comment"># 配置静态路由，后面要用</span></span><br><span class="line"><span class="comment"># 想去192.168.5.0/24的下一跳是192.168.5.195</span></span><br><span class="line">ip route-static 192.168.5.0 24 192.168.5.195</span><br><span class="line"><span class="comment"># 想去192.168.3.0/24的下一跳是192.168.5.195</span></span><br><span class="line">ip route-static 192.168.3.0 24 192.168.5.195</span><br><span class="line">quit</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p><code>一定要记得保存,不然重做虽然不难,但很麻烦,后面的也是</code></p><p><strong>配置LSW2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">vlan 1 <span class="comment"># 创建vlan 1</span></span><br><span class="line">int vlanif 1</span><br><span class="line">ip address 192.168.5.195 24 <span class="comment"># 配置网关</span></span><br><span class="line">int g0/0/1 <span class="comment"># 让 GE 0/0/1加入vlan1</span></span><br><span class="line">port link-type access</span><br><span class="line">port default vlan 1</span><br><span class="line">int g0/0/2 <span class="comment"># 让 GE 0/0/2加入vlan1</span></span><br><span class="line">port link-type access</span><br><span class="line">port default vlan 1</span><br><span class="line">int g0/0/3 <span class="comment"># 让 GE 0/0/3加入vlan1</span></span><br><span class="line">port link-type access</span><br><span class="line">port default vlan 1</span><br><span class="line">quit</span><br><span class="line"><span class="comment"># 和AR3、AR4的静态路由配置对应，注意了这波</span></span><br><span class="line"><span class="comment"># 想去192.168.1.0/24的下一跳是192.168.5.2</span></span><br><span class="line">ip route-static 192.168.1.0 24 192.168.5.2</span><br><span class="line"><span class="comment"># 想去192.168.3.0/24的下一跳是192.168.5.3</span></span><br><span class="line">ip route-static 192.168.3.0 24 192.168.5.3 </span><br><span class="line">quit</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p><strong>AR3配置</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">int g0/0/0</span><br><span class="line">ip address 192.168.5.3 24</span><br><span class="line">int g0/0/1</span><br><span class="line">ip address 192.168.3.195 24</span><br><span class="line">quit</span><br><span class="line">ip route-static 192.168.1.0 24 192.168.5.195</span><br><span class="line">ip route-static 192.168.5.0 24 192.168.5.195</span><br></pre></td></tr></table></figure><p><strong>PC3和PC4配置</strong>:</p><p>网关与之前设置的一致即可,分别为192.168.5.195和192.168.3.195,ip自己设置</p><p><img src="https://s3.bitiful.net/pb01/188.webp" alt="avatar"></p><p>之后全部启动,看四台PC之间是否能互相ping通,如果不能,就去一个一个的ping接口,找到断的地方,排查问题</p><p>PC1和PC2的ip使用ipconfig命令查看,至此要求1,2就结束了</p><p><strong>限制速率</strong>:<br>因为是千兆的网口,限制到50%,就设置了500M</p><p>要配置LSW4,代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">int g0/0/1</span><br><span class="line">qos lr inbound cir 500000 <span class="comment">#500*1000=&gt; 500Mbps</span></span><br><span class="line">qos lr outbound cir 500000</span><br></pre></td></tr></table></figure><p>查看结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line">int g0/0/1</span><br><span class="line">dispaly this</span><br></pre></td></tr></table></figure><p><img src="https://s3.bitiful.net/pb01/195.webp" alt="avatar"></p><p><strong>应对ARP泛洪</strong>:<br>如果设备对收到的大量ARP报文全部进行处理，可能导致CPU负荷过重而无法处理其他业务。因此，在处理之前，设备需要对ARP报文进行限速，以保护CPU资源。</p><p>如果网络中有用户向设备发送大量目标IP地址不能解析的IP报文（即路由表中存在该IP报文的目的IP对应的路由表项，但设备上没有该路由表项中下一跳对应的ARP表项），将导致设备触发大量的ARP Miss消息。这种触发ARP Miss消息的IP报文会被上送到设备进行处理，设备会根据ARP Miss消息生成和下发大量临时ARP表项并向目的网络发送大量ARP请求报文，这样就增加了设备CPU的负担，同时严重消耗目的网络的带宽资源。</p><p><strong>在AR2和AR3中都要配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sys </span><br><span class="line"><span class="comment"># ARP报文限速</span></span><br><span class="line">int g0/0/0</span><br><span class="line">arp anti-attack rate-limit <span class="built_in">enable</span> </span><br><span class="line">arp anti-attack rate-limit 80 1</span><br><span class="line">int g0/0/1</span><br><span class="line">arp anti-attack rate-limit <span class="built_in">enable</span> </span><br><span class="line">arp anti-attack rate-limit 80 1</span><br><span class="line"><span class="comment"># ARP Miss消息限速</span></span><br><span class="line">arp-miss anti-attack rate-limit <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p><strong>应对ARP欺骗</strong>:</p><p><code>ARP报文合法性检查</code>: 这些检查是用来<strong>判断ARP报文的格式跟ARP协议的规定是否一致</strong>。其中以太网数据帧首部中的源MAC地址和ARP报文数据区中的源MAC地址不一致的ARP报文是协议允许的报文，但是在实际的应用中，该类报文很可能是攻击报文。ARP报文合法性检查功能后，设备<strong>会对收到的ARP报文进行以太网数据帧首部中的源MAC地址和ARP报文数据区中的源MAC地址的一致性检查</strong>，如果两者不一致，则直接丢弃该ARP报文，否则允许该ARP报文通过</p><p><code>ARP表项固化</code>:</p><ul><li><p><strong>fixed-all方式</strong>, 只有当ARP报文对应的MAC地址、接口、VLAN信息和ARP表项中的信息完全匹配时，设备才可以更新ARP表项的其他内容。此方式适用于用户MAC地址固定，并且用户接入位置相对固定的场景。</p></li><li><p><strong>fixed-mac方式</strong>, 设备收到的ARP报文中的MAC地址与ARP表中对应条目的MAC地址不匹配，则直接丢弃该ARP报文；如果匹配，但是收到报文的接口或VLAN信息与ARP表中对应条目不匹配，则可以更新对应ARP条目中的接口和VLAN信息。此方式适用于用户MAC地址固定，但用户接入位置频繁变动的场景。当用户从不同接口接入设备时，设备上该用户对应的ARP表项中的接口信息可以及时更新。</p></li><li><p><strong>send-ack方式</strong>, 设备收到一个涉及MAC地址、VLAN、接口修改的ARP报文时，不会立即更新ARP表项，而是先向待更新的ARP表项现有MAC地址对应的用户发送一个单播的ARP请求报文进行确认，根据确认结果再决定是否更新ARP表项中的MAC地址、VLAN和接口信息。此方式适用于用户的MAC地址和接入位置均频繁变动的场景。</p></li></ul><p><strong>在AR2和AR3中都要配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sys</span><br><span class="line"><span class="comment"># ARP报文合法性检查</span></span><br><span class="line">arp anti-attack packet-check sender-mac</span><br><span class="line"><span class="comment"># ARP表项固化</span></span><br><span class="line">arp anti-attack entry-check fixed-all</span><br></pre></td></tr></table></figure><p>最后查看一下ARP安全配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display arp anti-attack configuration all</span><br></pre></td></tr></table></figure><p>如图:<br><img src="https://s3.bitiful.net/pb01/189.webp" alt="avatar"></p><h3 id="验收问题">验收问题</h3><p>推荐看<a href="https://blog.csdn.net/qq_31028407/article/details/131118006" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">西电B测-计算机专业-计算机网络综合设计实验一站式指南（以2023.4为基准）</a>这篇博客, 老师问问题一般是按顺序问的, 对应的顺序就是你们进去坐的顺序.</p><p>我们组第一个人问的是:</p><ol><li>用的是什么路由?(静态路由)</li><li>还可以用什么?(动态路由RIP)</li><li>最常用的动态路由是什么?(OSPF)</li><li>静态路由路由表是在哪些设备上配置的，是如何配置的?</li></ol><p>第二个:</p><ol><li>dhcp分配地址在哪实现的？(指出配置的路由器)</li><li>dhcp的配置过程？(把代码口述一遍, 先设置路由器端口ip，然后允许dhcp，创建线程池，配置线程池网段、网关…)</li></ol><p>第三个:</p><ol><li>为什么是500000?(单位是kb,千兆端口…),直接问这个是我电脑上把这个交换机的配置display了, 老师看到就直接问了</li><li>arp泛洪攻击是什么?</li><li>arp泛洪攻击消耗的是什么资源?(arp表项资源)</li><li>arp欺骗是怎么做到的?(修改mac地址…)</li></ol>]]></content>
      
      
      <categories>
          
          <category> xdu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据安全检索</title>
      <link href="/2024/04/22/2024-4-22-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E4%B8%8E%E9%9A%90%E7%A7%812/"/>
      <url>/2024/04/22/2024-4-22-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E4%B8%8E%E9%9A%90%E7%A7%812/</url>
      
        <content type="html"><![CDATA[<h3 id="数据安全检索">数据安全检索</h3><p>大数据安全与隐私这门课的lab3,要求如下图:</p><p><img src="https://pb01.s3.bitiful.net/184.webp" alt="avatar"></p><p>方案:<br>•使用了 pyope 库中的 OPE (Order Preserving Encryption) 对数据进行保序加密, 并将加密后的数据写入NE_encrypt.txt。<br>•定义 decision_node 类来构建 KD 树。<br>•实现了 travel_tree 函数，该函数能够在遍历 KD 树并进行近邻查询，并且还实现了距离计算函数 dist。</p><h4 id="加密部分代码">加密部分代码:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> pyope.ope <span class="keyword">import</span> OPE, ValueRange</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入处理txt文件,返回二维数组，明文和密文</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LoadTxtMethod</span>(<span class="params">filename</span>):</span><br><span class="line">    cipher = OPE(<span class="string">b&#x27;long key&#x27;</span> * <span class="number">2</span>, in_range=ValueRange(<span class="number">0</span>, <span class="number">10000000</span>),</span><br><span class="line">                 out_range=ValueRange(<span class="number">0</span>, <span class="number">100000000</span>))</span><br><span class="line">    result_m = <span class="built_in">list</span>()  <span class="comment"># 明文点</span></span><br><span class="line">    result_c = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(filename):  <span class="comment"># 逐行打开文档.</span></span><br><span class="line">        plain_text = line.split(<span class="string">&#x27; &#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        plain_text[<span class="number">0</span>] = <span class="built_in">float</span>(plain_text[<span class="number">0</span>])</span><br><span class="line">        plain_text[<span class="number">1</span>] = <span class="built_in">float</span>(plain_text[<span class="number">1</span>])</span><br><span class="line">        plain_text_arr = np.array(plain_text)  <span class="comment"># 转化数据格式</span></span><br><span class="line">        result_m.append(plain_text_arr)  <span class="comment"># 把第一列数据添加到result序列中</span></span><br><span class="line">        cipher_text = []</span><br><span class="line">        cipher_text.append(cipher.encrypt(<span class="built_in">int</span>(plain_text[<span class="number">0</span>] * <span class="number">1000000</span>)))</span><br><span class="line">        cipher_text.append(cipher.encrypt(<span class="built_in">int</span>(plain_text[<span class="number">1</span>] * <span class="number">1000000</span>)))</span><br><span class="line">        cipher_text_arr = np.array(cipher_text)  <span class="comment"># 转化数据格式</span></span><br><span class="line">        result_c.append(cipher_text_arr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;加密&quot;</span> + <span class="built_in">str</span>(cipher_text_arr[<span class="number">0</span>]) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(cipher_text_arr[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">return</span> array(result_c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">WriteTxt</span>(<span class="params">cipher_txt</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;NE_encrypt.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> cipher_txt:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line">            strings = <span class="built_in">str</span>(x[<span class="number">0</span>]) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(x[<span class="number">1</span>]) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            f.write(strings)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = LoadTxtMethod(<span class="string">&#x27;NE.txt&#x27;</span>)  <span class="comment"># 调用上面数据处理程序</span></span><br><span class="line">    WriteTxt(data)  <span class="comment"># 加密之后的数据存放于cipherText.txt中</span></span><br></pre></td></tr></table></figure><h4 id="邻近搜索部分">邻近搜索部分:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> pyope.ope <span class="keyword">import</span> OPE, ValueRange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类，用于保存结点的值，左右子树，以及用于划分左右子树的切分轴</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">decision_node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value=<span class="literal">None</span>, col=<span class="literal">None</span>, rb=<span class="literal">None</span>, lb=<span class="literal">None</span></span>):</span><br><span class="line">        self.value = value  <span class="comment"># 点</span></span><br><span class="line">        self.col = col  <span class="comment"># 切分的维度</span></span><br><span class="line">        self.rb = rb  <span class="comment"># 右子树</span></span><br><span class="line">        self.lb = lb  <span class="comment"># 左子树</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LoadTxtMethod</span>(<span class="params">filename</span>):  <span class="comment"># 传入形参,txt的名字.</span></span><br><span class="line">    result = <span class="built_in">list</span>()  <span class="comment"># 创建要返回的数据.</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(filename):  <span class="comment"># 逐行打开文档.</span></span><br><span class="line">        data = line.split(<span class="string">&#x27; &#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        data[<span class="number">0</span>] = <span class="built_in">float</span>(data[<span class="number">0</span>])</span><br><span class="line">        data[<span class="number">1</span>] = <span class="built_in">float</span>(data[<span class="number">1</span>])</span><br><span class="line">        data_float = np.array(data)</span><br><span class="line">        result.append(data_float)  <span class="comment"># 把第一列数据添加到result序列中</span></span><br><span class="line">    <span class="keyword">return</span> array(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分点为坐标轴上的中值，求一个序列的中值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">median</span>(<span class="params">x</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(x)</span><br><span class="line">    x = <span class="built_in">list</span>(x)</span><br><span class="line">    x_order = <span class="built_in">sorted</span>(x)</span><br><span class="line">    <span class="keyword">return</span> x_order[n // <span class="number">2</span>], x.index(x_order[n // <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以j列的中值划分数据，左小右大，j=节点深度%列数，列数这里是2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_tree</span>(<span class="params">x, j=<span class="number">0</span></span>):</span><br><span class="line">    rb = []</span><br><span class="line">    lb = []</span><br><span class="line">    m, n = x.shape</span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    edge, row = median(x[:, j].copy())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">if</span> x[i][j] &gt; edge:</span><br><span class="line">            rb.append(i)</span><br><span class="line">        <span class="keyword">if</span> x[i][j] &lt; edge:</span><br><span class="line">            lb.append(i)</span><br><span class="line">    rb_x = x[rb, :]</span><br><span class="line">    lb_x = x[lb, :]</span><br><span class="line">    rightBranch = build_tree(rb_x, (j + <span class="number">1</span>) % n)</span><br><span class="line">    leftBranch = build_tree(lb_x, (j + <span class="number">1</span>) % n)</span><br><span class="line">    <span class="keyword">return</span> decision_node(x[row, :], j, rightBranch, leftBranch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索树：输出目标点的近邻点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">travel_tree</span>(<span class="params">node, aim</span>):</span><br><span class="line">    <span class="keyword">global</span> pointlist  <span class="comment"># 存储排序后的k近邻点和对应距离</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span></span><br><span class="line">    col = node.col</span><br><span class="line">    <span class="keyword">if</span> aim[col] &gt; node.value[col]:  <span class="comment"># 顺着树进行搜索，分类</span></span><br><span class="line">        travel_tree(node.rb, aim)</span><br><span class="line">    <span class="keyword">if</span> aim[col] &lt; node.value[col]:</span><br><span class="line">        travel_tree(node.lb, aim)</span><br><span class="line">    dis = dist(node.value, aim)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(knears) &lt; k:  <span class="comment"># k是输入的要查询的个数，前k个点就是目标点x的k近邻</span></span><br><span class="line">        knears.setdefault(<span class="built_in">tuple</span>(node.value.tolist()), dis)  <span class="comment"># 列表不能作为字典的键</span></span><br><span class="line">        pointlist = <span class="built_in">sorted</span>(knears.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> dis &lt;= pointlist[<span class="number">0</span>][<span class="number">1</span>]:</span><br><span class="line">        knears.setdefault(<span class="built_in">tuple</span>(node.value.tolist()), dis)</span><br><span class="line">        pointlist = <span class="built_in">sorted</span>(knears.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> node.rb <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> node.lb <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 对于父节点来说，如果目标点与其切分轴之间的距离不大于字典中各结点所对应距离的的最大值，便需要访问该父节点的另一个子节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(aim[node.col] - node.value[node.col]) &lt; pointlist[<span class="number">0</span>][<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">if</span> aim[node.col] &lt; node.value[node.col]:</span><br><span class="line">                travel_tree(node.rb, aim)</span><br><span class="line">            <span class="keyword">if</span> aim[node.col] &gt; node.value[node.col]:</span><br><span class="line">                travel_tree(node.lb, aim)</span><br><span class="line">    <span class="keyword">return</span> pointlist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dist</span>(<span class="params">x1, x2</span>):  <span class="comment"># 欧式距离的计算</span></span><br><span class="line">    <span class="keyword">return</span> ((np.array(x1) - np.array(x2)) ** <span class="number">2</span>).<span class="built_in">sum</span>() ** <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">cipher = OPE(<span class="string">b&#x27;long key&#x27;</span> * <span class="number">2</span>, in_range=ValueRange(<span class="number">0</span>, <span class="number">10000000</span>),</span><br><span class="line">                 out_range=ValueRange(<span class="number">0</span>, <span class="number">100000000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保序加密</span></span><br><span class="line"><span class="comment"># 输入给的点，输出调用pyope库加密的点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encryption</span>(<span class="params">point</span>):</span><br><span class="line">    point[<span class="number">0</span>] = <span class="built_in">float</span>(point[<span class="number">0</span>])</span><br><span class="line">    point[<span class="number">1</span>] = <span class="built_in">float</span>(point[<span class="number">1</span>])  <span class="comment"># 把array中的点转化为float类型</span></span><br><span class="line">    en_point = []</span><br><span class="line">    en_point.append(cipher.encrypt(<span class="built_in">int</span>(point[<span class="number">0</span>] * <span class="number">1000000</span>)))</span><br><span class="line">    en_point.append(cipher.encrypt(<span class="built_in">int</span>(point[<span class="number">1</span>] * <span class="number">1000000</span>)))</span><br><span class="line">    en_point_arr = np.array(en_point)  <span class="comment"># 转化数据格式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> en_point_arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保序解密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decryption</span>(<span class="params">point</span>):</span><br><span class="line">    point[<span class="number">0</span>] = <span class="built_in">int</span>(point[<span class="number">0</span>])</span><br><span class="line">    point[<span class="number">1</span>] = <span class="built_in">int</span>(point[<span class="number">1</span>])</span><br><span class="line">    de_point = []</span><br><span class="line">    de_point.append(cipher.decrypt(point[<span class="number">0</span>]) / <span class="number">1000000</span>)</span><br><span class="line">    de_point.append(cipher.decrypt(point[<span class="number">1</span>]) / <span class="number">1000000</span>)</span><br><span class="line">    de_point_arr = np.array(de_point)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> de_point_arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tmp = <span class="built_in">input</span>(<span class="string">&#x27;请输入目标点:&#x27;</span>)</span><br><span class="line">    tmp = tmp.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    point_tmp = encryption(tmp)</span><br><span class="line">    aim = []</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> point_tmp:</span><br><span class="line">        aim.append(num)</span><br><span class="line">    knears = &#123;&#125;</span><br><span class="line">    k = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入需要查询的点的个数&#x27;</span>))</span><br><span class="line">    file = <span class="string">&#x27;NE_encrypt.txt&#x27;</span></span><br><span class="line">    data_c = LoadTxtMethod(file)</span><br><span class="line">    tree = build_tree(data_c)  <span class="comment"># 构建KD tree</span></span><br><span class="line"></span><br><span class="line">    pointlist = travel_tree(tree, aim)  <span class="comment"># 对目标点进行检索</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> pointlist[-k:]:  <span class="comment"># 里面存的有点，和欧式距离</span></span><br><span class="line">        x = [point[<span class="number">0</span>][<span class="number">0</span>], point[<span class="number">0</span>][<span class="number">1</span>]]</span><br><span class="line">        de_point = decryption(x)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;****************--------第&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;条检索数据--------****************&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;检索结果: &quot;</span>, de_point)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;距离为:&quot;</span>, dist(tmp, de_point))</span><br><span class="line">        i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="结果">结果</h4><p><img src="https://pb01.s3.bitiful.net/185.webp" alt="avatar"></p>]]></content>
      
      
      <categories>
          
          <category> xdu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人图床解决方案</title>
      <link href="/2024/04/21/2024-4-21-%E5%9B%BE%E5%BA%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2024/04/21/2024-4-21-%E5%9B%BE%E5%BA%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h3 id="个人图床解决方案">个人图床解决方案</h3><p>原先我的解决方案是github做图床,套一层Cloudflare的cdn来加速国内访问, 但国内访问仍然过慢, 特别是一些图很多的文章, 加载非常慢. 所以我想着改善一下, 在对比了一些解决方案之后, 我选择了PicGo+<a href="https://www.bitiful.com/" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">缤纷云</a>搭建主图床, 部分图片放在 <a href="https://7bu.top/login" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">去不图床</a>, 原先的方案作为备用方案.</p><p>我用去不图床存储常用固定图片, 像背景图这些, 单图10G的流量, PicGo+缤纷云存储文章内插图, 每月10G免费流量, 虽然去不图床和缤纷云都不是像阿里云, 腾讯云这样的大厂, 如果它们跑路的话, 我的备用方案可以立马顶上, 两分钟之内就可以做到替换完成, 所以说还是没有太大隐患</p><h4 id="缤纷云">缤纷云</h4><p>注册并实名之后就会拥有每月赠送的30G流量</p><p><strong>创建桶</strong><br><img src="https://pb01.s3.bitiful.net/173.webp" alt="avatar"><br><img src="https://pb01.s3.bitiful.net/174.webp" alt="avatar"></p><p><strong>防盗链配置</strong><br><img src="https://pb01.s3.bitiful.net/175.webp" alt="avatar"></p><p><strong>添加子用户</strong><br><img src="https://pb01.s3.bitiful.net/176.webp" alt="avatar"><br><img src="https://pb01.s3.bitiful.net/177.webp" alt="avatar"></p><p>Access Key和 Secret Key要记好,等会配置PicGo的时候要用到</p><h4 id="picGo">picGo</h4><p><strong>下载picGo</strong>, 可以去看官方文档, 写得很详细, 我是从山东大学镜像下载的<br><img src="https://pb01.s3.bitiful.net/178.webp" alt="avatar"><br><img src="https://pb01.s3.bitiful.net/179.webp" alt="avatar"></p><p>由于缤纷云不是PicGo官方支持的云服务厂商, 所以得靠插件来实现, 由于支持s3 api, 所以我选择了Amazon s3插件<br><img src="https://pb01.s3.bitiful.net/180.webp" alt="avatar"></p><p><strong>配置</strong><br><img src="https://pb01.s3.bitiful.net/181.webp" alt="avatar"></p><p>应用秘钥ID填Access Key, 应用秘钥填Secret Key, 桶名填你创建的桶名, 文件路径随便填(符合格式就行), 地区和自定义节点在桶信息中都有</p><p><img src="https://pb01.s3.bitiful.net/182.webp" alt="avatar"></p><p>要注意的是在填自定义节点的时候前面要加上https://, 否则会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TypeError [ERR_INVALID_URL]: Invalid URL</span><br><span class="line">    at new NodeError (node:internal/errors:371:5)</span><br><span class="line">    at onParseError (node:internal/url:552:9)</span><br><span class="line">    at new URL (node:internal/url:628:5)</span><br><span class="line">    at parseUrl (C:\Users\levit\AppData\Roaming\picgo\node_modules\@smithy\url-parser\dist-cjs\index.js:29:21)</span><br><span class="line">    at toEndpointV1 (C:\Users\levit\AppData\Roaming\picgo\node_modules\@smithy\middleware-endpoint\dist-cjs\index.js:112:41)</span><br><span class="line">    at customEndpointProvider (C:\Users\levit\AppData\Roaming\picgo\node_modules\@smithy\middleware-endpoint\dist-cjs\index.js:232:65)</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/183.webp" alt="avatar"></p><p>它们官方和插件文档写的是匹配的, 导致一开始让我以为是我的Node.js版本太高导致的</p><p>差点忘了, PicGo插件需要16.0.0版本以上的Node.js才行</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站性能检测与优化</title>
      <link href="/2024/04/20/2024-4-20-%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD/"/>
      <url>/2024/04/20/2024-4-20-%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="网站性能检测与优化">网站性能检测与优化</h2><h3 id="性能检测">性能检测</h3><h4 id="Lighthouse">Lighthouse</h4><p>Lighthouse 是一个网站性能测评工具， 它是 Google Chrome 推出的一个开源自动化工具，能够对 PWA 和网页多方面的效果指标进行评测，并给出最佳实践的建议以帮助开发者改进网站的质量。它的使用方法也非常简单，我们只需要提供一个要测评的网址，它将针对此页面运行一系列的测试，然后生成一个有关页面性能的报告。通过报告我们就可以知道需要采取哪些措施来改进应用的性能和体验。</p><p>在高版本（应该是 &gt;= 60）的 Chrome 浏览器中，Lighthouse 已经直接集成到了调试工具 DevTools 中了，因此不需要进行任何安装或下载。按 F12 打开开发者工具，可以看到在 console、security 等选项后面有一个 Lighthouse （低版本的谷歌浏览器可能显示的是 Audits）选项，选择该选项，然后点击 Analyse page load 即可。</p><p><img src="https://pb01.s3.bitiful.net/171.webp" alt="avatar"></p><p>使用 Lighthouse 对网站进行测评后，我们会得到一份评分报告，它包含了性能（Performance），访问无障碍（Accessibility），最佳实践（Best Practice），搜索引擎优化（SEO），PWA（Progressive Web App）五个部分：</p><p><img src="https://pb01.s3.bitiful.net/169.webp" alt="avatar"></p><p>还有详细的分析:</p><p><img src="https://pb01.s3.bitiful.net/170.webp" alt="avatar"></p><p>从这张图我们可以看出来主要需要优化的有:图片,文本,css和js等静态资源</p><h5 id="性能（Performance）">性能（Performance）</h5><p>性能评分的分值区间是0到100，如果出现0分，通常是在运行 Lighthouse 时发生了错误，满分100分代表了网站已经达到了98分位值的数据，而50分则是75分位值的数据。</p><p>影响评分的性能指标：性能测试结果会分成 Metrics，Diagnostic，Opportunities 三部分，但只有 Metrics 部分的指标项会对分数产生直接影响。</p><p>Lighthouse 会衡量以下 Metrics 性能指标项：</p><ul><li>首次内容绘制（First Contentful Paint）。即浏览器首次将任意内容（如文字、图像、canvas 等）绘制到屏幕上的时间点。</li><li>首次有效绘制（First Meaningful Paint）。衡量了用户感知页面的主要内容（primary content）可见的时间。对于不同的站点，首要内容是不同的，例如：对于博客文章，标题及首屏文字是首要内容，而对于购物网站来说，图片也会变得很重要。</li><li>首次 CPU 空闲（First CPU Idle）。即页面首次能够对输入做出反应的时间点，其出现时机往往在首次有效绘制完成之后。该指标目前仍处于实验阶段。</li><li>可交互时间（Time to Interactive）。指的是所有的页面内容都已经成功加载，且能够快速地对用户的操作做出反应的时间点。该指标目前仍处于实验阶段。</li><li>速度指标（Speed Index）。衡量了首屏可见内容绘制在屏幕上的速度。在首次加载页面的过程中尽量展现更多的内容，往往能给用户带来更好的体验，所以速度指标的值约小越好。</li><li>输入延迟估值（Estimated Input Latency）。这个指标衡量了页面对用户输入行为的反应速度，其基准值应低于 50ms。</li></ul><p>Metrics 部分的指标项会直接影响分数，可以作为我们的主要参考点。</p><p>另外的两部分中， Opportunities 指的是优化机会，它提供了详细的建议和文档，来解释低分的原因，帮助我们具体进行实现和改进。Diagnostics 指的是现在存在的问题，为进一步改善性能的实验和调整给出了指导。这两者不会纳入分数的计算。</p><p>每一项性能指标对评分的贡献都有其计算逻辑，Lighthouse 会将原始的性能值映射成为 0-100 之间的数字。</p><p>针对不同的评分，Lighthouse 用了不同的颜色进行标注，分值区间和颜色的对应关系如下：</p><ul><li><code>0 - 49（慢）：红色</code></li><li><code>50 - 89（平均值）： 橙色</code></li><li><code>90 - 100（快）： 绿色</code></li></ul><h5 id="访问无障碍（Accessibility）">访问无障碍（Accessibility）</h5><p>访问无障碍评分的分值由相关指标的加权平均值计算而来。可以在评分详情查阅每项指标的具体权重。同理，较大权重的指标项对分数的影响较大。</p><p>无障碍性的每个指标项测试结果为pass或者fail，与性能指标项的计算方式不同，当页面只是部分通过某项指标时，页面的这项指标将不会得分。例如，如果页面中的一些元素有屏幕阅读器友好的命名，而其他的元素没有，那么这个页面的 screenreader-friendly-names 指标项得分为0。</p><h5 id="最佳实践（优化）（Best-Practice）">最佳实践（优化）（Best Practice）</h5><p>最佳实践评分的分数区间为0-100。影响这项评分的指标项的权重都是相同的。</p><p>比如：推荐使用 https，跨域的跳转链接需要使用 rel 标识，不能使用废弃的 API等等。</p><h5 id="搜索引擎优化（SEO）">搜索引擎优化（SEO）</h5><p>比如：图片元素使用 alt 属性等等提高搜索引擎搜索排名，便于搜索引擎能找到你这个网站。</p><h5 id="PWA（Progressive-Web-App）">PWA（Progressive Web App）</h5><p>Lighthouse 使用 PWA 基准检查项列表（Baseline PWA Checklist）进行测评，测评结果将这些指标项分成了四个类别，共包含12个自动测试项和3个手动测试项，其中各个自动测试项的评分权重是相同的。PWA 的评测指标对我们来说非常重要，我们可以从这四个类别详细了解一下基准指标项。</p><p><strong>快速可靠</strong>：</p><ol><li>页面在移动网络条件下能够快速加载。</li><li>在离线条件下页面能够返回状态码200。</li><li>start_url 在离线条件下返回状态码200。打开该 PWA 时加载的 URL。</li></ol><p><strong>可安装</strong>：</p><ol><li>始终使用 HTTPS。</li><li>注册 Service Worker 来缓存页面以及 start_url。</li><li>使用 manifest 文件来实现安装 PWA 的需求，浏览器能够主动通知用户将应用添加到桌面，增加留存率。</li></ol><p><strong>PWA 优化</strong>：</p><ol><li>将 HTTP 流量重定向到 HTTPS。</li><li>配置自定义启动画面。</li><li>设置地址栏主题颜色。</li><li>页面内容针对视口大小自适应，对移动用户的展示更友好。</li><li>使用了标签，并设置了 width 或 initial-scale 属性。</li><li>当 JavaScript 文件不可用时，提供降级措施，页面能显示基本内容而不出现白屏。</li></ol><p><strong>手动测试项</strong>：</p><ol><li>站点跨浏览器可用，如主流浏览器 Chrome, Edge, Firefox 及 Safari 等。</li><li>页面间切换流畅，即使在较差的网络环境下，切换动画也应该简洁顺畅，这是提高用户感知体验的关键。</li><li>保证每个页面都有独一无二的 URL，能够在新的浏览器窗口打开，且方便在社交媒体上进行分享。</li><li>除了上述基准指标项之外，为了让 PWA 的体验更加完美，还有一些 Lighthouse 未实现检查的进阶指标，也就是可以作为示范性参考的 PWA 的指标，比如用户体验、缓存、推送通知等等。</li></ol><h3 id="性能优化">性能优化</h3><h4 id="图片优化">图片优化</h4><p>整体思路就是<code>压缩图片</code>，减少图片体积，提高加载速度.推荐采用webp格式,在图片质量相似的情况下可以节省约50%的体积</p><p>我之前的图片以png为主,还有一部分是webp,由于图片太多,全转很麻烦,我先将部分常用png(背景图,封面图等)转成了webp,然后将全部png进行压缩,之后新增的图片全转为webp格式</p><p>使用工具:<a href="https://imagestool.com/zh_CN/" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">imagestool</a>,支持批量转换,转换速度很快</p><p>还有就是<code>懒加载</code>,有节省流量与提高性能的作用。Butterfly主题内置了图片懒加载的选项，在_config.butterfly.yml文件下将对应项设置为如下即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Lazyload (圖片懶加載)</span></span><br><span class="line"><span class="comment"># https://github.com/verlok/vanilla-lazyload</span></span><br><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># site/post 选择在哪些地方启用图片懒加载</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="comment"># 你自己喜欢的图片</span></span><br><span class="line">  <span class="attr">blur:</span> <span class="literal">true</span><span class="comment"># 模糊效果</span></span><br></pre></td></tr></table></figure><h4 id="字体优化">字体优化</h4><p>从Lighthouse的详情分析中我得知网站首页的字体加载速度很慢,如图:</p><p><img src="https://pb01.s3.bitiful.net/172.webp" alt="avatar"></p><p>我们从网上下载的字体通常都是TTF格式，ttf(TrueTypeFont)是一种字库名称，是Apple公司和Microsoft公司共同推出的字体文件格式，也是最常用的格式之一，但是一些好看的字体往往体积都会很大，网站每次进去都要加载一个这么大的文件，速度肯定会很慢！</p><p>采用fonttools编码压缩+转woff2格式二级压缩,参考<a href="https://blog.csdn.net/littleduo/article/details/124563106" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">有效的字体压缩方法</a></p><h4 id="静态资源优化">静态资源优化</h4><p>安装Gulp插件：在博客根目录[Blogroot]打开终端，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp-cli <span class="comment">#全局安装gulp指令集</span></span><br><span class="line">npm install gulp --save <span class="comment">#安装gulp插件</span></span><br></pre></td></tr></table></figure><p>安装各个下属插件以实现对各类静态资源的压缩</p><p><strong>HTML压缩</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlclean --save-dev</span><br><span class="line">npm install gulp-html-minifier-terser --save-dev</span><br><span class="line"><span class="comment"># 用gulp-html-minifier-terser可以压缩HTML中的ES6语法</span></span><br></pre></td></tr></table></figure><p><strong>CSS压缩</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlclean --save-dev</span><br></pre></td></tr></table></figure><p><strong>JS压缩</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-terser --save-dev</span><br></pre></td></tr></table></figure><p><strong>字体包压缩</strong><br>font-min仅支持压缩ttf格式的字体包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-fontmin --save-dev</span><br></pre></td></tr></table></figure><p>为Gulp创建gulpfile.js任务脚本。在博客根目录[Blogroot]下新建gulpfile.js,打开[Blogroot]\gulpfile.js,输入以下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用到的各个插件</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-html-minifier-terser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fontmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-fontmin&#x27;</span>);</span><br><span class="line"><span class="comment">// gulp-tester</span></span><br><span class="line"><span class="keyword">var</span> terser = <span class="built_in">require</span>(<span class="string">&#x27;gulp-terser&#x27;</span>);</span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;compress&#x27;</span>, <span class="title function_">async</span>() =&gt;&#123;</span><br><span class="line">  gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>])</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">terser</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//压缩css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.css&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">cleanCSS</span>(&#123;</span><br><span class="line">            <span class="attr">compatibility</span>: <span class="string">&#x27;ie11&#x27;</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除html注释</span></span><br><span class="line">            <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//压缩html</span></span><br><span class="line">            <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//省略布尔属性的值，例如：&lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//删除所有空格作属性值，例如：&lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//删除&lt;script&gt;的type=&quot;text/javascript&quot;</span></span><br><span class="line">            <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的 type=&quot;text/css&quot;</span></span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 JS</span></span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 CSS</span></span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>  <span class="comment">//压缩页面URL</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//压缩字体</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minifyFont</span>(<span class="params">text, cb</span>) &#123;</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&#x27;./public/fonts/*.ttf&#x27;</span>) <span class="comment">//原字体所在目录</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">fontmin</span>(&#123;</span><br><span class="line">      <span class="attr">text</span>: text</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/fontsdest/&#x27;</span>)) <span class="comment">//压缩后的输出目录</span></span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;mini-font&#x27;</span>, <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> buffers = [];</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.html&#x27;</span>]) <span class="comment">//HTML文件所在目录请根据自身情况修改</span></span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">file</span>) &#123;</span><br><span class="line">      buffers.<span class="title function_">push</span>(file.<span class="property">contents</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> text = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(buffers).<span class="title function_">toString</span>(<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">      <span class="title function_">minifyFont</span>(text, cb);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 运行gulp命令时依次执行以下任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">parallel</span>(</span><br><span class="line">  <span class="string">&#x27;compress&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-html&#x27;</span>,<span class="string">&#x27;mini-font&#x27;</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>在每次运行完hexo generate生成静态页面后，运行gulp对其进行压缩。指令流程如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">gulp</span><br><span class="line">hexo server 或 hexo deploy</span><br></pre></td></tr></table></figure><p>当然还可以通过<code>减少加载项</code>的方式来优化:</p><ul><li>减少卡片的出场动画wowjs、Live2D、canvas元素等(其中Live2D是比较消耗资源的)</li><li>如果部分js和css文件只有部分页面需要引用，尽量不全局引用，同时删除空格、空行、注释、减少无意义的单位</li><li>css文件尽量添加media字段指定加载设备，js文件的引入可以加入 的 async、defer 属性异步加载，不阻塞 DOM 渲染</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis线程模型</title>
      <link href="/2024/04/16/2024-4-14-redis%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
      <url>/2024/04/16/2024-4-14-redis%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis线程模型和IO多路复用">Redis线程模型和IO多路复用</h2><h4 id="Redis是单线程的吗？">Redis是单线程的吗？</h4><p>redis6.0后，全面支持多线程。redis单线程指的是 <code>接收请求、解析请求、进行数据读写操作、返回数据</code>给客户端这个过程是由一个线程来完成的以及Redis的网络IO是由一个线程来完成的。所以我们称redis为单线程。</p><p>但是redis服务在启动的时候，会启动后台线程，常见的有两个</p><ul><li>后台刷盘线程：当我们配置AOF策略为everysec时，每隔一秒，由后台线程完成刷盘操作</li><li>后台释放内存线程：redis 提供unlink命令，异步释放内存，特别是大key</li></ul><p>之所以有后台线程，只为了不让主线程去执行这些操作，避免阻塞主线程，无法响应请求。</p><h4 id="Redis为什么采用单线程？">Redis为什么采用单线程？</h4><p>Redis 的大部分操作都在内存中完成，并且采用了高效的数据结构，因此 Redis 瓶颈可能是机器的内存或者网络带宽，而并非 CPU，所以 Redis 核心网络模型使用单线程并没有什么问题，而且单线程避免了多线程之间并发竞争问题，省去了多线程切换带来的时间和性能上的开销，也不会导致死锁问题。</p><p><code>Redis 6.0引入多线程后，会产生并发安全问题吗？</code><br>不会,引入的多线程只是针对网络IO，在执行命令的时候，仍然是单线程执行</p><h4 id="Redis-6-0-之后为什么引入了多线程？">Redis 6.0 之后为什么引入了多线程？</h4><p>虽然 Redis 的主要工作（网络 I/O 和执行命令）一直是单线程模型，但是在 Redis 6.0 版本之后，也采用了多个 I/O 线程来处理网络请求，这是因为随着网络硬件的性能提升，Redis 的性能瓶颈有时会出现在网络 I/O 的处理上。</p><p>所以为了提高网络 I/O 的并行度，Redis 6.0 对于网络 I/O 采用多线程来处理。对于命令的执行，Redis 仍然使用单线程来处理，不要误解 Redis 有多线程同时执行命令。Redis 官方表示，Redis 6.0 版本引入的多线程 I/O 特性对性能提升至少是一倍以上。</p><h4 id="Redis-采用单线程为什么还这么快？">Redis 采用单线程为什么还这么快？</h4><ol><li>Redis 的大部分操作都在内存中完成，并且采用了高效的数据结构，</li><li>Redis 采用单线程模型避免了多线程之间并发竞争问题，省去了多线程切换带来的时间和性能上的开销，也不会导致死锁问题。</li><li>Redis 采用了 I/O 多路复用的网络模型，来处理客户端产生的事件,即让一个线程同时与多个已完成连接socket进行通信，所以称为多路复用。用户态的线程怎么感知呢？实现这一机制的核心是：内核提供的 select() / epoll() 系统调用函数，来允许Redis 只运行单线程的情况下，同时和多个已完成连接的 Socket进行通信。让处于用户态的线程，发现请求网络事件的socket，线程才可以做出相应的处理.类似于CPU并发调度线程，一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流（客户端连接）的效果。</li></ol><h4 id="Redis-单线程模式是怎样的？（难点）">Redis 单线程模式是怎样的？（难点）</h4><p>Redis 6.0 版本之前的单线程模式如下图：<br><img src="https://pb01.s3.bitiful.net/168.webp" alt="avatar"></p><p>Redis 初始化的时候，会做下面这几件事情：</p><ul><li>首先，调用 epoll_create() 创建一个 epoll 对象和调用 socket() 创建一个服务端 socket</li><li>然后，调用 bind() 绑定服务端IP、端口和调用 listen() 服务端开始监听该端口；</li><li>然后，将调用 epoll_ctl() 将 listen socket 加入到 epoll，同时注册「连接事件」处理函数。</li></ul><p>初始化完后，主线程就进入到一个事件循环函数，主要会做以下事情：</p><ul><li><p>首先，先调用处理发送队列函数，看是发送队列里是否有任务，如果有发送任务，则通过 write 函数将客户端发送缓存区里的数据发送出去，如果这一轮数据没有发送完，就会注册写事件处理函数，等待 epoll_wait 发现可写后再处理 。</p></li><li><p>接着，调用 epoll_wait 函数等待事件的到来：</p><p>○如果是连接事件到来，则会调用连接事件处理函数，该函数会做这些事情：调用 accpet 获取已连接的 socket -&gt; 调用 epoll_ctl 将已连接的 socket 加入到 epoll -&gt; 注册「读事件」处理函数；</p><p>○如果是读事件到来，则会调用读事件处理函数，该函数会做这些事情：调用 read 获取客户端发送的数据 -&gt; 解析命令 -&gt; 处理命令 -&gt; 将客户端对象添加到发送队列 -&gt; 将执行结果写到发送缓存区等待发送；</p><p>○如果是写事件到来，则会调用写事件处理函数，该函数会做这些事情：通过 write 函数将客户端发送缓存区里的数据发送出去，如果这一轮数据没有发送完，就会继续注册写事件处理函数，等待 epoll_wait 发现可写后再处理 。</p></li></ul><h3 id="什么是I-O多路复用模型？">什么是I/O多路复用模型？</h3><h4 id="基于TCP协议的Socket通信">基于TCP协议的Socket通信</h4><p>客户端与服务端之间要进行通信，最基本的网络I/O模型就是通过socket进行TCP协议通信，流程如下：</p><ul><li>服务端调用socket()函数，创建一个监听请求的socket，</li><li>服务端调用bind()函数，在此监听socket上，绑定服务端的IP、应用程序的端口号</li><li>这是为了让服务端的内核能够收到客户端发来的请求数据，并且发送到相应的应用程序</li><li>服务端调用listen()函数，开始监听端口,客户端通过调用connect()函数，绑定服务端的IP、端口号，进行TCP三次握手.握手成功后，会将<strong>已完成连接的socket</strong>，放入服务端内核的TCP全连接队列中</li><li>服务端通过调用accept()函数，从内核获取已完成连接的socket进行通信,若TCP全连接队列中，无已完成连接的socket，那么就会阻塞等待客户端连接的到来</li></ul><p>基于TCP协议的socket通信，是<strong>同步阻塞</strong>的，当服务端还没处理完一个客户端的网络 I/O ，或者读写操作发生阻塞，其他客户端是无法与服务端连接的,即服务端只能与客户端进行一对一连接通信，一个服务端只能服务一个客户，很低效</p><h4 id="基于多进程模型改进网络I-O">基于多进程模型改进网络I/O</h4><p>要想实现服务端同时服务多个客户端，最原始的方式就是用多进程，即为每一个客户端分配一个进程来处理请求。每当服务端与客户端完成连接，调用accept()函数返回一个已完成连接的socket，主进程就会通过fork()调用，产生一个子进程，与客户端进行通信</p><p>这样虽然解决了只能服务于一个客户端的问题，但是因为每产生一个进程，必会占据一定的系统资源，而且进程间上下文切换的代价很大，性能大打折扣。</p><h4 id="基于多线程模型改进网络I-O">基于多线程模型改进网络I/O</h4><p>改进多进程代价高的缺点，使用多线程模型来服务于客户端<br>线程是运行在进程的执行流，所以可以共享进程的很多资源，对于一些私有数据，才需要进行线程上下文切换，减少了很多开销。<br>通过线程池，来避免频繁的创建线程，销毁线程。提高性能</p><p>但是还不够完美，因为本质上，客户端与服务端的通信，还是基于一对一的方式，只不过模型缩小为线程,能不能让一个进程同时与多个socket进行通信呢？</p><h4 id="引入I-O多路复用模型">引入I/O多路复用模型</h4><p>一个进程，可以维护多个已完成连接的socket</p><p><code>进程怎么知道，哪个socket有事件请求呢？</code><br>内核提供了三个系统调用函数，select()/poll()/epoll()，用户态的进程通过调用这些函数，就可以得知，哪些socket有事件请求。</p><p><strong>select()/poll()</strong>:</p><p>本质都是在用户态线性存储socket文件描述符集合，当调用函数select()/poll()时，会将存储的集合拷贝到内核，内核通过遍历判断，哪些socket有事件请求，具体分为读/写事件，进行相应的标记。</p><p>内核标记完成后，将集合拷贝回用户态，用户态通过遍历的方式，查看哪些文件描述符被标记，进而得知哪些socket有事件请求，具体分为读/写事件，进行相应的处理。</p><p>缺点：<br>对于 select()/poll() 方式，需要进行 2 次「遍历」文件描述符集合，一次是在内核态里，一次是在用户态里，还会发生 2 次「拷贝」文件描述符集合，先从用户空间传入内核空间，由内核标记后，再传出到用户空间中。</p><p>显而易见，随着并发数量提示，拷贝 &amp; 遍历 产生的性能消耗，将会非常大。</p><p><strong>epoll()</strong>:<br>epoll()函数，不同于以上两个系统调用函数的地方在于: 在内核中会用红黑树结构，保存进程维护的socket文件描述符集合，即将已完成连接的socket，通过epoll_ctl() 函数加入内核中的红黑树里, 红黑树进行查找、添加、删除的时间复杂度都为log(N)，性能好</p><p>并且在内核中，会维护一个有事件发生的socket链表，用户态进程通过epoll_wait()函数，即可得到有事件发生的socket,节省了用户态与内核态进行遍历的过程，提升性能</p><p>采用 epoll 模型进行网络I/O，被称为解决 <strong>C10K</strong> 问题的利器：<br>支持一个进程打开大数目的socket描述符(FD),它所支持的FD上限是最大可以打开文件的数目</p><p>IO效率不随FD数目增加而线性下降, select/poll每次调用都会线性轮询扫描全部的fd集合，导致效率呈现线性下降。epoll不存在这个问题，它只会对<code>活跃</code>的socket进行操作，这是因为在内核实现中epoll是根据每个fd上面的回调函数实现的</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化(AOF|RDB)</title>
      <link href="/2024/04/12/2024-4-12-redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2024/04/12/2024-4-12-redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis持久化-AOF-RDB">Redis持久化(AOF|RDB)</h2><h3 id="AOF">AOF</h3><h4 id="AOF是什么">AOF是什么?</h4><p>AOF全称是append only file, 即只追加文件。</p><p>AOF持久化是通过保存Redis服务器执行的写命令来记录数据库状态的。</p><p>AOF默认是不开启的,需要在redis.conf文件中配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br></pre></td></tr></table></figure><p>AOF持久化配置项说明：</p><ul><li>appendonly：是否开启AOF持久化</li><li>appendfilename：持久化文件名</li></ul><p>redis处理写命令的时,会采取先写内存数据,再记录AOF日志的方式,这样做有两个好处:</p><ul><li>减少额外检查开销: 只有内存数据被修改成功后才会写AOF日志,保证了日志都是可执行且正确的</li><li>不会阻塞当前的写操作</li></ul><p><strong>风险</strong></p><p>如果命令执行完成，写日志之前宕机了，会丢失数据。</p><p>可能会阻塞下一条写命令的执行: 写操作和记录日志都是主进程(主进程中的redis_aof_write_thread线程),如果在刷盘时,服务器I/O压力过大,导致写硬盘速度很慢,就会阻塞后续的写命令</p><h4 id="写AOF日志的过程">写AOF日志的过程</h4><p>redis在执行完一个写命令之后，会以协议格式将被执行的写命令追加到日志缓存server.aof_buf中,接下来通过系统调用write(),将日志缓存server.aof_buf中的内容写入到AOF文件中。</p><p>有三种写回策略,需要通过设置redis.conf文件中appendfsync参数来配置：</p><p>AOF持久化配置项说明：</p><ul><li>appendfsync：持久化策略<ul><li>always：每个写命令执行完，立马同步地将日志写回磁盘，数据安全性最高，但性能最差</li><li>everysec：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，<code>redis的后台异步线程</code>每隔一秒把缓冲区中的内容写入磁盘</li><li>no：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由<code>操作系统</code>决定何时将缓冲区内容写回磁盘</li></ul></li></ul><h4 id="AOF重写">AOF重写</h4><p>AOF重写是指对AOF文件进行压缩，只保留可以恢复数据的最小命令集合,可以有效减小AOF文件的体积，以提升数据恢复的性能。</p><p>重写触发的条件:</p><ul><li><code>auto-aof-rewrite-min-size</code>:表示运行AOF重写时文件的最小大小，默认为64MB。</li><li><code>auto-aof-rewrite-percentage</code>:这个值的计算方式是，当前aof文件大小和上一次重写后aof文件大小的差值，再除以上一次重写后aof文件大小。也就是当前aof文件比上一次重写后aof文件的增量大小，和上一次重写后aof文件大小的比值。</li></ul><p><strong>流程</strong>:读取当前数据库中的所有键值对，然后将每一个键值对用一条命令记录到<code>新的 AOF 文件</code>，等到全部记录完后，就将新的 AOF 文件替换掉现有的 AOF 文件</p><p><strong>为什么要新建一个AOF文件?</strong><br>如果在原先的AOF文件进行重写,如果重写失败,就会出现数据不一致,导致污染,可能无法用于恢复</p><p><code>为什么是后台子进程而不用子线程?</code><br>子线程会共享内存,主进程要写,子线程要读,要加锁防止读写并发操作,性能差</p><p><strong>采用子进程，写时复制提高性能:</strong><br>采用子进程，主进程会为子进程分配与主进程相同的页表，即虚拟空间映射到相同的物理空间，达到数据共享，并且不需要加锁操作.但会对这块共享的物理内存设置为只读状态,如果主进程 或 子进程 对这块内存发生写操作，会触发写时复制.CPU 触发写保护中断，这个写保护中断是由于违反权限导致的，然后操作系统会在「写保护中断处理函数」里进行物理内存的复制，并重新设置其内存映射关系，将父子进程的内存读写权限设置为可读写，最后才会对内存进行写操作,这样就避免了加锁操作，通过写时复制，来提高性能.(简单来说就是如果主进程在子进程进行AOF重写时,没有执行写入操作,就不会真正分配内存资源,就是写时复制技术COW的应用)</p><h4 id="AOF后台重写机制描述">AOF后台重写机制描述</h4><p>进行AOF日志后台重写时，主进程fork子进程，并且为子进程分配与主进程相同的页表，即虚拟空间映射到相同的物理空间，达到数据共享，并且通过写时复制，来避免加锁</p><p>子进程收集内存中的键值对转化为一条命令，写入新的AOF文件，但在写入过程，主进程仍然可以处理命令，当碰到写操作命令时，会发生以下操作：<br>触发写时复制过程，CPU 触发写保护中断，这个写保护中断是由于违反权限导致的，然后操作系统会在「写保护中断处理函数」里进行物理内存的复制，并重新设置其内存映射关系，将父子进程的内存读写权限设置为可读写，最后主进程才会对内存进行写操作</p><p><code>但子进程收集的AOF文件 数据就不一致了，如何解决？</code></p><p>redis 在AOF后台重写触发时，会分配一个AOF重写缓冲区,重写过程，主进程执行更新内存数据时，需要执行以下几件事情：</p><ol><li>执行命令，更新内存数据</li><li>将命令记录到两个位置:旧的AOF文件和AOF重写缓冲区</li><li>当子进程 AOF重写完毕，会发送一个信号告诉主进程，主进程调用信号处理函数会做以下事情：将AOF重写缓冲区的数据直接追加到新的 AOF文件末尾，替换旧的AOF文件，重写过程就结束。信号处理函数执行完毕，主进程就可以继续处理命令了</li></ol><p><code>后台重写，什么阶段会阻塞主进程？</code></p><ol><li>创建子进程的途中,由于要复制父进程的页表等数据结构: 阻塞的时间跟页表的大小有关,页表越大,阻塞的时间也越长</li><li>创建完子进程后,如果父进程修改了共享数据（子进程一般只读）,就会发生写时复制,这期间会拷贝物理内存,如果内存越大,自然阻塞的时间也越长</li><li>子进程 AOF重写完毕,发送信号通知主进程,主进程会调用信号处理函数,执行时也会对主进程造成阻塞</li></ol><p><code>什么优化，让主进程阻塞时间尽量缩小？</code><br><strong>写时复制</strong>，在发生写操作的时候，操作系统才会去复制物理内存，这样是为了防止 fork 创建子进程时，由于物理内存数据的复制时间过长而导致主进程长时间阻塞的问题。当冲突发生，再进行解决，来提高效率。也可以减少内存分配。</p><h3 id="RDB">RDB</h3><h4 id="RDB快照是什么-如何生成">RDB快照是什么?如何生成?</h4><p>RDB 快照记录的是内存中的实际数据，二进制格式；所以在redis重启恢复数据时，只需要加载rdb文件到内存即可，速度较快</p><p>redis提供了两个命令来主动生成rdb文件<br>●save：主进程来执行全量快照操作，若内存数据太多，会阻塞主进程，不推荐<br>●bgsave：主进程fork 子进程，来执行全量快照操作，这种思想在AOF后台重写日志也用过，避免主线程的阻塞</p><p>还可以通过配置参数，来生成快照<br>默认配置：执行的是 bgsave 命令，也就是会创建子进程来生成 RDB 快照文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>只要满足上面条件的任意一个，就会执行 bgsave，它们的意思分别是：<br>900 秒之内，对数据库进行了至少 1 次修改；<br>300 秒之内，对数据库进行了至少 10 次修改；<br>60 秒之内，对数据库进行了至少 10000 次修改。</p><h4 id="执行RDB快照过程是怎样的？执行快照时，数据能被修改吗？">执行RDB快照过程是怎样的？执行快照时，数据能被修改吗？</h4><p>Redis 同样采用<code>写时复制</code>技术，来支持快照，执行快照时数据能被修改，具体过程：</p><p>主进程fork创建一个子进程，来执行bgsave命令,主进程会将自己的页表复制一份给子进程，虚拟空间指向相同的物理空间，来达到空间共享.子进程在记录实际数据到RDB文件过程中，若主进程没有执行写操作命令，那么共享空间就不会发生冲突，也不会发生写时复制。</p><p>若主进程需要执行写操作命令，如主线程（父进程）要修改共享数据里的某一块数据（比如键值对 A）时，就会发生写时复制，这块数据的物理内存就会被复制一份（键值对 A’），然后主线程在这个数据副本（键值对 A’）进行修改操作。与此同时，bgsave 子进程可以继续把原来的数据（键值对 A）写入到 RDB 文件。</p><p>bgsave 快照过程中，<strong>如果主线程修改了共享数据，发生了写时复制后，本次RDB 快照保存的是原本的内存数据，而主线程刚修改的数据，是没办法在这一时间写入 RDB 文件的，只能交由下一次的 bgsave 快照</strong></p><p><code>怎么将RDB文件加载到内存？</code></p><p>RDB 文件的加载工作是在redis服务器启动时自动执行的，Redis 并没有提供专门用于加载 RDB 文件的命令。</p><p><strong>RDB 快照的缺点</strong><br>每一次执行RDB快照，记录的是内存中的所有数据，相当于一个全量快照，当数据较多时，频繁记录快照，虽然可以采用子进程来执行，但还是会影响redis的性能,如果记录的太不频繁，那么当服务器宕机，丢失的数据就非常多</p><h4 id="写时复制有什么极端场景？">写时复制有什么极端场景？</h4><p>在 Redis 执行 RDB 持久化期间，刚 fork 时，主进程和子进程共享同一物理内存，但是途中主进程处理了写操作，修改了共享内存，于是当前被修改的数据的物理内存就会被复制一份。那么极端情况下，如果所有的共享内存都被修改，则此时的内存占用是原先的 2 倍。所以，针对写操作多的场景，我们要留意下快照过程中内存的变化，防止内存被占满了。</p><h4 id="AOF日志-RDB快照-区别">AOF日志 &amp; RDB快照 区别</h4><p>它们都是redis数据库内存持久化的技术</p><ol><li>记录的内容不同：AOF 文件的内容是操作命令；RDB 文件的内容是二进制数据。</li><li>恢复数据时，耗费的时间不同：RDB 恢复数据的效率会比 AOF 高些，因为直接将 RDB 文件读入内存就可以，AOF 需要额外执行操作命令的步骤才能恢复数据，速度慢</li><li>在服务器发生故障时，丢失数据多少方面：RDB是一个全量快照，不能频繁执行，否则会影响性能,所以丢失数据相对来说较多.AOF支持秒级记录命令到AOF文件中,所以丢失的数据相对来说较少</li></ol><h3 id="AOF-RDB混合持久化">AOF|RDB混合持久化</h3><h4 id="AOF-RDB进行混合持久化有什么优点？">AOF|RDB进行混合持久化有什么优点？</h4><p><code>混合持久化可以利用这两种日志的优点：</code>AOF可以支持秒级记录日志，使得数据更少的丢失,RDB在数据恢复时非常快，不需要重新执行命令</p><p><code>混合持久化的过程只发生在AOF日志重写的过程</code>，如下：</p><ol><li>当AOF日志达到阈值时，触发后台重写机制,主进程fork创建子进程，并且将主进程的页表复制一份给子进程</li><li>子进程与主进程共享空间，对当前内存数据执行RDB快照，将RDB格式的日志记录到新的AOF文件中</li><li>并且在重写过程，主线程处理的写操作命令会被记录在AOF重写缓冲区里，当RDB快照记录完毕，AOF重写缓冲区里的增量命令会以 AOF 方式写入到 AOF 文件</li><li>写入完成后通知主进程,将新的含有 RDB 格式和 AOF 格式的 AOF 文件替换旧的的 AOF 文件。</li></ol><p>使用了混合持久化，AOF 文件的前半部分是 RDB 格式的全量数据，后半部分是 AOF 格式的增量数据。</p><p><strong>好处</strong>：<br>重启Redis加载数据的时候，由于前半部分是RDB内容，这样加载的时候速度会很快。加载完 RDB 的内容后，才会加载后半部分的 AOF 内容，这里的内容是 Redis 后台子进程重写 AOF 期间，主线程处理的操作命令，可以使得数据更少的丢失。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代密码学基础技能</title>
      <link href="/2024/04/09/2024-4-9-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E4%B8%8E%E9%9A%90%E7%A7%811/"/>
      <url>/2024/04/09/2024-4-9-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E4%B8%8E%E9%9A%90%E7%A7%811/</url>
      
        <content type="html"><![CDATA[<h3 id="现代密码学基础技能">现代密码学基础技能</h3><p>大数据安全与隐私这门课的lab1,要求如下图:</p><p><img src="https://pb01.s3.bitiful.net/164.webp" alt="avatar"></p><p><strong>实现思路</strong>:<br>•通过Socket实现文件传输，使用TCP协议确保数据传输的可靠性。<br>•代码通过读取文件的二进制数据进行传输，支持任意类型的文件。<br>•通过AES加密算法进行文件数据的加密和解密。<br>•使用RSA加密算法对AES密钥进行加密，确保密钥的安全传输。<br>•通过在AES密钥中加入时间戳的方式，确保每次生成不同的密钥，从而保证相同文件每次发送的加密结果不同。</p><p>具体实现:<br>客户端 (client.py)</p><ol><li>连接服务器<br>o创建Socket并连接到服务器的指定端口。</li><li>AES密钥生成与加密<br>o生成16字节的随机AES密钥。<br>o加入时间戳生成唯一的AES密钥。<br>o使用RSA公钥加密AES密钥并发送给服务器。</li><li>文件传输<br>o读取文件信息（文件名和大小），发送给服务器。<br>o分块读取文件数据，使用AES进行加密，发送加密数据到服务器。<br>服务端 (server.py)</li><li>监听客户端连接<br>o创建Socket，绑定指定端口，并设置监听队列。</li><li>接收并解密AES密钥<br>o生成RSA密钥对，并将公钥发送给客户端。<br>o接收加密的AES密钥并使用RSA私钥解密。</li><li>文件接收<br>o接收文件信息（文件名和大小）。<br>o分块接收加密文件数据，使用AES解密，写入到文件中。</li></ol><p>运行结果如下:<br><img src="https://pb01.s3.bitiful.net/167.png" alt="avatar"></p><p><img src="https://pb01.s3.bitiful.net/168.png" alt="avatar"><br>图中标黄的内容是RSA加密的AES秘钥, 标蓝色的是AES加密的密文, 标绿的是原文, 原文后面出现\x05的原因是客户端发送文件前对文件进行了PKCS7填充,  客户端这里打印出的是未经取消填充的内容</p><p>我们再来一次, 可以发现生成了不同的AES秘钥, 自然也就实现了相同文件每次发送的加密结果不同</p><p><img src="https://pb01.s3.bitiful.net/169.png" alt="avatar"></p><p><img src="https://pb01.s3.bitiful.net/170.png" alt="avatar"></p><h4 id="服务端代码">服务端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">iv = <span class="string">&#x27;1425374853627180&#x27;</span>  <span class="comment"># 初始向量</span></span><br><span class="line">BUFF = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除末尾填充字符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpadding</span>(<span class="params">text</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(text)</span><br><span class="line">    <span class="built_in">print</span>(text[length - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> text[<span class="number">0</span>:length - text[length - <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">socket_service</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment">#  设置socket可以重用已绑定地址</span></span><br><span class="line">        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        s.bind((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">9001</span>))  <span class="comment"># 绑定端口为9001</span></span><br><span class="line">        s.listen(<span class="number">10</span>)  <span class="comment"># 设置监听数,最多允许10个客户端连接</span></span><br><span class="line">    <span class="keyword">except</span> socket.error <span class="keyword">as</span> msg:</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;等待连接...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 调用accept阻塞： 等待请求并接受(程序会停留在这一旦收到连接请求即开启接受数据的线程)</span></span><br><span class="line">        conn, addr = s.accept()</span><br><span class="line">        <span class="comment"># 接收数据</span></span><br><span class="line">        t = threading.Thread(target=deal_data, args=(conn, addr))</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deal_data</span>(<span class="params">conn, addr</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;接收到来自 &#123;0&#125;的连接&#x27;</span>.<span class="built_in">format</span>(addr))</span><br><span class="line">    <span class="comment"># 收到请求后的回复</span></span><br><span class="line">    conn.send(<span class="string">&#x27;welcome!&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    key = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> key:</span><br><span class="line">            s1_recv_data = conn.recv(BUFF)</span><br><span class="line">            <span class="keyword">if</span> s1_recv_data.decode(<span class="string">&#x27;utf-8&#x27;</span>) == <span class="string">&#x27;changekey&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())) + <span class="string">&#x27; 开始交换秘钥!&#x27;</span>)</span><br><span class="line">                <span class="comment"># 使用RSA产生一对公钥和私钥</span></span><br><span class="line">                (pubkey, privkey) = rsa.newkeys(<span class="number">512</span>, poolsize=<span class="number">8</span>)</span><br><span class="line">                <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())) + <span class="string">&#x27; 创建RSA秘钥对!&#x27;</span>)</span><br><span class="line">                <span class="comment"># 将公钥模数和指数发送给客户端</span></span><br><span class="line">                modulus = pubkey.n</span><br><span class="line">                exponent = pubkey.e</span><br><span class="line">                conn.send(<span class="built_in">str</span>(modulus).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                conn.send(<span class="built_in">str</span>(exponent).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())) + <span class="string">&#x27; 发送RSA公钥&#x27;</span>)</span><br><span class="line">                <span class="comment"># 服务端收到消息</span></span><br><span class="line">                key = conn.recv(BUFF)</span><br><span class="line">                <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,</span><br><span class="line">                                    time.localtime(time.time())) + <span class="string">&#x27; 接收加密后的AES秘钥:&#x27;</span> + key.decode(<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">                                                                                                           <span class="string">&#x27;ignore&#x27;</span>))</span><br><span class="line">                <span class="comment"># 服务端用私钥进行解密，得到AES密钥</span></span><br><span class="line">                key = rsa.decrypt(key, privkey)</span><br><span class="line">                <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())) + <span class="string">&#x27; 解密AES秘钥中&#x27;</span>)</span><br><span class="line">                key = key.decode()</span><br><span class="line">                <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())) + <span class="string">&#x27; AES秘钥:&#x27;</span> + key)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 申请相同大小的空间存放发送过来的文件名与文件大小信息</span></span><br><span class="line">        fileinfo_size = struct.calcsize(<span class="string">&#x27;128sl&#x27;</span>)</span><br><span class="line">        <span class="comment"># 接收文件名与文件大小信息</span></span><br><span class="line">        buf = conn.recv(fileinfo_size)</span><br><span class="line">        <span class="comment"># 判断是否接收到文件头信息</span></span><br><span class="line">        <span class="keyword">if</span> buf:</span><br><span class="line">            <span class="comment"># 获取文件名和文件大小</span></span><br><span class="line">            filename, filesize = struct.unpack(<span class="string">&#x27;128sl&#x27;</span>, buf)</span><br><span class="line">            fn = filename.strip(<span class="string">b&#x27;\00&#x27;</span>)</span><br><span class="line">            fn = fn.decode()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;文件名是 &#123;0&#125;, 文件大小是 &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(fn), filesize))</span><br><span class="line">            recvd_size = <span class="number">0</span>  <span class="comment"># 定义已接收文件的大小</span></span><br><span class="line">            <span class="comment"># 存储在该脚本所在目录下面</span></span><br><span class="line">            fp = <span class="built_in">open</span>(<span class="string">&#x27;./&#x27;</span> + <span class="built_in">str</span>(fn), <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;开始接收...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> filesize % <span class="number">16</span> == <span class="number">0</span>:</span><br><span class="line">                filesize += <span class="number">16</span> - filesize % <span class="number">16</span></span><br><span class="line">            <span class="comment"># 将分批次传输的二进制流依次写入到文件</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> recvd_size == filesize:</span><br><span class="line">                <span class="keyword">if</span> filesize - recvd_size &gt; <span class="number">1024</span>:</span><br><span class="line">                    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">                    recvd_size += <span class="built_in">len</span>(data)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    data = conn.recv(filesize - recvd_size)</span><br><span class="line">                    recvd_size = filesize</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">len</span>(data))</span><br><span class="line">                <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将加密数据转换位bytes类型数据</span></span><br><span class="line">                cipher = AES.new(key.encode(<span class="string">&#x27;utf8&#x27;</span>), AES.MODE_CBC, iv.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                text_decrypted = cipher.decrypt(data)</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">len</span>(text_decrypted))</span><br><span class="line">                <span class="built_in">print</span>(text_decrypted)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(text_decrypted) &lt; <span class="number">1024</span>:</span><br><span class="line">                    text_decrypted = unpadding(text_decrypted)</span><br><span class="line">                <span class="built_in">print</span>(text_decrypted)</span><br><span class="line">                fp.write(text_decrypted)</span><br><span class="line">            fp.close()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;结束接收...&#x27;</span>)</span><br><span class="line">        <span class="comment"># 传输结束断开连接</span></span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    socket_service()</span><br></pre></td></tr></table></figure><h4 id="客户端代码">客户端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">key0 = os.urandom(<span class="number">16</span>).<span class="built_in">hex</span>()  <span class="comment"># 随机生成秘钥,16位字符串</span></span><br><span class="line">iv = <span class="string">&#x27;1425374853627180&#x27;</span>  <span class="comment"># 初始向量</span></span><br><span class="line">BUFF = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">text</span>):</span><br><span class="line">    bs = AES.block_size  <span class="comment"># 16字节</span></span><br><span class="line">    length = <span class="built_in">len</span>(text)   <span class="comment"># 获取明文长度,字符</span></span><br><span class="line">    bytes_length = <span class="built_in">len</span>(<span class="built_in">bytes</span>(text, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    padding = length <span class="keyword">if</span> (bytes_length == length) <span class="keyword">else</span> bytes_length</span><br><span class="line">    padding_size = bs - padding % bs</span><br><span class="line">    padding_text = <span class="built_in">chr</span>(padding_size) * padding_size   <span class="comment"># 按照PKCS7填充方式生成填充文本</span></span><br><span class="line">    <span class="keyword">return</span> text + padding_text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数功能：对明文进行PKCS7填充</span></span><br><span class="line"><span class="comment"># 参数text：需要填充的明文</span></span><br><span class="line"><span class="comment"># 返回值：填充后的明文</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">socket_client</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建socket,ipv4+流</span></span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">9001</span>))</span><br><span class="line">    <span class="keyword">except</span> socket.error <span class="keyword">as</span> msg:</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.recv(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加上给密钥加上时间戳，保证相同的明文，每次发送的密文不同</span></span><br><span class="line">    t = time.time()</span><br><span class="line">    t_str = <span class="built_in">str</span>(<span class="built_in">int</span>(t))</span><br><span class="line">    key = key0[<span class="number">0</span>:<span class="number">8</span>] + t_str[<span class="number">2</span>:<span class="number">10</span>]  <span class="comment"># 取key0前八位和时间戳中的后八位生成新key</span></span><br><span class="line">    <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())) + <span class="string">&#x27; 开始交换秘钥!&#x27;</span>)</span><br><span class="line">    s.send(<span class="string">&#x27;changekey&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    modulus = <span class="built_in">int</span>(s.recv(BUFF).decode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 接收公钥模数</span></span><br><span class="line">    exponent = <span class="built_in">int</span>(s.recv(BUFF).decode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 接收公钥指数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())) + <span class="string">&#x27; 开始构建RSA公钥&#x27;</span>)</span><br><span class="line">    pubkey = rsa.PublicKey(modulus, exponent)  <span class="comment"># 构建公钥</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())) + <span class="string">&#x27; 加密AES秘钥&#x27;</span>)</span><br><span class="line">    crypto = rsa.encrypt(key.encode(<span class="string">&#x27;utf-8&#x27;</span>), pubkey)  <span class="comment"># 用RSA公钥对AES密钥进行加密</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, time.localtime(time.time())) + <span class="string">&#x27; 发送加密后的AES秘钥:&#x27;</span> + crypto.decode(</span><br><span class="line">        <span class="string">&#x27;utf8&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>))</span><br><span class="line">    s.send(crypto)  <span class="comment"># 发送加密后的AES密钥</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需要传输的文件路径</span></span><br><span class="line">    filepath = <span class="string">&#x27;C:/XingYan/1.png&#x27;</span></span><br><span class="line">    <span class="comment"># 判断是否为文件</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="comment"># 定义定义文件信息。128s表示文件名为128bytes长，l表示一个int或long，在此为文件大小</span></span><br><span class="line">        fileinfo_size = struct.calcsize(<span class="string">&#x27;128sl&#x27;</span>)</span><br><span class="line">        <span class="comment"># 打包文件名和大小</span></span><br><span class="line">        filehead = struct.pack(<span class="string">&#x27;128sl&#x27;</span>, os.path.basename(filepath).encode(<span class="string">&#x27;utf-8&#x27;</span>), os.stat(filepath).st_size)</span><br><span class="line">        s.send(filehead)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将传输文件以二进制的形式分多次上传至服务器</span></span><br><span class="line">        fp = <span class="built_in">open</span>(filepath, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            data = fp.read(<span class="number">1024</span>)</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; 发送结束...&#x27;</span>.<span class="built_in">format</span>(os.path.basename(filepath)))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(data) &lt; <span class="number">1024</span>:</span><br><span class="line">                newdata = data.decode(<span class="string">&#x27;utf8&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">len</span>(newdata))</span><br><span class="line">                newdata = padding(newdata)</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">len</span>(newdata))</span><br><span class="line">                data = newdata.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            cipher = AES.new(key.encode(<span class="string">&#x27;utf8&#x27;</span>), AES.MODE_CBC, iv.encode(<span class="string">&#x27;utf8&#x27;</span>))  <span class="comment"># AES加密对象</span></span><br><span class="line">            encryptedbytes = cipher.encrypt(data)</span><br><span class="line">            s.send(encryptedbytes)</span><br><span class="line">            <span class="built_in">print</span>(encryptedbytes)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">len</span>(encryptedbytes))</span><br><span class="line">        s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    socket_client()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> xdu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis缓存问题:穿透,击穿,雪崩,双写一致性等</title>
      <link href="/2024/03/15/2024-3-15-redis%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/15/2024-3-15-redis%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis缓存问题-Redis缓存问题-穿透-击穿-雪崩-双写一致性等">Redis缓存问题:Redis缓存问题:穿透,击穿,雪崩,双写一致性等</h2><p>在高并发场景下,数据库往往是最薄弱的环节,我们通常选择使用<code>redis</code>来进行缓存,以起到缓冲作用,来降低数据库的压力,但是一旦缓存出现问题,也会导致数据库瞬间压力过大甚至崩溃,从而导致整个系统崩溃.今天就聊聊常见的<code>redis</code>缓存问题.</p><h3 id="缓存击穿">缓存击穿</h3><p>缓存击穿一般指redis中的一个热点数据过期,导致大量请求直接访问数据库的情况,导致数据库瞬间压力过大甚至崩溃.</p><p><strong>解决方案:</strong></p><ol><li>设置热点数据永不过期,这是一个不错的方案(要考虑业务特性,体量以及成本),<strong>前提</strong>是热点数据不能频繁发生改变,否则就会出现缓存污染.最好是根据一定的策略进行定时更新</li><li>重要接口限流,做好熔断和降级的准备,sentinel是个不错的选择</li><li>使用互斥锁,保证同一时刻只有一个线程可以访问数据库,这何尝不是一种限流呢</li></ol><h3 id="缓存穿透">缓存穿透</h3><p>缓存穿透指缓存和数据库中都没有的数据,用户不断发起请求.这种情况最可能就是有人试图恶意攻击系统</p><p><strong>解决方案:</strong></p><ol><li>加校验:拦截非法请求,用户鉴权等</li><li>redis缓存一个无效值,以防止对同一个key在数据库中的多次查询,但redis中可能会出现大量无效值,导致缓存污染,所以要将有效时间设置得短一些</li><li>添加布隆过滤器,在对数据库进行查询前,先通过布隆过滤器判断是否存在</li></ol><p>一般来说这三种方案是<strong>同时使用</strong>的,第一层一般是校验,拦截部分非法用户和不合理请求(拦截不可能全部拦截而且如果攻击者通过某些方式掌握了大量合法用户呢),第二层是布隆过滤器,尽量避免对数据库的直接访问,但仍然有误判的可能性,第三层再缓存一个无效值,做到尽可能降低风险</p><h3 id="缓存雪崩">缓存雪崩</h3><p>缓存雪崩一般指reids中大批量数据在极短时间内(同时)过期,导致大量的查询数据库</p><p><strong>解决方案:</strong></p><ol><li>在存储数据时,设置过期时间为一个随机值(也可以理解成给固定的过期时间加上一个随机值,类似密码学中的加盐),尽量保证不会有大量数据在同一时间过期</li><li>将热点数据尽量均匀地分布在不同的数据库中</li><li>多级缓存</li><li>设置热点数据永不过期(同缓存击穿中的)</li></ol><h3 id="缓存污染">缓存污染</h3><p>缓存污染指的是缓存中一些只会被访问一次或者几次的的数据,被访问完后,再也不会被访问到,但这部分数据依然留存在缓存中,消耗缓存空间,也会在一定程度上影响redis的性能</p><p>redis缓存的maxmemory应该设置多大,这是一个关乎性能和成本的问题,需要根据实际情况进行权衡,但普遍推荐的是设置为总数据量的15%-30%(其他博客都这么写,而且范围还挺大,应该没什么问题🤔)</p><h4 id="缓存淘汰策略">缓存淘汰策略</h4><p>官方文档写了8种,如下图:<br><img src="https://pb01.s3.bitiful.net/157.png" alt="avatar"></p><ul><li><p>noeviction(不驱逐,即不淘汰)</p><p>默认策略,当缓存达到maxmemory时,redis会拒绝所有写请求,并返回错误信息,此时redis已经进入只读模式,无法再进行写操作,但仍然可以进行读操作</p></li><li><p>allkeys-lru<br>所有key采用LRU算法进行淘汰,即优先删除最近最少使用的key</p></li><li><p>allkeys-lfu<br>所有key采用LFU算法进行淘汰,即优先删除最不常用的key</p></li><li><p>volatile-lru<br>只淘汰设置了过期时间的key,采用LRU算法进行淘汰</p></li><li><p>volatile-lfu<br>只淘汰设置了过期时间的key,采用LFU算法进行淘汰</p></li><li><p>allkeys-random<br>所有key采用随机删除</p></li><li><p>volatile-random<br>只淘汰设置了过期时间的key,采用随机删除</p></li><li><p>volatile-ttl<br>删除过期字段设置为true和剩余最短生存时间（TTL）值的密钥。</p></li></ul><h2 id="缓存和数据库一致性">缓存和数据库一致性</h2><p>不管是先写MySQL数据库，再删除Redis缓存；还是先删除缓存，再写数据库，都有可能出现数据不一致的情况。举一个例子：如果删除了缓存Redis，还没有来得及写库MySQL，另一个线程就来读取，发现缓存为空，则去数据库中读取数据写入缓存，此时缓存中为脏数据。</p><p>更新缓存有四种设计模式: Cache aside, Read through, Write through, Write behind caching</p><h3 id="缓存更新模式">缓存更新模式</h3><h4 id="Cache-Aside-旁路缓存">Cache Aside(旁路缓存)</h4><ul><li>失效：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li><li>命中：应用程序从cache中取数据，取到后返回。</li><li>更新：更新数据库, 更新/删除缓存</li></ul><p><strong>那么到底是更新缓存还是删除缓存呢?</strong></p><p>如果读的频率高, 选择更新缓存, 这样可以提高缓存命中率</p><p>如果写的频率高, 选择删除缓存, 等到要读的时候再写入缓存, 可以减少无效的写操作和减少缓存数据量</p><h4 id="Read-Through-读穿">Read Through(读穿)</h4><p>Read Through 套路就是在查询操作中更新缓存，也就是说，当缓存失效的时候，Cache Aside是由调用方负责把数据加载入缓存，而Read Through则用缓存服务自己来加载，从而对应用方是透明的。</p><h4 id="Write-Through-写穿">Write Through(写穿)</h4><p>Write Through 套路和Read Through相仿，不过是在更新数据时发生。当有数据更新的时候，如果没有命中缓存，直接更新数据库，然后返回。如果命中了缓存，则更新缓存，然后再由Cache自己更新数据库（这是一个同步操作）</p><h4 id="Write-Behind-Caching-写回">Write Behind Caching(写回)</h4><p>在更新数据的时候，只更新缓存，不更新数据库，而我们的缓存会异步地批量更新数据库。这个设计的好处就是让数据的I/O操作飞快无比（因为直接操作内存嘛 ），因为异步，还可以合并对同一个数据的多次操作，所以性能的提高是相当可观的。但是，其带来的问题是，数据不是强一致性的，而且可能会丢失</p><p>一般而言(即不是特殊的业务场景), 我们<strong>选用Cache Aside(旁路缓存)模式</strong>, 下面我们的讨论也基于此模式.</p><h3 id="操作缓存-操作数据库，哪个先？">操作缓存 &amp; 操作数据库，哪个先？</h3><h4 id="针对删除缓存的情况：">针对删除缓存的情况：</h4><p><strong>如果采用先删除缓存，在更新数据库，会有什么后果？</strong></p><ol><li>线程A先把缓存的A数据删除，发生上下文切换</li><li>线程B想要读取A数据，发现缓存失效，从数据库读取A数据，并且更新缓存，</li><li>切换回线程A，线程A更新数据库数据。</li></ol><p>至此，数据不一致的情况已经出现，数据库的写入较慢，容易出现此现象</p><p><strong>先更新数据库，再删除缓存 怎么样？</strong></p><ol><li>线程A读取缓存A数据，发现缓存失效，所以去数据库读取，此时还未写入缓存，发生上下文切换</li><li>线程B更新数据库，并且删除对应的缓存，</li><li>切换回线程A，线程A将读取到的旧值，写入缓存</li></ol><p>又出现了数据不一致的情况，但是相比先删除缓存，发生概率小很多，必须<strong>同时满足</strong>:</p><ul><li>读请求的时候，缓存刚好失效</li><li>读请求 与 写请求 并发</li></ul><p>所以在实际中很难出现请求 B 已经更新了数据库并且删除了缓存，请求 A 才更新完缓存的情况。所以推荐先<code>更新数据库，再删除缓存</code></p><p><strong>还是存在不一致的可能，怎么实现最终的一致性呢？</strong></p><ol><li>延迟双删策略<br>延迟双删策略是分布式系统中数据库存储和缓存数据保持一致性的常用策略，但它不是强一致。其实不管哪种方案，都避免不了Redis存在脏数据的问题，只能减轻这个问题，要想彻底解决，得要用到同步锁和对应的业务逻辑层面解决。</li></ol><p>不采用先更新数据库，在删除缓存的方案, 而是用先删除缓存，再更新数据库，里面的不一致问题，用延迟双删解决<br>1、先删除缓存 2、再写数据库 3、休眠500ms（统计线程读取数据和写缓存的时间） （休眠的作用是当前线程等其他线程读完了数据后写入缓存后，删除缓存） 4、再删除缓存</p><ol start="2"><li>设置较短的缓存过期时间<br>沿用先更新数据库，再删除缓存,就给缓存设置一个较短的过期时间(只要它够短,就不容易读到错误数据)</li></ol><h4 id="针对更新缓存的情况：（面试说上面那种即可）">针对更新缓存的情况：（面试说上面那种即可）</h4><p><strong>如果采用先更新缓存，再更新数据库</strong></p><ol><li>线程A更新了缓存，此时发生上下文切换</li><li>线程B更新缓存，更新数据库，此时切换回线程A</li><li>线程A更新数据库</li></ol><p>此时就出现了数据不一致的现象，数据库的写入较慢，容易出现此现象。</p><p><strong>反过来，先更新数据库，再更新缓存呢?</strong></p><ol><li>线程A更新了数据库，还未写入缓存，发生上下文切换</li><li>线程B更新了数据库，并且写入缓存，此时切换到线程A</li><li>线程A把缓存写入，覆盖了之前线程B的缓存</li></ol><p>至此，数据不一致的情况，又出现了。缓存的写入通常要远远快于数据库的写入，所以在实际中很难出现请求 B 已经更新了数据库并且更新了缓存，请求 A 才更新完缓存的情况。所以<code>推荐先更新数据库，再更新缓存</code></p><h3 id="保证操作原子性">保证操作原子性</h3><p>操作数据库和操作缓存其实是两个操作，前面的所有分析都是建立在这两个操作都能同时执行成功，只要出现一个执行成功，一个执行失败的情况，就会造成数据库和缓存数据不一致的问题，会对敏感业务造成影响。下面就是两种解决方案.</p><h4 id="队列-重试机制">队列+重试机制</h4><p><img src="https://pb01.s3.bitiful.net/158.png" alt="avatar"></p><ul><li>更新数据库数据；</li><li>缓存因为种种问题删除失败</li><li>将需要删除的key发送至消息队列</li><li>自己消费消息，获得需要删除的key</li><li>继续重试删除操作，直到成功</li></ul><p>该方案有一个缺点，会对业务线代码造成大量的侵入。</p><h4 id="基于订阅binlog的同步机制">基于订阅binlog的同步机制</h4><p><img src="https://pb01.s3.bitiful.net/159.png" alt="avatar"></p><p>本方案启动一个订阅程序去订阅数据库的binlog，获得需要操作的数据。在应用程序中，另起一段程序，获得这个订阅程序传来的信息，进行删除缓存操作。关键是使用canal框架订阅binlog</p><ul><li>要开启mysql的binlog，需要设置binlog_format为ROW模式，并且设置server_id，保证唯一性。修改my.cnf配置文件，重启mysql服务。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin # 开启 binlog</span><br><span class="line">binlog-format=ROW # 选择 ROW 模式</span><br><span class="line">server_id=1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复</span><br></pre></td></tr></table></figure><ul><li>查看是否修改 Binlog 成功。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 binlog 日志是否开启</span></span><br><span class="line">show variables like &#x27;log_%&#x27;;</span><br></pre></td></tr></table></figure><ul><li>MySQL 执行 SQL 语句创建 canal 单独使用的账号，用来进行 Binlog 的同步和监听</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> canal IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;canal&#x27;</span>;  </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, REPLICATION SLAVE, REPLICATION CLIENT <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h4 id="Reference">Reference:</h4><ol><li><a href="https://coolshell.cn/articles/17416.html" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">缓存更新的套路</a></li><li>Java全栈知识体系</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库分库分表</title>
      <link href="/2024/03/02/2024-3-2-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
      <url>/2024/03/02/2024-3-2-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库分库分表">数据库分库分表</h2><h3 id="分库分表到底是什么">分库分表到底是什么</h3><p>分库分表其实是分库,分表,分库分表的总称</p><h4 id="分库">分库</h4><p>将数据按照一定规则存储到不同的数据库中,每个数据库存储一部分数据</p><p><code>分库主要解决的是并发量过大的问题</code>，并发量一旦上升，那么数据库就可能成为系统的瓶颈，因为数据库的连接数量是有上限的，虽然可以进行调整，但并不是无限调整的。所以，当数据库的读或者写的 QPS(每秒查询数) 太高，从而导致你的数据库连接数量不足的时候，就需要考虑到分库了，通过在增加数据库实例的方式来提供更多的数据库连接，从而提升系统的并发度。<br>这里拿一个电商系统的数据库来举例，当你微服务在做服务拆分的时候，你会按照功能模块去把你的系统进行服务拆分，这个时候，就需要将每个模块的数据从一个单独的数据库中拆开，分成订单、物流、商品、用户等多个数据库，然后随着业务的发展，每个单独的业务数据库也需要进行分库了，如下图所是。</p><p><img src="https://pb01.s3.bitiful.net/154.png" alt="avatar"></p><h4 id="分表">分表</h4><p>将一张表按照一定规则拆分成多张表,每张表存储一部分数据</p><p><code>相比较于分库，分表主要解决的是数据量大的问题</code>，即通过将数据拆分到多个表，减少单表的数据量，从而提升查询速度。</p><h4 id="分库分表">分库分表</h4><p>这一般发生在数据库连接不够（分库解决的问题）以及单表数据量过大导致查询速度比较慢（分表解决的问题）这两个问题共同存在的时候，不过在分库分表之前，可以先考虑一下能不能优化先。</p><p>一般来说，单表的行数如果超过了 1000 万行之后，就需要考虑做分库分表了，小于这个数据量的时候，遇到性能问题可以通过其他方式来进行优化。但其实这么说是不准确的,需要根据表字段数量、表中数据数量以及业务的具体情况来综合考虑,无法给出一个确切的值.</p><ul><li><strong>常⻅的优化手段</strong></li></ul><ol><li>数据库的基本优化：做好索引、减少多表 join、减少冗余字段</li><li>减少数据库压力：在数据库之前加一层缓存，把一些可以接受延迟的，以及数据库变化频率较低的内容放到本地缓存或者分布式缓存当中。</li><li>冷热数据的隔离：即数据归档，可以将一些更新以及不经常使用的数据单独隔离出来，可以放到历史表或者离线数仓当中，减少表中的数据量来提升效率</li><li>数据库分区：数据库分区之后，将数据存储在不同的表当中，尽量减少单表的数据量，提升查询性能。</li><li>分布式数据库：将数据分散到多个节点上，提升容量</li></ol><h4 id="分区和分表的区别">分区和分表的区别</h4><p>我们上面提过一个点，就是在数据库中，如果数据量比较大的话，优先考虑的是如何对数据进行优化，而不是进行分库分表，我们在优化里面提到了一个点，就是对数据实现分区操作，那么这个过程要怎么理解呢？以及这两个过程有什么区别？</p><p>首先我们先说一个点，就是分区和分表相同的点，都是按照一定的规则，对一张数据量特别大的表进行分解，使得表的数据量减少，从而提高查询效率。这样听起来你可能感觉没差多少，因为两者的区别都是把表进行拆分，那具体有什么差别吗？主要就是分区和分表后数据的存储方式发生了变化。</p><p>这个要从 MySQL 的索引说起，在 Innodb 中（8.0之前），表存储主要依赖两个文件，分别是 .frm 文件和.ibd 文件。.frm文件用于存储表结构定义信息，而.ibd文件则用于存储表数据。</p><p>拿order表来举例,分区存储时会在 MySQL 的 data 目录下创建一个用户名+表名+分区名.ibd 的文件（如：order_p1.ibd），用来存储 order 表中第一个分区的数据，同样会有 order_p2.ibd 和order_p3.ibd 来存储第二和第三个分区的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">order_p1.ibd</span><br><span class="line">order_p2.ibd</span><br><span class="line">order_p3.ibd</span><br><span class="line">order.frm</span><br></pre></td></tr></table></figure><p>分表存储的时候会在 MySQL 的 Data 目录下创建一个后缀为 .frm，名字为&quot;order_1.frm&quot;的表格文件，存储 order表中第一个分表的数据，同样会有另外的 order_2.frm 和order_3.frm 来存储第二个和第三个分表的数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">order_1.ibd</span><br><span class="line">order_1.frm</span><br><span class="line">order_2.ibd</span><br><span class="line">order_2.frm</span><br><span class="line">order_3.ibd</span><br><span class="line">order_3.frm</span><br></pre></td></tr></table></figure><p><code>所以简单来说,两者的区别是:</code></p><ul><li>数据在做了分区后，表面是还是只有一张表，只不过数据保存在不同的位置上了（同一个.frm文件），在做数据读取的时候操作的表名还是users表，数据库会自己去组织各个分区的数据。</li><li>数据在进行了分表后，不管是表面上还是实际上，都已经不是同一张表了，其分成了多张表（多个.frm 文件 ）。所以数据库在进行操作的时候需要去指定对应的表名</li></ul><h3 id="如何分库分表">如何分库分表</h3><p>分库和分表都有两种拆分方式，一种是垂直拆分，一种是水平拆分。</p><h4 id="垂直拆分">垂直拆分</h4><p>垂直拆分就是通过将数据库表中的字段减少，然后数据的行数不变，列数减少，来使得每个表中的数据量下降.比如之前提到的电商数据库,将其拆分为订单数据库,商品数据库,用户数据库等,这就属于垂直拆分.如果将用户表常用信息分为用户主表,不常用信息分为用户扩展表,就是表的垂直拆分.垂直拆分主要是根据<code>业务</code>来决定的,不同的业务有着不同的拆分方案.</p><h4 id="水平拆分">水平拆分</h4><p>水平拆分就是将数据库中的表数据分散到多个表中，即数据表中列数不变，行数减少，来使得每个表中的数据量下降.水平拆分的<code>关键</code>在于<strong>分片键的选择</strong>,分片键是用于将数据库（表）水平拆分的数据库字段,它直接影响了分库分表的性能和可扩展性。以下是一些选择分片键的关键因素：</p><ul><li>选择一个<code>尽量均匀</code>的分片键，这样可以使得数据尽量均匀的分布到各个数据库中,避免出现热点数据集中在某个分片上的情况。</li><li>选择一个<code>尽量唯一</code>的分片键，这样可以避免数据重复，提高数据的唯一性。</li><li>选择一个<code>尽量不变</code>的分片键，这样可以避免对拆分结果的多次修改，提高系统的稳定性和可维护性。</li><li>选择分片键还应考虑数据的访问频率。将经常访问的数据放在同一个分片上，可以提高查询性能和降低跨分片查询的开销。</li></ul><h4 id="常见的水平拆分算法">常见的水平拆分算法</h4><h5 id="哈希取模-HASH-MOD">哈希取模(HASH_MOD)</h5><p>这是最常用的水平拆分算法，它通过将分片键的哈希值对分片数量取模，来确定数据应该存储的分片。哈希值可能出现负数,要先对其求绝对值之后再取模,下面是ShardingSphere中HASH_MOD算法的实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HashModShardingAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">StandardShardingAlgorithm</span>&lt;Comparable&lt;?&gt;&gt;, ShardingAutoTableAlgorithm &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SHARDING_COUNT_KEY</span> <span class="operator">=</span> <span class="string">&quot;sharding-count&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> shardingCount;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="keyword">final</span> Properties props)</span> &#123;</span><br><span class="line">        shardingCount = getShardingCount(props);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getShardingCount</span><span class="params">(<span class="keyword">final</span> Properties props)</span> &#123;</span><br><span class="line">        ShardingSpherePreconditions.checkState(props.containsKey(SHARDING_COUNT_KEY), () -&gt; <span class="keyword">new</span> <span class="title class_">ShardingAlgorithmInitializationException</span>(getType(), <span class="string">&quot;Sharding count cannot be null.&quot;</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.parseInt(String.valueOf(props.getProperty(SHARDING_COUNT_KEY)));</span><br><span class="line">        ShardingSpherePreconditions.checkState(result &gt; <span class="number">0</span>, () -&gt; <span class="keyword">new</span> <span class="title class_">ShardingAlgorithmInitializationException</span>(getType(), <span class="string">&quot;Sharding count must be a positive integer.&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doSharding</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; availableTargetNames, <span class="keyword">final</span> PreciseShardingValue&lt;Comparable&lt;?&gt;&gt; shardingValue)</span> &#123;</span><br><span class="line">        ShardingSpherePreconditions.checkNotNull(shardingValue.getValue(), NullShardingValueException::<span class="keyword">new</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> String.valueOf(hashShardingValue(shardingValue.getValue()) % shardingCount);</span><br><span class="line">        <span class="keyword">return</span> ShardingAutoTableAlgorithmUtils.findMatchedTargetName(availableTargetNames, suffix, shardingValue.getDataNodeInfo()).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">doSharding</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; availableTargetNames, <span class="keyword">final</span> RangeShardingValue&lt;Comparable&lt;?&gt;&gt; shardingValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> availableTargetNames;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">hashShardingValue</span><span class="params">(<span class="keyword">final</span> Object shardingValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.abs((<span class="type">long</span>) shardingValue.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAutoTablesAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> shardingCount;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HASH_MOD&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="一致性哈希算法">一致性哈希算法</h5><p>我们在做分库分表的时候，最开始根据业务分析，只需要 128 张表就可以满足数据量的要求了，但是随着业务的扩展，128 张表可能已经不够用了，这个时候就需要重新分表了，比如增加一张新的表，这个时候如果采用 Hash取模的方式，就会导致 128 + 1 张表的数据需要重新进行分配，成本非常高。而一致性哈希算法就是专门解决这类问题的算法，其可以有效地解决分布式系统中增加或者删除节点时的失效问题。</p><p>实现一致性哈希算法首先需要构造一个<strong>哈希环</strong>，然后划分固定数量的虚拟节点，一般都是 2的32次方。接下来将128张表作为节点映射到这些虚拟节点上，每个节点在哈希环上面都有一个对应的虚拟节点。然后我们就需要存储数据了，现在我们要把分片键也根据同样的算法进行 Hash，并且也将其映射到哈希环上面。经过以上步骤，在这个 Hash 环上面的虚拟节点就包含两部分数据的映射了，一部分是存储数据的分表的映射，一部分是真实要存储的数据的映射。</p><p>我们最终目的是将这些数据存储到数据库分表中，那么做好哈希之后，这些数据又要保存在哪个数据库表节点中呢？这个其实很简单，就是按照数据的位置，沿着顺时针的方向进行查找，找到的第一个数据库表节点就是数据要存放的数据库表节点。</p><p>回到开头的问题,我们要添加第129张表,只要将第129张表的虚拟节点映射到哈希环上,然后将数据重新分配即可,这样只会影响到哈希环上新增节点顺时针旋转的<strong>下一个节点的数据</strong>,而不会影响到其他节点。</p><p><strong>一致性哈希算法的优缺点：</strong></p><p><code>优点:</code></p><ul><li>数据均衡：在增加或者删除节点的时候，一致性哈希算法只会影响到少量的数据迁移，保持了数据的均衡性。</li><li>高扩展性：当节点数目发生变化的时候，对于已经存在的数据，只有部分数据需要重新分布，不会影响到整体的数据结构。</li></ul><p><code>缺点:</code></p><ul><li>Hash 倾斜：在节点数较少的情况下，由于哈希空间是有限的，节点的分布可能不够均匀，导致数据倾斜。</li><li>节点的频繁变更： 如果频繁添加或删除节点，可能会导致大量的数据迁移，从而造成系统压力。</li></ul><p><strong>Hash 倾斜的解决方案:</strong></p><ol><li><p>力大砖飞,增加节点,尽可能地分散节点，使得数据分布较为均匀,但这不太现实,因为有这个条件也就不会出现 Hash 倾斜的问题了。</p></li><li><p>引入虚拟节点,即我们将一个服务器节点拆分成多个虚拟节点，然后数据在映射的时候先将数据映射到虚拟节点上，然后虚拟节点在对应的物理节点进行存储和读取就可以了，有了虚拟节点的接入，数据在分布的时候就会尽可能地分散，然后在增加或者减少服务器数量的时候，受到影响的数据范围也不会有那么多。</p></li></ol><h5 id="其他算法">其他算法</h5><p>ShardingSphere的分片算法还有如下图这些:</p><p><img src="https://pb01.s3.bitiful.net/155.png" alt="avatar"></p><h3 id="分表之后的全局-ID-如何保证全局唯一性？">分表之后的全局 ID 如何保证全局唯一性？</h3><p>我们在单表中可以采用数据库主键来做唯一的 ID，但是如果使用了分库分表的形式，那么多张单表中的自增主键就一定会发生冲突，那这样的话你生成的ID 就不具备全局唯一性了</p><h4 id="UUID">UUID</h4><p>UUID是可以做到全局唯一性的，而且生成方式也很简单，而且性能很高，不依赖于网络，使用起来也比较方便。但是我们通常不使用他作为唯一 ID，主要原因有两个：</p><ol><li>UUID 太⻓了，它有 32 位 16进制的数字，且字符串的查询效率也比较慢，在作为分布式 ID 查询的时候存在查询效率较低，不适合范围查询以及不方便展示等问题。</li><li><strong>不具有业务性</strong>，标准的 UUID 格式为：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (8-4-4-4-12)，一共32个字符，这个时候我们随便举一个例子，“340a3413-b8a2-c1e6-f922-895398142390”,对于这个字符串来说，很难看出其表达的含义，如果使用其作为全局唯一标识，在分布式系统中，很难进行问题的排查以及开发过程中的调试，所以我们一般不考虑 UUID 作为全局唯一标识</li></ol><h4 id="基于某个单表做自增主键">基于某个单表做自增主键</h4><p>利用一个表来存放自增 ID ，然后所有的表在需要主键的时候来这张表里面取就可以了，这样做就可以实现全局唯一，还实现了自增效果，一举两得。这样不否定，确实可以实现全局唯一而且还能实现自增效果，但是有一个问题，就是<strong>这张单表最终会成为了系统扩展的瓶颈</strong>，而且也存在<strong>单点问题</strong>，一旦这张表有一天突然挂了，那整个数据库的插入不就瘫痪了吗？</p><h4 id="基于多个单表-步⻓做自增主键">基于多个单表+步⻓做自增主键</h4><p>设置起始值和步长,比如table_001起始值为10000,步长为10000,其范围就为10000-19999,table_002起始值为20000,步长为10000,其范围就为20000-29999,以此类推,这样就可以实现全局唯一,而且还能实现自增效果.但是又有了一个新的问题,那就是table_001如果 ID 到了19999 ，这个怎么办？那就重新生成一个起始值：table_001的新起始值为80000,其范围为80000-89999,以此类推.</p><h4 id="雪花算法">雪花算法</h4><p>雪花算法是一种比较常⻅的分布式 ID 的生成方式，它具有全局唯一、递增、高可用的特点。它的核心思想就是将一个 64位的ID划分成多个部分，每个部分都有不同的含义，包括时间戳、数据中心标识、机器标识和序列号等。</p><p><img src="https://pb01.s3.bitiful.net/156.png" alt="avatar"></p><p>一般来说，雪花算法生成的 ID 有以下几个部分：</p><ol><li>最高1位固定值0，因为生成的 id 是正整数，如果是1就是负数了。</li><li>接下来41位存储毫秒级时间戳，2^41/(1000606024365)=69，大概可以使用69年。</li><li>再接下10位存储机器码，包括5位 datacenterId 和5位 workerId。最多可以部署2^10=1024台机器。</li><li>最后12位存储序列号。同一毫秒时间戳时，通过这个递增的序列号来区分。即对于同一台机器而言，同一毫秒时间戳下，可以生成2^12=4096个不重复 id。</li></ol><p>可以将雪花算法作为一个单独的服务进行部署，然后需要全局唯一 id 的系统，请求雪花算法服务获取 id 即可。对于每一个雪花算法服务，需要先指定10位的机器码，这个根据自身业务进行设定即可。例如机房号+机器号，机器号+服务号，或者是其他可区别标识的10位比特位的整数值都行。</p><p>当然雪花算法也有其缺点:<strong>依赖服务器时间，服务器时钟回拨时可能会生成重复 id</strong>。算法中可通过记录最后一个生成 id 时的时间戳来解决，每次生成 id 之前比较当前服务器时钟是否被回拨，避免生成重复 id。</p><p>像百度,美团等大厂都在github上开源了自己的分布式ID生成器，有兴趣的可以自行了解。</p><h3 id="分库分表后的查询">分库分表后的查询</h3><h4 id="带分片键的查询">带分片键的查询</h4><p>由于带有分片键,我们可以定位到具体的库和表,然后进行查询.</p><h4 id="不带分片键的关键查询">不带分片键的关键查询</h4><p>以电商网站为例，电商网站上不仅有买家，还有卖家，他们的查询也很高频，该怎么做呢？针对卖家查询，一般会采用<strong>空间换时间</strong>的方案，同步出一张按照卖家维度做分表的表来。虽然这种情况下可能存在秒级的延迟，但是一般业务上来说都是可以接受的。也就是说，当一条订单创建出来之后，会在买家表创建一条记录，以买家ID作为分表字段，同时，也会在卖家表创建一条记录出来，用卖家ID进行分表。并且这张卖家表不会做任何写操作，只提供查询服务，完全可以用一些比较廉价的机子去部署数据库实例。这样，卖家的分⻚等查询就可以直连卖家表做查询了。</p><h4 id="不带分片键的聚合查询">不带分片键的聚合查询</h4><p>一般来说，大厂用的比较多的方案就是使用分布式数据仓库来实现，也就是说我们会把这些数据同步到像TiDB、PolarDB、HBase等这些数据库中，或者同步到ES中，然后在这些数据库中做数据的聚合查询。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客网站遇到的一些问题</title>
      <link href="/2024/03/01/2024-3-1-%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2024/03/01/2024-3-1-%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="博客网站遇到的一些问题">博客网站遇到的一些问题</h2><h3 id="错把版本升级">错把版本升级</h3><p>最近阿里云显示我的博客网站有漏洞,我便想着去把它给修了,由于经验不足且没有认真看官方的解决方案,我把centos从版本7直接升到了版本8,导致博客网站挂了,服务不可用.由于是大版本升级,而且之前也错误升级了一些东西,于是我选择了重置环境然后重新部署.事后想了一下,主要问题有两点:</p><ol><li>没有仔细看官方的解决方案,使用了更宽范围的update命令,导致centos和一些组件错误升级,从而导致博客网站无法正常访问.</li><li>没有备份手段,阿里云其实提供了快照,但我以为自己不会用上,而且能省一笔钱,也就没开通</li></ol><p>阿里云重置环境的方法:</p><ol><li><p>停止云服务器<br><img src="https://pb01.s3.bitiful.net/144.png" alt="avatar"></p></li><li><p>找到更换操作系统选项,选择更换系统盘<br><img src="https://pb01.s3.bitiful.net/145.png" alt="avatar"></p></li><li><p>对系统盘做初始设置<br><img src="https://pb01.s3.bitiful.net/146.png" alt="avatar"></p></li></ol><h3 id="博客网站无法正常访问">博客网站无法正常访问</h3><p>这个问题在于浏览器,我一直没有给我的网站配置SSL证书,所以一直用的是http协议,现在edge浏览器和chrome浏览器已经强制将http转换为https,导致我的网站无法正常访问.解决方案有如下两种:</p><h4 id="1-更改HSTS">1.更改HSTS</h4><p>在edge浏览器中,输入edge://net-internals/#hsts,在Delete domain sercurity policies中输入项目的域名，并Delete,然后重新访问网站即可.chrome浏览器输入chrome://net-internals/#hsts即可.</p><p><img src="https://pb01.s3.bitiful.net/147.png" alt="avatar"></p><h4 id="2-配置SSL证书">2.配置SSL证书</h4><p>之前没配置SSL证书的原因是觉得没必要,本身网站访问量不大,能用就行,现在随着浏览器安全策略的升级,也就不得不配置了.</p><ol><li>购买SSL证书<br>由于阿里云现在的免费证书只提供三个月,所以我选择了68元一年的证书</li></ol><p><img src="https://pb01.s3.bitiful.net/148.png" alt="avatar"></p><ol start="2"><li><p>配置DNS解析<br>根据SSL证书提供的信息添加一条记录,以便通过验证,当然如果服务器,域名都是阿里云的,它会为你自动添加,但会有点慢.<br><img src="https://pb01.s3.bitiful.net/153.png" alt="avatar"></p></li><li><p>证书下载<br>我是下载Nginx的证书<br><img src="https://pb01.s3.bitiful.net/150.png" alt="avatar"><br>然后将下载下来的key和pem文件上传到服务器上,可以不按我的操作来<br><img src="https://pb01.s3.bitiful.net/149.png" alt="avatar"></p></li></ol><p>我的操作如下:在服务器新建一个SSL文件夹，将两个文件上传。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/</span><br><span class="line"><span class="built_in">mkdir</span> SSL</span><br></pre></td></tr></table></figure><ol start="4"><li>配置nginx<br>这里需要修改nginx.conf文件,添加https协议的配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/</span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><p>进入后找到server块,监听443端口的那个,80的那个是http协议的配置,可以注释掉,也可以保留(<strong>记得检查443端口是否打开</strong>).<br><img src="https://pb01.s3.bitiful.net/151.png" alt="avatar"></p><p>将其取消注释,将root改为博客根目录,把pem文件和key替换上去,如果下载的不是Nginx的证书,可能需要修改一下,自己注意就好<br><img src="https://pb01.s3.bitiful.net/152.png" alt="avatar"></p><ol start="5"><li>重启Nginx服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure><p>看Nginx服务是否正常启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nginx.service</span><br></pre></td></tr></table></figure><ol start="6"><li>查看是否成功<br>使用https协议访问你的网站,如果出现了锁的标识,就代表配置成功.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hutool：一行代码搞定数据脱敏 | 京东云技术团队</title>
      <link href="/2024/02/26/%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F/"/>
      <url>/2024/02/26/%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="声明-本文转载自-a-href-https-segmentfault-com-a-1190000044102356-style-color-177cb0-text-decoration-underline-text-decoration-style-dotted-Hutool：一行代码搞定数据脱敏-京东云技术团队-a">声明:本文转载自<a href="https://segmentfault.com/a/1190000044102356" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">Hutool：一行代码搞定数据脱敏 | 京东云技术团队</a></h4><h1 id="Hutool：一行代码搞定数据脱敏-京东云技术团队">Hutool：一行代码搞定数据脱敏 | 京东云技术团队</h1><h2 id="1-什么是数据脱敏">1. 什么是数据脱敏</h2><h3 id="1-1-数据脱敏的定义">1.1 数据脱敏的定义</h3><p>数据脱敏百度百科中是这样定义的：</p><p>数据脱敏，指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。这样就可以在开发、测试和其它非生产环境以及外包环境中安全地使用脱敏后的真实数据集。在涉及客户安全数据或者一些商业性敏感数据的情况下，在不违反系统规则条件下，对真实数据进行改造并提供测试使用，如身份证号、手机号、卡号、客户号等个人信息都需要进行数据脱敏。是数据库安全技术之一。</p><p>总的来说，数据脱敏是指对某些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数据的可靠保护。</p><p>在数据脱敏过程中，通常会采用不同的算法和技术，以根据不同的需求和场景对数据进行处理。例如，对于身份证号码，可以使用掩码算法（masking）将前几位数字保留，其他位用“X”或&quot;*&quot;代替；对于姓名，可以使用伪造（pseudonymization）算法，将真实姓名替换成随机生成的假名。</p><h3 id="1-2-常用脱敏规则">1.2 常用脱敏规则</h3><p>替换、重排、加密、截断、掩码</p><h2 id="2-Hutool工具介绍">2. Hutool工具介绍</h2><h3 id="2-1-引入Maven配置">2.1 引入Maven配置</h3><p>在项目的pom.xml的dependencies中加入以下内容，这里以5.8.16版本为例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool\-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：Hutool 5.x支持JDK8+， 如果你的项目使用JDK7，请使用Hutool 4.x版本。本文使用的数据脱敏工具类只有在5.6+版本以上才提供。</p><h3 id="2-2-Hutool包含的组件">2.2 Hutool包含的组件</h3><p>一个Java基础工具类，对文件、流、加密解密、转码、正则、线程、XML等JDK方法进行封装，组成各种Util工具类，同时提供以下组件：</p><table><thead><tr><th>模块</th><th>介绍</th></tr></thead><tbody><tr><td>hutool-aop</td><td>JDK动态代理封装，提供非IOC下的切面支持</td></tr><tr><td>hutool-bloomFilter</td><td>布隆过滤，提供一些Hash算法的布隆过滤</td></tr><tr><td>hutool-cache</td><td>简单缓存实现</td></tr><tr><td>hutool-core</td><td>核心，包括Bean操作、日期、各种Util等</td></tr><tr><td>hutool-cron</td><td>定时任务模块，提供类Crontab表达式的定时任务</td></tr><tr><td>hutool-crypto</td><td>加密解密模块，提供对称、非对称和摘要算法封装</td></tr><tr><td>hutool-db</td><td>JDBC封装后的数据操作，基于ActiveRecord思想</td></tr><tr><td>hutool-dfa</td><td>基于DFA模型的多关键字查找</td></tr><tr><td>hutool-extra</td><td>扩展模块，对第三方封装（模板引擎、邮件、Servlet、二维码、Emoji、FTP、分词等）</td></tr><tr><td>hutool-http</td><td>基于HttpUrlConnection的Http客户端封装</td></tr><tr><td>hutool-log</td><td>自动识别日志实现的日志门面</td></tr><tr><td>hutool-script</td><td>脚本执行封装，例如Javascript</td></tr><tr><td>hutool-setting</td><td>功能更强大的Setting配置文件和Properties封装</td></tr><tr><td>hutool-system</td><td>系统参数调用封装（JVM信息等）</td></tr><tr><td>hutool-json</td><td>JSON实现</td></tr><tr><td>hutool-captcha</td><td>图片验证码实现</td></tr><tr><td>hutool-poi</td><td>针对POI中Excel和Word的封装</td></tr><tr><td>hutool-socket</td><td>基于Java的NIO和AIO的Socket封装</td></tr><tr><td>hutool-jwt</td><td>JSON Web Token (JWT)封装实现</td></tr></tbody></table><p>可以根据需求对每个模块单独引入，也可以通过引入<code>hutool-all</code>方式引入所有模块，本文所使用的数据脱敏工具就是在hutool.core模块。</p><h3 id="2-3-Hutool支持的脱敏数据类型">2.3 Hutool支持的脱敏数据类型</h3><p>现阶段最新版本的Hutool支持的脱敏数据类型如下，基本覆盖了常见的敏感信息。</p><ol><li>用户id</li><li>中文姓名</li><li>身份证号</li><li>座机号</li><li>手机号</li><li>地址</li><li>电子邮件</li><li>密码</li><li>中国大陆车牌，包含普通车辆、新能源车辆</li><li>银行卡</li></ol><h2 id="3-Hutool数据脱敏实操">3. Hutool数据脱敏实操</h2><h3 id="3-1-使用Hutool工具类一行代码实现脱敏">3.1 使用Hutool工具类一行代码实现脱敏</h3><p>Hutool提供的脱敏方法如下图所示：</p><p><img src="https://s3.bitiful.net/pb01/193.webp" alt="avatar"></p><p>注意：Hutool 脱敏是通过*来代替敏感信息的，具体实现是在StrUtil.hide方法中，如果我们想要自定义隐藏符号，则可以把Hutool的源码拷出来，重新实现即可。</p><p>这里以手机号、银行卡号、身份证号、密码信息的脱敏为例，下面是对应的测试代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.DesensitizedUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Hutool实现数据脱敏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuToolDesensitizationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPhoneDesensitization</span><span class="params">()</span>&#123;</span><br><span class="line">        String phone=<span class="string">&quot;13723231234&quot;</span>;</span><br><span class="line">        System.out.println(DesensitizedUtil.mobilePhone(phone)); <span class="comment">//输出：137****1234</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBankCardDesensitization</span><span class="params">()</span>&#123;</span><br><span class="line">        String bankCard=<span class="string">&quot;6217000130008255666&quot;</span>;</span><br><span class="line">        System.out.println(DesensitizedUtil.bankCard(bankCard)); <span class="comment">//输出：6217 **** **** *** 5666</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIdCardNumDesensitization</span><span class="params">()</span>&#123;</span><br><span class="line">        String idCardNum=<span class="string">&quot;411021199901102321&quot;</span>;</span><br><span class="line">        <span class="comment">//只显示前4位和后2位</span></span><br><span class="line">        System.out.println(DesensitizedUtil.idCardNum(idCardNum,<span class="number">4</span>,<span class="number">2</span>)); <span class="comment">//输出：4110************21</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPasswordDesensitization</span><span class="params">()</span>&#123;</span><br><span class="line">        String password=<span class="string">&quot;www.jd.com_35711&quot;</span>;</span><br><span class="line">        System.out.println(DesensitizedUtil.password(password)); <span class="comment">//输出：****************</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上就是使用Hutool封装好的工具类实现数据脱敏。</p><h3 id="3-2-配合JackSon通过注解方式实现脱敏">3.2 配合JackSon通过注解方式实现脱敏</h3><p>现在有了数据脱敏工具类，如果前端需要显示数据数据的地方比较多，我们不可能在每个地方都调用一个工具类，这样就显得代码太冗余了，那我们如何通过注解的方式优雅的完成数据脱敏呢？</p><p>如果项目是基于springboot的web项目，则可以利用springboot自带的jackson自定义序列化实现。它的实现原来其实就是在json进行序列化渲染给前端时，进行脱敏。</p><p><strong>第一步：脱敏策略的枚举。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:脱敏策略枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DesensitizationTypeEnum</span> &#123;</span><br><span class="line">    <span class="comment">//自定义</span></span><br><span class="line">    MY_RULE,</span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    USER_ID,</span><br><span class="line">    <span class="comment">//中文名</span></span><br><span class="line">    CHINESE_NAME,</span><br><span class="line">    <span class="comment">//身份证号</span></span><br><span class="line">    ID_CARD,</span><br><span class="line">    <span class="comment">//座机号</span></span><br><span class="line">    FIXED_PHONE,</span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    MOBILE_PHONE,</span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    ADDRESS,</span><br><span class="line">    <span class="comment">//电子邮件</span></span><br><span class="line">    EMAIL,</span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    PASSWORD,</span><br><span class="line">    <span class="comment">//中国大陆车牌，包含普通车辆、新能源车辆</span></span><br><span class="line">    CAR_LICENSE,</span><br><span class="line">    <span class="comment">//银行卡</span></span><br><span class="line">    BANK_CARD</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面表示支持的脱敏类型。</p><p><strong>第二步：定义一个用于脱敏的 Desensitization 注解。</strong></p><ul><li>@Retention(RetentionPolicy.RUNTIME)：运行时生效。</li><li>@Target(ElementType.FIELD)：可用在字段上。</li><li>@JacksonAnnotationsInside：此注解可以点进去看一下是一个元注解，主要是用户打包其他注解一起使用。</li><li>@JsonSerialize：上面说到过，该注解的作用就是可自定义序列化，可以用在注解上，方法上，字段上，类上，运行时生效等等，根据提供的序列化类里面的重写方法实现自定义序列化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@JacksonAnnotationsInside</span></span><br><span class="line"><span class="meta">@JsonSerialize(using = DesensitizationSerialize.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Desensitization &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 脱敏数据类型，在MY_RULE的时候，startInclude和endExclude生效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DesensitizationTypeEnum <span class="title function_">type</span><span class="params">()</span> <span class="keyword">default</span> DesensitizationTypeEnum.MY_RULE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 脱敏开始位置（包含）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">startInclude</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 脱敏结束位置（不包含）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">endExclude</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：只有使用了自定义的脱敏枚举MY_RULE的时候，开始位置和结束位置才生效。</p><p><strong>第三步：创建自定的序列化类</strong></p><p>这一步是我们实现数据脱敏的关键。自定义序列化类继承 JsonSerializer，实现ContextualSerializer接口，并重写两个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义序列化类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DesensitizationSerialize</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;String&gt; <span class="keyword">implements</span> <span class="title class_">ContextualSerializer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> DesensitizationTypeEnum type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer startInclude;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer endExclude;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(String str, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="comment">// 自定义类型脱敏</span></span><br><span class="line">            <span class="keyword">case</span> MY_RULE:</span><br><span class="line">                jsonGenerator.writeString(CharSequenceUtil.hide(str, startInclude, endExclude));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// userId脱敏</span></span><br><span class="line">            <span class="keyword">case</span> USER_ID:</span><br><span class="line">                jsonGenerator.writeString(String.valueOf(DesensitizedUtil.userId()));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 中文姓名脱敏</span></span><br><span class="line">            <span class="keyword">case</span> CHINESE_NAME:</span><br><span class="line">                jsonGenerator.writeString(DesensitizedUtil.chineseName(String.valueOf(str)));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 身份证脱敏</span></span><br><span class="line">            <span class="keyword">case</span> ID_CARD:</span><br><span class="line">                jsonGenerator.writeString(DesensitizedUtil.idCardNum(String.valueOf(str), <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 固定电话脱敏</span></span><br><span class="line">            <span class="keyword">case</span> FIXED_PHONE:</span><br><span class="line">                jsonGenerator.writeString(DesensitizedUtil.fixedPhone(String.valueOf(str)));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 手机号脱敏</span></span><br><span class="line">            <span class="keyword">case</span> MOBILE_PHONE:</span><br><span class="line">                jsonGenerator.writeString(DesensitizedUtil.mobilePhone(String.valueOf(str)));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 地址脱敏</span></span><br><span class="line">            <span class="keyword">case</span> ADDRESS:</span><br><span class="line">                jsonGenerator.writeString(DesensitizedUtil.address(String.valueOf(str), <span class="number">8</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 邮箱脱敏</span></span><br><span class="line">            <span class="keyword">case</span> EMAIL:</span><br><span class="line">                jsonGenerator.writeString(DesensitizedUtil.email(String.valueOf(str)));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 密码脱敏</span></span><br><span class="line">            <span class="keyword">case</span> PASSWORD:</span><br><span class="line">                jsonGenerator.writeString(DesensitizedUtil.password(String.valueOf(str)));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 中国车牌脱敏</span></span><br><span class="line">            <span class="keyword">case</span> CAR_LICENSE:</span><br><span class="line">                jsonGenerator.writeString(DesensitizedUtil.carLicense(String.valueOf(str)));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 银行卡脱敏</span></span><br><span class="line">            <span class="keyword">case</span> BANK_CARD:</span><br><span class="line">                jsonGenerator.writeString(DesensitizedUtil.bankCard(String.valueOf(str)));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JsonSerializer&lt;?&gt; createContextual(SerializerProvider serializerProvider, BeanProperty beanProperty) <span class="keyword">throws</span> JsonMappingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanProperty != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断数据类型是否为String类型</span></span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(beanProperty.getType().getRawClass(), String.class)) &#123;</span><br><span class="line">                <span class="comment">// 获取定义的注解</span></span><br><span class="line">                <span class="type">Desensitization</span> <span class="variable">desensitization</span> <span class="operator">=</span> beanProperty.getAnnotation(Desensitization.class);</span><br><span class="line">                <span class="comment">// 为null</span></span><br><span class="line">                <span class="keyword">if</span> (desensitization == <span class="literal">null</span>) &#123;</span><br><span class="line">                    desensitization = beanProperty.getContextAnnotation(Desensitization.class);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 不为null</span></span><br><span class="line">                <span class="keyword">if</span> (desensitization != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 创建定义的序列化类的实例并且返回，入参为注解定义的type,开始位置，结束位置。</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DesensitizationSerialize</span>(desensitization.type(), desensitization.startInclude(),</span><br><span class="line">                            desensitization.endExclude());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> serializerProvider.findValueSerializer(beanProperty.getType(), beanProperty);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> serializerProvider.findNullValueSerializer(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上述三步，已经完成了通过注解实现数据脱敏了，下面我们来测试一下。</p><p>首先定义一个要测试的pojo，对应的字段加入要脱敏的策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPojo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Desensitization(type = DesensitizationTypeEnum.MOBILE_PHONE)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Desensitization(type = DesensitizationTypeEnum.PASSWORD)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Desensitization(type = DesensitizationTypeEnum.MY_RULE, startInclude = 0, endExclude = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来写一个测试的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> TestPojo <span class="title function_">testDesensitization</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TestPojo</span> <span class="variable">testPojo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestPojo</span>();</span><br><span class="line">        testPojo.setUserName(<span class="string">&quot;我是用户名&quot;</span>);</span><br><span class="line">        testPojo.setAddress(<span class="string">&quot;地球中国-北京市通州区京东总部2号楼&quot;</span>);</span><br><span class="line">        testPojo.setPhone(<span class="string">&quot;13782946666&quot;</span>);</span><br><span class="line">        testPojo.setPassword(<span class="string">&quot;sunyangwei123123123.&quot;</span>);</span><br><span class="line">        System.out.println(testPojo);</span><br><span class="line">        <span class="keyword">return</span> testPojo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s3.bitiful.net/pb01/194.webp" alt="avatar"></p><p>可以看到我们成功实现了数据脱敏。</p><h2 id="4-其他常见的数据脱敏工具推荐">4. 其他常见的数据脱敏工具推荐</h2><p>除了本文介绍的Hutool工具之外，还有一些其他的数据脱敏工具，常见脱敏方法或工具如下所示：</p><h3 id="4-1-Apache-ShardingSphere">4.1 Apache ShardingSphere</h3><p>Apache ShardingSphere下面存在一个数据脱敏模块，此模块集成的常用的数据脱敏的功能。其基本原理是对用户输入的SQL进行解析拦截，并依靠用户的脱敏配置进行SQL的改写，从而实现对原文字段的加密及加密字段的解密。最终实现对用户无感的加解密存储、查询。</p><p>具体实现方式可参考下面文章： <a href="https://jaskey.github.io/blog/2020/03/18/sharding-sphere-data-desensitization/">https://jaskey.github.io/blog/2020/03/18/sharding-sphere-data-desensitization/</a></p><h3 id="4-2-FastJSON">4.2 FastJSON</h3><p>平时开发Web项目的时候，除了默认的Spring自带的序列化工具，FastJson也是一个很常用的Spring web Restful接口序列化的工具。</p><p>FastJSON实现数据脱敏的方式主要有两种：</p><ul><li>基于注解@JSONField实现：需要自定义一个用于脱敏的序列化的类，然后在需要脱敏的字段上通过@JSONField中的serializeUsing 指定为我们自定义的序列化类型即可。</li><li>基于序列化过滤器：需要实现ValueFilter接口，重写process方法完成自定义脱敏，然后在JSON转换时使用自定义的转换策略。具体实现可参考这篇文章： <a href="https://juejin.cn/post/7067916686141161479">https://juejin.cn/post/7067916686141161479</a></li></ul><h3 id="4-3-Mybatis-mate">4.3 Mybatis-mate</h3><p>mybatisplus也提供了数据脱敏模块，mybatis-mate，不过在使用之前需要配置授权码。</p><p>配置内容如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\# Mybatis Mate 配置</span><br><span class="line">mybatis-mate:</span><br><span class="line">  cert:</span><br><span class="line">    grant: jxftsdfggggx</span><br><span class="line">    license: GKXP9r4MCJhGID/DTGigcBcLmZjb1YZGjE4GXaAoxbtGsPC20sxpEtiUr2F7Nb1ANTUekvF6Syo6DzraA4M4oacwoLVTglzfvaEfadfsd232485eLJK1QsskrSJmreMnEaNh9lsV7Lpbxy9JeGCeM0HPEbRvq8Y+8dUt5bQYLklsa3ZIBexir+4XykZY15uqn1pYIp4pEK0+aINTa57xjJNoWuBIqm7BdFIb4l1TAcPYMTsMXhF5hfMmKD2h391HxWTshJ6jbt4YqdKD167AgeoM+B+DE1jxlLjcpskY+kFs9piOS7RCcmKBBUOgX2BD/JxhR2gQ==</span><br></pre></td></tr></table></figure><p>具体实现可参考baomidou提供的如下代码： <a href="https://gitee.com/baomidou/mybatis-mate-examples">https://gitee.com/baomidou/mybatis-mate-examples</a></p><h2 id="5-总结">5. 总结</h2><p>本文主要介绍了数据脱敏的相关内容，首先介绍了数据脱敏的概念，在此基础上介绍了常用的数据脱敏规则；随后介绍了本文的重点Hutool工具及其使用方法，在此基础上进行了实操，分别演示了使用DesensitizedUtil工具类、配合Jackson通过注解的方式完成数据脱敏；最后，介绍了一些常见的数据脱敏方法，并附上了对应的教程链接供大家参考，本文内容如有不当之处，还请大家批评指正。</p><h2 id="6-参考内容">6. 参考内容</h2><p>Hutool工具官网： <a href="https://hutool.cn/docs/#/?id=%f0%9f%93%9a%e7%ae%80%e4%bb%8b">https://hutool.cn/docs/#/?id=%f0%9f%93%9a%e7%ae%80%e4%bb%8b</a></p><p>聊聊如何自定义数据脱敏： <a href="https://juejin.cn/post/7046567603971719204">https://juejin.cn/post/7046567603971719204</a></p><p>FastJSON实现数据脱敏： <a href="https://juejin.cn/post/7067916686141161479">https://juejin.cn/post/7067916686141161479</a></p><blockquote><p>作者：京东科技 孙扬威</p><p>来源：京东云开发者社区</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池</title>
      <link href="/2024/02/16/2024-2-16-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2024/02/16/2024-2-16-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库连接池">数据库连接池</h2><h3 id="为什么需要连接池">为什么需要连接池</h3><p>当一个数据库操作任务到来时，程序需要和数据库建立连接，进行三次握手、数据库用户验证，然后执行SQL语句，最后用户退出、四次挥手关闭连接。每次任务都执行这样的流程，那么整个流程中，真正有效而且变化的只有<code>执行SQL</code>语句这一步骤，而且每次建立连接、用户验证、关闭连接都耗费时间。</p><p>因此，考虑能不能将连接只创建一次，然后复用长连接执行 SQL 语句呢？这需要<strong>池化技术</strong>。</p><p>池化技术可以减少资源对象的创建次数，提高程序的响应性能，特别是对高并发场景下的性能提升非常明显。<br>适合使用池化技术缓存的资源对象具有如下特点：</p><ul><li>对象创建时间长</li><li>对象占用资源多</li><li>对象创建后可以重复使用</li></ul><h3 id="数据库连接池-2">数据库连接池</h3><p>数据库连接池是程序启动时建立一定数量的数据库连接，并将这些连接组成一个连接池，当程序需要用到连接去进行数据库操作的时候,直接从连接池中获取一个连接对象使用，使用完毕后，将连接对象归还给连接池。</p><p><strong>优点</strong>:<br>（1）资源复用。避免了频繁的创建、释放连接引起的性能开销，减少系统消耗，增进系统运行环境的稳定（减少内存碎片和数据库临时线程/进程数量）。<br>（2）更快的系统响应速度。数据库连接池初始化完成后，直接利用现有可用连接，避免了从数据库连接初始化和释放过程的开销，从而缩减了系统整体响应时间。<br>（3）统一的连接管理，避免数据库连接泄漏。数据库连接池实现中，可根据预先的连接占用超时设定，强制收回被占用连接。从而避免了常规数据库连接操作中可能出现的资源泄露。</p><h4 id="关键参数-以HikariCP为例">关键参数(以HikariCP为例)</h4><ol><li><code>connectionTimeout</code>：客户端等待池中连接的最大事件（毫秒），超时则会抛出 SQLException，最低可接受时间为 250ms，默认值为30000ms</li><li><code>maximumPoolSize</code>：连接池中的最大连接数。默认为 10</li><li><code>minimumIdle</code>：控制 HikariCP 中维护的最小空闲连接数。当空闲连接数小于 minimumIdle 并且池中的总连接数少于 maximumPoolSize 时，HikariCP 将添加其他连接直到 maximumPoolSize。为了获得最佳性能和对峰值需求的响应能力建议不要设置此值。 默认值与 maximumPoolSize 相同</li><li><code>idleTimeout</code>：池中连接保持空闲状态的最长时间，只有在定义的minimumIdle 小于maximumPoolSize时生效，允许的最小时间为 10000ms,默认为 600000ms.当你配置了minimumIdle 且它的值还和maximumPoolSize不同的时候，就相当于告诉HikariCP，你至少得给我创建minimumIdle 多的连接备着。但是当你的系统忙的把minimumIdle 个备着的连接都拿走使用时，此时再问HikariCP索要，它就得给你创建多于minimumIdle 的连接，除非有连接还回来，否则我就得一直给你创建新的，直到达到上限——maximumPoolSize。但是，当你的系统过了忙碌期，闲下来的时候，多创建出来的那些连接，HikariCP就得抽空给干掉，因为它只需要保留minimumIdle 个就好了，多了浪费。此时这个idleTimeout参数就有用了，它就是用来告诉HikariCP，多出来的这些连接，多长时间没再被使用，你就可以干掉了。</li><li><code>connectionTestQuery</code>: 用来测试连接是否可用的 SQL 查询，HikariCP 默认会使用 <code>SELECT 1</code> 语句进行测试，如果设置为null，则不会进行测试。</li><li><code>maxLifetime</code>: <strong>最有可能出现坑的参数</strong>.池中连接的最大生命周期，默认值为1800000ms，即30分钟。如果设置为0，表示存活时间无限大。如果不等于0且小于30秒则会被重置回30分钟。如果设置了maxLifetime，则HikariCP给池中创建的每个连接，都会定时检测，不管这个连接上一次是什么时候使用的，只要在检测时它没在使用中，就会被淘汰。注意，这就是maxLifetime参数难以被理解的原因——哪怕是一个刚用完归还的连接，不幸碰巧赶上检测了，只能说永别——使得这个参数背后的逻辑显得非常不合理。但经过搜索,<code>作者的想法是</code>:一个连接即使一直能用，也不应该一直存在下去，应该定时的关闭（哪怕一天关一次），好让数据库服务器那边清理掉一些浪费的资源。所以这才是maxLifetime最根本存在的原因。</li></ol><h4 id="连接数设置为多少才合适">连接数设置为多少才合适</h4><ol><li>经验公式，连接数=（核心数*2）+有效磁盘数。</li></ol><p>假如服务器CPU是i7的8核，那么连接池连接数大小为 8∗2+1=9 。这仅仅是一个经验公式，具体的还要和线程池数量以及具体业务结合在一起。</p><ol start="2"><li>IO密集型任务</li></ol><p>如果任务整体上是一个IO密集型的任务。在处理一个请求的过程中（处理一个任务），总共耗时100+5=105ms，而其中只有5ms是用于计算操作的（消耗cpu），另外的100ms等待io响应，CPU利用率为5/(100+5)。</p><p>使用线程池是为了尽量提高CPU的利用率，减少对CPU资源的浪费，假设以100%的CPU利用率来说，要达到100%的CPU利用率，对于一个CPU就要设置其利用率的倒数个数的线程数，也即1/(5/(100+5))=21，4个CPU的话就乘以4，即84，这个时候线程池要设置84个线程数，然后连接池也是设置为84个连接。</p><h4 id="连接池和长连接的区别">连接池和长连接的区别</h4><ul><li><p>长连接是一些驱动、驱动架构、ORM(即Object-Relational Mapping)工具的特性，由驱动来保持连接句柄的打开，以便后续的数据库操作可以重用连接，从而减少数据库的连接开销。</p></li><li><p>连接池是应用服务器的组件，它可以通过参数来配置连接数、连接检查、连接的生命周期等。</p></li><li><p>连接池内的连接，其实就是长连接。</p></li></ul><h3 id="如何简单实现一个连接池">如何简单实现一个连接池</h3><p>实现一个连接池，最关键的是<strong>均衡</strong>和<strong>保活</strong>.连接池的“池”通过队列数据结构进行实现，队列先进先出的特性保证了使用连接的均衡性，每一条连接都可以均匀的被使用到.连接池对外提供get()和free()两个API，get()用于从队首“出队”获取一条可用连接，free()用于将使用完的连接从对尾“入队”释放到队列中。</p><p>业务代码在低峰时会降低get()动作，所以连接池中的连接在长时间不用时会导致失效，此时保活线程在监测到get()的使用频率较低时，会模拟业务程序调用get()获取连接后发送心跳包，然后再通过free()将被保活的连接放回队列中，达到连接池中所有连接保活的目的。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>美赛C题学习</title>
      <link href="/2024/01/24/2024-1-MCM/"/>
      <url>/2024/01/24/2024-1-MCM/</url>
      
        <content type="html"><![CDATA[<h2 id="美赛C题学习">美赛C题学习</h2><p>如果自建模型,可以参考2218931的4.2.1,2218931的论文描述值得学习,最后的信也比较有特色</p><p>跟现实相结合也是很重要的点,最好能有案例支撑,虽然说在C题中不常见,但其实有的地方也可以加上</p><h3 id="时间序列预测">时间序列预测</h3><p>可以关注一些特殊的时间节点，比如节假日，季节性，节假日和季节性都有可能影响时间序列的预测。</p><ul><li><p>ARIMA:经典时间序列预测模型，使用自回归积分移动平均模型，该模型可以对时间序列数据进行预测，并且可以对时间序列数据进行平滑处理,可以参考下2203120的写法。</p></li><li><p>GRU:时间序列预测,和LSTM类似，但是GRU的更新门和遗忘门合并为更新门，输入门和输出门合并为输出门，所以GRU的参数更少,更便于计算.</p></li><li><p>SIR:SIR模型，用于传染病传播的预测，S表示易感者，I表示感染者，R表示康复者,也适用于某些突然爆火的事件。</p></li><li><p>Prophet:时间序列预测，使用Facebook的Prophet算法，该算法基于时间序列历史数据，拟合出一个趋势和季节性，然后预测未来的时间序列。参考2301192,2200688</p></li><li><p>卡尔曼滤波算法</p></li><li><p>LightGBM:LightGBM是一种基于梯度提升决策树的机器学习算法，它具有高效性、可扩展性和可解释性等特点。在时间序列预测任务中，LightGBM可以有效地处理大量数据，并生成可解释的预测结果。</p></li><li><p>XGBoost:XGBoost是一种基于梯度提升决策树的机器学习算法，它具有高效性、可扩展性和可解释性等特点。</p></li><li><p>LSTM:长短期记忆网络（Long Short-Term Memory，LSTM）是一种循环神经网络（RNN）的变体，它能够有效地处理时间序列数据。LSTM通过引入记忆单元和门机制，能够有效地捕捉和传递时间序列数据中的长期依赖关系。可与参考下2204883</p></li><li><p>ARIMA-LSTM:这两个模型结合感觉还是不错的,2212336,把LSTM换成GRU也是差不多的效果</p></li><li><p>ARIMA-SVM:来自2100948,可能参考了<code>https://blog.csdn.net/u014356002/article/details/53163684</code>,SVM和LSTM都用来捕捉非线性部分,但在预测上SVM不如LSTM,但SVM可解释性相对更好</p></li></ul><p>多模型堆叠:可以参考一下这里面的<code>https://blog.csdn.net/keypig_zz/article/details/82819558</code>,这个图和流程可以参考</p><h3 id="非时间序列预测">非时间序列预测</h3><ul><li><p>GSRF:网格搜索的随机森林算法</p></li><li><p>维特比算法:主要用于解决隐马尔可夫模型（HMM）中的状态序列预测问题。在语音识别、自然语言处理、生物信息学等领域中，维特比算法被用于根据观测序列预测最有可能的状态序列。</p></li><li><p>MMOE模型:是一种多任务学习架构，旨在提高模型在处理多个相关任务时的性能。该模型由谷歌在2018年的KDD会议上提出，并因其有效的参数共享机制和任务特定处理能力而被业界广泛采用。来源于2307946,其用于预测尝试次数百分比.</p></li><li><p>多元线性回归:用于预测多个自变量对因变量的影响。</p></li></ul><h3 id="聚类算法-分类">聚类算法(分类)</h3><ul><li><p>k-means:k-means聚类算法,人为决定初始聚类中心,较为主观,可改用k-means++,或者使用Gap Statistic方法确定最佳k值</p></li><li><p>k-means++:k-means++聚类算法</p></li><li><p>DBSCAN:DBSCAN聚类算法</p></li><li><p>BIRCH:BIRCH聚类算法</p></li><li><p>GMM:GMM聚类算法,聚类效果比kmeans好,如果后续要降维,可以考虑使用kmeans++</p></li><li><p>谱聚类:谱聚类算法</p></li><li><p>层次聚类:层次聚类算法</p></li><li><p>R-CNN家族: R-CNN , Fast R-CNN , Faster R-CNN , Mask R-CNN,物体检测算法,在2106138中用于分类大黄蜂和胡蜂</p></li></ul><h3 id="其他">其他</h3><p><strong>数据处理流程建议参考一下2208834</strong></p><p>模型最好都要有<strong>训练集</strong>和<strong>测试集</strong>，训练集和测试集最好要分开，训练集和测试集最好要随机打乱，这样模型才能有更好的效果。测试集可以从已有数据中随机抽取一部分作为测试集，也可以从训练集中划分一部分作为测试集。训练集和测试集的比例可以根据实际情况进行调整，一般来说，训练集的比例要大于测试集的比例。</p><p><strong>影响因子</strong>最好保留5-8个，如果影响因子太多，模型可能会过拟合，如果影响因子太少，模型可能会欠拟合。最好是从多个影响因子中挑选出来.</p><p>步骤如下:</p><ol><li>数据收集、数据清洗、数据标准化</li><li>相关性分析，分析各因子之间的相关性。高度相关的因子可能代表相似的信息，可以考虑合并或只保留一个。</li><li>使用PCA(主成分分析法)进行降维，选择最重要的5-8个影响因子.</li><li>确定权重:使用层次分析法、熵权法、主成分分析法、变异系数法等方法确定权重.</li></ol><p><strong>白噪声测试</strong>: 白噪声测试是用来检验时间序列数据是否为随机游走的，如果时间序列数据是随机游走的，那么它应该具有均匀的分布。白噪声测试可以使用ADF(Augmented Dickey-Fuller)检验方法来判断时间序列数据是否为随机游走。如果ADF检验结果的p值小于0.05，那么时间序列数据就不是随机游走的。</p><ul><li><p><strong>ADF测试</strong>:是一种统计检验方法，用于确定一个时间序列数据是否平稳。在经济学和金融学中，时间序列数据的平稳性是一个重要的概念，因为它有助于预测未来的经济活动。如果一个时间序列是平稳的，那么它的统计特性（如均值、方差和自协方差）不会随时间变化。如果数据平稳,可以使用原始数据,如果不平稳,则要对数据进行处理.具体方案如下:</p><ol><li><p>差分：如果数据是非平稳的，通过对数据进行一阶或更高阶的差分，可以去除数据中的趋势、季节性或其他时间动态特征，从而使数据变得平稳。差分是一种常见的时间序列平稳化技术。</p></li><li><p>季节性调整：对于具有季节性波动的数据，可以通过季节性调整来去除季节性因素，使数据更加平稳。这可以通过移动平均、季节性分解时间序列预测（STL）等方法来实现。</p></li><li><p>漂白：漂白是一种统计技术，通过它可以从时间序列中去除长期趋势和季节性成分，只保留短期波动。这可以通过自回归模型（如AR模型）来实现。</p></li><li><p>Box-Cox变换：这是一种用于处理非正态分布数据的技术，通过变换可以将数据转换为正态分布，有时这也有助于提高数据的平稳性。</p></li><li><p>处理异常值：检查数据中是否存在异常值或离群值，并考虑是否需要将其删除或进行某种形式的调整。</p></li><li><p>使用更高级的模型：有时，使用更高级的经济计量模型（如向量自回归模型VAR或状态空间模型）可以处理非平稳数据，而不需要直接对数据进行平稳化处理。</p></li></ol></li><li><p>CTGAN:生成对抗网络，可用于拓展数据集(谨慎使用)</p></li><li><p><strong>OpenFE</strong>:是一种功能强大的特征自动生成算法OpenFE，它能有效地生成有用的特征，提高模型学习性能(GBDT相关模型和SOAT神经网络).</p></li><li><p>Bootstrap方法:通过重复抽样和计算统计量来估计总体的分布,可以用来进行假设检验,置信区间构建,稳健性分析等。论文2309397对预测结果使用Bootstrap方法构建置信区间,取置信水平95%时的结果作为预测区间。</p></li></ul><p>图建议15-20张,表建议3-8个,总数20-25最佳</p><p>使用比较高级的模型最好画上原理图,模型进行结合也最好画图表示一下.如果建立的模型比较简单,那就得在分析和图像上下功夫.每一个task的分析至少得有一张图</p><p>可以用伪代码去展示一些不好用图表展示的行业性的算法,例如2200401的交易策略</p><ul><li>NSGS-II:多目标优化算法,参考2218743</li></ul><p>简单的图也可以画得不一样,比如折线图,我们可以将最值标记出来,将异常值标记出等等</p><p><img src="https://pb01.s3.bitiful.net/143.png" alt="avatar"></p><p>词云可视化也可以作为一大亮点</p><p>21年的可以看下2107079</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MCM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm install 报错 npm notice Beginning October 4, 2021, all connections to the npm registry - including for package installation - must use TLS 1.2 or higher.</title>
      <link href="/2024/01/11/2024-1-11-npm%E6%8A%A5%E9%94%99/"/>
      <url>/2024/01/11/2024-1-11-npm%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h3 id="npm-install-报错-npm-notice-Beginning-October-4-2021-all-connections-to-the-npm-registry-including-for-package-installation-must-use-TLS-1-2-or-higher-You-are-currently-using-plaintext-http-to-connect-Please-visit-the-GitHub-blog-for-more-information-https-github-blog-2021-08-23-npm-registry-deprecating-tls-1-0-tls-1-1">npm install 报错:npm notice Beginning October 4, 2021, all connections to the npm registry - including for package installation - must use TLS 1.2 or higher. You are currently using plaintext http to connect. Please visit the GitHub blog for more information: <a href="https://github.blog/2021-08-23-npm-registry-deprecating-tls-1-0-tls-1-1/">https://github.blog/2021-08-23-npm-registry-deprecating-tls-1-0-tls-1-1/</a></h3><p><img src="https://pb01.s3.bitiful.net/203.webp" alt="avatar"></p><p>首先进入所给的网址查看:<br><img src="https://pb01.s3.bitiful.net/204.webp" alt="avatar"></p><p>查看自己的Node.js和npm版本:<br><img src="https://pb01.s3.bitiful.net/205.webp" alt="avatar"></p><p>发现版本够高(Node.js最好在18及以上, npm在7及以上)</p><p>执行所给代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g https://tls-test.npmjs.com/tls-test-1.0.0.tgz</span><br></pre></td></tr></table></figure><p>重新执行npm install,发现依旧报错</p><p>查看设置的npm源:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>发现源是<code>http://registry.npmjs.org</code>, 没用https协议, 进行换源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure><p>再次执行npm install, 成功</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西电数据库openGauss平台练习</title>
      <link href="/2023/12/29/openguass/"/>
      <url>/2023/12/29/openguass/</url>
      
        <content type="html"><![CDATA[<h3 id="西电数据库openGauss平台练习">西电数据库openGauss平台练习</h3><p><em><strong>仅记录平台标注中等难度及以上的题目</strong></em></p><p><strong>试卷编号:41</strong><br><strong>试卷名称:gongsi</strong></p><p><strong>条件</strong>:<br>公司数据库有如下关系模式： 员工employee（员工号eno，员工姓名ename，员工年龄eage，所在部门号dno，工资salary，工作日期work）； 部门depart(部门号dno，部门名称dname，部门经理员工号dman)。</p><h4 id="题目3：查询每个部门的部门号、员工平均工资。">题目3：查询每个部门的部门号、员工平均工资。</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dno, <span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> dno</span><br></pre></td></tr></table></figure><h4 id="题目4：查询员工的中位数工资。">题目4：查询员工的中位数工资。</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> salary <span class="keyword">from</span> employee a </span><br><span class="line"><span class="keyword">where</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee b <span class="keyword">where</span> b.salary<span class="operator">&gt;=</span>a.salary) <span class="operator">-</span></span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee b <span class="keyword">where</span> b.salary<span class="operator">&lt;=</span>a.salary)</span><br><span class="line"><span class="keyword">between</span> <span class="number">-1</span> <span class="keyword">and</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这道题比较<strong>容易踩坑</strong>的地方是题目没有说明它对<strong>中位数的定义</strong>,这里是将多个中位数返回回去,而不用求平均,而网上大多数类似的需求都是只能返回一个中位数,所以有多个中位数是都进行了求平均操作,但这里是没有的,所以需要特别注意</p><h4 id="题目5：查询每个部门的部门号，员工中位数工资。">题目5：查询每个部门的部门号，员工中位数工资。</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> dno,salary <span class="keyword">from</span> employee a </span><br><span class="line"><span class="keyword">where</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee b <span class="keyword">where</span> b.dno<span class="operator">=</span>a.dno <span class="keyword">and</span> b.salary<span class="operator">&gt;=</span>a.salary) <span class="operator">-</span></span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee b <span class="keyword">where</span> b.dno<span class="operator">=</span>a.dno <span class="keyword">and</span> b.salary<span class="operator">&lt;=</span>a.salary)</span><br><span class="line"><span class="keyword">between</span> <span class="number">-1</span> <span class="keyword">and</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="题目6：员工表设计不符合1NF">题目6：员工表设计不符合1NF</h4><p>工作日期包含多个日期，中间用逗号,分隔，<strong>前后可能有多个空格</strong>，如2022-11-11,2022-11-12,2018-08-01，查询每个员工的员工号，姓名和工作日期，其中工作日期要求将原有日期拆分为单个日期。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> eno,ename,<span class="built_in">trim</span>(regexp_split_to_table(work,<span class="string">&#x27;,&#x27;</span>)) <span class="keyword">as</span> work <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><p>这道题个人觉得是这套练习里<strong>最难</strong>的一道了,但openGauss的regexp_split_to_table函数已经帮我们实现了<strong>行转列</strong>这个最难的点,然后trim函数去一下空格,就出来了.当然别的方法也可以做,网上一搜都有,但函数用起来就是爽🤪</p><h4 id="题目12：创建函数get-age-count-s-e-，返回年龄在-s-e-范围内的员工的人数。">题目12：创建函数get_age_count(s,e)，返回年龄在[s,e]范围内的员工的人数。</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> get_age_count(s <span class="type">integer</span>, e <span class="type">integer</span>)  </span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">integer</span> <span class="keyword">AS</span> $total$  </span><br><span class="line"><span class="keyword">declare</span>  </span><br><span class="line">    total <span class="type">integer</span>;  </span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">   <span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> total <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> eage<span class="operator">&gt;=</span>s <span class="keyword">AND</span> eage<span class="operator">&lt;=</span>e;  </span><br><span class="line">   <span class="keyword">RETURN</span> total;  </span><br><span class="line"><span class="keyword">END</span>;  </span><br><span class="line">$total$ <span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure><p>这道题就要仔细看下openGauss的手册,我一开始按MySQL函数的格式写就错了,后来仔细看了下手册才发现openGauss自定义函数是<strong>PostgreSQL格式</strong>的,这点要注意.</p>]]></content>
      
      
      <categories>
          
          <category> xdu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openGauss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引一</title>
      <link href="/2023/12/29/MySQL%E7%B4%A2%E5%BC%95/"/>
      <url>/2023/12/29/MySQL%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL索引一">MySQL索引一</h2><h3 id="什么是索引">什么是索引</h3><p>索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的<strong>数据结构</strong>。</p><p>索引的作用就相当于书的目录。打个比方: 我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。</p><p>在 MySQL 中，无论是 Innodb 还是 MyIsam，都使用了 <strong>B+树</strong>作为索引结构。</p><h3 id="索引的优缺点">索引的优缺点</h3><p>优点:</p><ul><li>提高数据检索效率，降低数据库IO成本</li><li>降低数据排序成本，降低CPU消耗</li><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</li></ul><p>缺点:</p><ul><li>索引需要占物理空间</li><li>索引需要定期维护，增删改数据时需要维护索引，降低数据写入效率</li></ul><h3 id="索引底层数据结构选型">索引底层数据结构选型</h3><h4 id="哈希表">哈希表</h4><p>哈希表是一种以键-值(key-value)存储数据的结构，只要输入待查找值即 key，就可以找到其对应的值即 value。因此哈希表可以快速检索数据（接近 O（1））。</p><p>为何能够通过 key 快速取出 value 呢？ 原因在于 <strong>哈希算法</strong>（也叫散列算法）。通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。</p><p><img src="https://pb01.s3.bitiful.net/141.png" alt="avatar"></p><p>但是, 哈希表有一个很大的缺点: 就是哈希冲突。</p><p>哈希冲突: 两个不同的 key 通过哈希算法得到了相同的结果，这种情况我们称为哈希冲突。</p><p>通常情况下，我们常用的解决办法是 <code>链地址法</code>。链地址法就是将哈希冲突数据存放在链表中。就比如 JDK1.8 之前 HashMap 就是通过链地址法来解决哈希冲突的。不过，JDK1.8 以后HashMap为了减少链表过长的时候搜索时间过长引入了红黑树。</p><p>为了减少 Hash 冲突的发生，一个好的哈希函数应该“均匀地”将数据分布在整个可能的哈希值集合中。</p><p>MySQL 的 InnoDB 存储引擎不直接支持常规的哈希索引，但是，InnoDB 存储引擎中存在一种特殊的<code>“自适应哈希索引”</code>（Adaptive Hash Index），自适应哈希索引并不是传统意义上的纯哈希索引，而是结合了 B+Tree 和哈希索引的特点，以便更好地适应实际应用中的数据访问模式和性能需求。自适应哈希索引的每个哈希桶实际上是一个小型的 B+Tree 结构。这个 B+Tree 结构可以存储多个键值对，而不仅仅是一个键。这有助于减少哈希冲突链的长度，提高了索引的效率。</p><p>既然哈希表这么快，为什么 MySQL 没有使用其作为索引的数据结构呢？ 主要是因为 Hash 索引<strong>不支持顺序和范围查询</strong>。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，<strong>每次 IO 只能取一个</strong>。</p><h4 id="二叉查找树">二叉查找树</h4><p>二叉查找树（BST）是一种特殊的二叉树，它具有以下几个特点：</p><ul><li>左子树所有节点的值均小于根节点的值。</li><li>右子树所有节点的值均大于根节点的值。</li><li>左子树和右子树都是二叉查找树。</li></ul><p>当二叉查找树是平衡的时候，也就是树的每个节点的左右子树深度相差不超过 1 的时候，查询的时间复杂度为 O(log2(N))，具有比较高的效率。然而，当二叉查找树不平衡时，例如在最坏情况下（有序插入节点），树会退化成线性链表（也被称为斜树），导致查询效率急剧下降，时间复杂退化为 O（N）。</p><p>二叉查找树可以支持顺序和范围查询，但是，二叉查找树有一个很大的缺点: 就是平衡性不好。这就导致其不适合作为 MySQL 底层索引的数据结构。</p><h4 id="平衡二叉树-AVL树">平衡二叉树(AVL树)</h4><p>AVL 树的特点是保证任何节点的左右子树高度之差不超过 1，因此也被称为高度平衡二叉树，它的查找、插入和删除在平均和最坏情况下的时间复杂度都是 O(logn)。</p><p>AVL 树采用了旋转操作来保持平衡。主要有四种旋转操作：LL 旋转、RR 旋转、LR 旋转和 RL 旋转。其中 LL 旋转和 RR 旋转分别用于处理左左和右右失衡，而 LR 旋转和 RL 旋转则用于处理左右和右左失衡。</p><p>由于 AVL 树需要频繁地进行旋转操作来保持平衡，因此会有较大的计算开销进而降低了查询性能。并且，在使用 AVL 树时，每个树节点仅存储一个数据，而每次进行磁盘 IO 时只能读取一个节点的数据，如果需要查询的数据分布在多个节点上，那么就需要进行多次磁盘 IO。 磁盘 IO 是一项耗时的操作，在设计数据库索引时，我们需要优先考虑如何最大限度地减少磁盘 IO 操作的次数。</p><p>实际应用中，AVL 树使用的并不多。</p><h4 id="红黑树">红黑树</h4><p>红黑树是一种自平衡二叉查找树，通过在插入和删除节点时进行颜色变换和旋转操作，使得树始终保持平衡状态，它具有以下特点：</p><ol><li>每个节点非红即黑；</li><li>根节点总是黑色的；</li><li>每个叶子节点都是黑色的空节点（NIL 节点）；</li><li>如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；</li><li>从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。</li></ol><p><img src="https://pb01.s3.bitiful.net/142.png" alt="avatar"></p><p>和 AVL 树不同的是，红黑树并不追求严格的平衡，而是大致的平衡。正因如此，红黑树的<strong>查询效率稍有下降</strong>，因为红黑树的平衡性相对较弱，可能会导致树的高度较高，这可能会导致一些数据需要进行多次磁盘 IO 操作才能查询到，这也是 MySQL 没有选择红黑树的主要原因。也正因如此，红黑树的<strong>插入和删除操作效率大大提高了</strong>，因为红黑树在插入和删除节点时只需进行 O(1) 次数的旋转和变色操作，即可保持基本平衡状态，而不需要像 AVL 树一样进行 O(logn) 次数的旋转操作。</p><p>红黑树的应用还是比较广泛的，TreeMap、TreeSet 以及 JDK1.8 的 HashMap 底层都用到了红黑树。对于数据在内存中的这种情况来说，红黑树的表现是非常优异的。</p><h4 id="B-树-B-树">B 树&amp; B+树</h4><p>B 树也称 B-树,全称为 多路平衡查找树 ，B+ 树是 B 树的一种变体。目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。</p><p><strong>B 树&amp; B+树两者有何异同呢？</strong></p><ul><li>B 树的所有节点既存放键(key) 也存放数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</li><li>B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</li><li>B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</li><li>在 B 树中进行范围查询时，首先找到要查找的下限，然后对 B 树进行中序遍历，直到找到查找的上限；而 B+树的范围查询，只需要对链表进行遍历即可。</li></ul><p>综上，B+树与 B 树相比，具备更少的 IO 次数、更稳定的查询效率和更适于范围查询这些优势。</p><h3 id="索引类型总结">索引类型总结</h3><p><strong>分类</strong></p><ul><li>主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。</li><li>普通索引：仅加速查询。</li><li>唯一索引：加速查询 + 列值唯一（可以有 NULL）。</li><li>覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。</li><li>联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。</li><li>全文索引：对文本的内容进行分词，进行搜索。目前只有 <code>CHAR</code>、<code>VARCHAR</code> ，<code>TEXT</code> 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 <code>ElasticSearch</code> 代替。</li></ul><p>MySQL 8.x 中实现的索引新特性：</p><ul><li>隐藏索引：也称为不可见索引，不会被优化器使用，但是仍然需要维护，通常会软删除和灰度发布的场景中使用。主键不能设置为隐藏（包括显式设置或隐式设置）。</li><li>降序索引：之前的版本就支持通过 desc 来指定索引为降序，但实际上创建的仍然是常规的升序索引。直到 MySQL 8.x 版本才开始真正支持降序索引。另外，在 MySQL 8.x 版本中，不再对 GROUP BY 语句进行隐式排序。</li><li>函数索引：从 MySQL 8.0.13 版本开始支持在索引中使用函数或者表达式的值，也就是在索引中可以包含函数或者表达式。</li></ul><h4 id="主键索引">主键索引</h4><p><code>not null</code> +<code>unique</code></p><p>在 MySQL 的 InnoDB 的表中，当没有显示的指定表的主键时，InnoDB 会自动先检查表中是否有唯一索引且不允许存在 null 值的字段，如果有，则选择该字段为默认的主键，否则 InnoDB 将会自动创建一个 6Byte 的自增主键。</p><h4 id="二级索引">二级索引</h4><p>二级索引的叶子节点存储的是主键值。即通过二级索引可以定位主键.唯一索引，普通索引，前缀索引等索引属于二级索引</p><ul><li>普通索引:仅加速查询。</li><li>唯一索引:列值唯一,但对NULL不生效</li><li>前缀索引:为了节省空间，对字符串类型的字段，可以只索引字段的前几个字符。</li><li>全文索引:基于分词,常用于大文本搜索关键词,match和against关键字</li></ul><h4 id="聚簇索引">聚簇索引</h4><p>索引结构和数据一起放的索引</p><h4 id="非聚簇索引">非聚簇索引</h4><p>索引结构和数据分开存放的索引,如二级索引</p><h3 id="为什么主键索引最好设置为自增">为什么主键索引最好设置为自增?</h3><p>设置自增后,插入数据时,插入速度更快,因为每次插入数据时,数据库不用移动其他数据,只需要移动指针即可.</p><p>如果我们使用非自增主键，由于每次插入主键的索引值都是随机的，因此每次插入新的数据时，就可能会插入到现有数据页中间的某个位置，这将不得不移动其它数据来满足新数据的插入，甚至需要从一个页面复制数据到另外一个页面，我们通常将这种情况称为<strong>页分裂</strong>。页分裂还有可能会造成大量的内存碎片，导致索引结构不紧凑，从而影响查询效率</p><p><strong>非自增主键</strong>:</p><p><img src="https://pb01.s3.bitiful.net/yefen.webp" alt="avatar"><br><strong>自增主键</strong>:</p><p><img src="https://pb01.s3.bitiful.net/newyefen.webp" alt="avatar"></p><h3 id="问什么索引最好设置为-NOT-NULL">问什么索引最好设置为 NOT NULL</h3><p>Mysql难以优化引用可空列查询，它会使索引、索引统计和值更加复杂。可空列需要更多的存储空间，还需要mysql内部进行特殊处理。可空列被索引后，每条记录都需要一个额外的字节，还能导致MYisam表中固定大小的索引变成可变大小的索引。            ————《高性能MySQL》</p><h3 id="References">References</h3><ul><li>javaguide</li><li>小林coding<br>…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL规范</title>
      <link href="/2023/12/24/MySQL%E8%A7%84%E8%8C%83/"/>
      <url>/2023/12/24/MySQL%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL规范">MySQL规范</h2><h3 id="数据库命名规范">数据库命名规范</h3><ul><li>所有数据库对象名称必须使用小写字母并用下划线分割</li><li>所有数据库对象名称禁止使用 MySQL 保留关键字（如果表名中包含关键字查询时，需要将其用单引号括起来）</li><li>数据库对象的命名要能做到见名识意，并且最好不要超过 32 个字符</li><li>临时库表必须以 tmp_ 为前缀并以日期为后缀，备份表必须以 bak_ 为前缀并以日期 (时间戳) 为后缀</li><li>所有存储相同数据的列名和列类型必须一致（一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）</li></ul><h3 id="数据库基本设计规范">数据库基本设计规范</h3><h4 id="所有表必须使用-InnoDB-存储引擎">所有表必须使用 InnoDB 存储引擎</h4><p>没有特殊要求（即 InnoDB 无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用 InnoDB 存储引擎</p><h4 id="数据库和表的字符集统一使用-UTF8">数据库和表的字符集统一使用 UTF8</h4><p>兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效，如果数据库中有存储 emoji 表情的需要，字符集需要采用 utf8mb4 字符集。</p><h4 id="所有表和字段都需要添加注释">所有表和字段都需要添加注释</h4><p>使用 comment 从句添加表和列的备注，从一开始就进行数据字典的维护</p><h4 id="尽量控制单表数据量的大小，建议控制在-500-万以内">尽量控制单表数据量的大小，建议控制在 500 万以内</h4><p>500 万并不是 MySQL 数据库的限制，只是经验值，如果单表超过 500 万后，查询效率会急剧下降.过大会造成修改表结构，备份，恢复都会有很大的问题。</p><p>可以用历史数据归档（应用于日志数据），分库分表（应用于业务数据）等手段来控制数据量大小</p><h4 id="谨慎使用-MySQL-分区表">谨慎使用 MySQL 分区表</h4><p>分区表在物理上表现为多个文件，在逻辑上表现为一个表；</p><p>谨慎选择分区键，跨分区查询效率可能更低；</p><p>建议采用物理分表的方式管理大数据。</p><h4 id="经常一起使用的列放到一个表中">经常一起使用的列放到一个表中</h4><p>避免更多的关联操作。</p><h4 id="禁止在表中建立预留字段">禁止在表中建立预留字段</h4><ul><li>预留字段的命名很难做到见名识义。</li><li>预留字段无法确认存储的数据类型，所以无法选择合适的类型。</li><li>对预留字段类型的修改，会对表进行锁定。</li></ul><h4 id="禁止在数据库中存储文件这类大的二进制数据">禁止在数据库中存储文件这类大的二进制数据</h4><p>在数据库中存储文件会严重影响数据库性能，消耗过多存储空间。</p><p>文件这类大的二进制数据通常存储于文件服务器，数据库只存储文件地址信息</p><h4 id="不要被数据库范式所束缚">不要被数据库范式所束缚</h4><p>一般来说，设计关系数据库时需要满足第三范式，但为了满足第三范式，我们可能会拆分出多张表。而在进行查询时需要对多张表进行关联查询，有时为了提高查询效率，会降低范式的要求，在表中保存一定的冗余信息，也叫做反范式。但要注意反范式一定要适度。</p><h4 id="禁止在线上做数据库压力测试">禁止在线上做数据库压力测试</h4><h4 id="禁止从开发环境-测试环境直接连接生产环境数据库">禁止从开发环境,测试环境直接连接生产环境数据库</h4><h3 id="数据库字段设计规范">数据库字段设计规范</h3><h4 id="优先选择符合存储需要的最小的数据类型">优先选择符合存储需要的最小的数据类型</h4><p>存储字节越小，占用也就空间越小，性能也越好。</p><p><strong>a.某些字符串可以转换成数字类型存储</strong>,比如可以将 IP 地址转换成整型数据。数字是连续的，性能更好，占用空间也更小。</p><p>MySQL 提供了两个方法来处理 ip 地址</p><ul><li><strong>INET_ATON()</strong>：把 ip 转为无符号整型 (4-8 位)</li><li><strong>INET_NTOA()</strong> :把整型的 ip 转为地址插入数据前，先用 INET_ATON() 把 ip 地址转为整型，显示数据时，使用 INET_NTOA() 把整型的 ip 地址转为地址显示即可。</li></ul><p><strong>b.对于非负型的数据 (如自增 ID,整型 IP，年龄) 来说,要优先使用无符号整型来存储</strong>。无符号相对于有符号可以多出一倍的存储空间</p><p><strong>c.小数值类型（比如年龄、状态表示如 0/1）优先使用 TINYINT 类型。</strong></p><h4 id="避免使用-TEXT-BLOB-类型">避免使用 TEXT,BLOB 类型</h4><p>比如 TEXT 类型的字段，如果查询时没有使用索引，会变成全表扫描，性能极差</p><h4 id="避免使用ENUM类型">避免使用ENUM类型</h4><ul><li>修改 ENUM 值需要使用 ALTER 语句；</li><li>ENUM 类型的 ORDER BY 操作效率低，需要额外操作；</li><li>ENUM 数据类型存在一些限制比如建议不要使用数值作为 ENUM 的枚举值。</li></ul><h4 id="尽可能把所有列定义为-NOT-NULL">尽可能把所有列定义为 NOT NULL</h4><ul><li>索引 NULL 列需要额外的空间来保存，所以要占用更多的空间；</li><li>进行比较和计算时要对 NULL 值做特别的处理。</li></ul><h4 id="一定不要用字符串存储日期">一定不要用字符串存储日期</h4><p>对于日期类型来说， 一定不要用字符串存储日期。可以考虑 DATETIME、TIMESTAMP 和 数值型时间戳。</p><p>这三种种方式都有各自的优势，根据实际场景选择最合适的才是王道。下面再对这三种方式做一个简单的对比，以供大家实际开发中选择正确的存放时间的数据类型：</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">存储空间</th><th style="text-align:center">日期格式</th><th style="text-align:center">日期范围</th><th style="text-align:center">是否带时区信息</th></tr></thead><tbody><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">5~8 字节</td><td style="text-align:center">YYYY-MM-DD hh:mm:ss[.fraction]</td><td style="text-align:center">1000-01-01 00:00:00[.000000] ～ 9999-12-31 23:59:59[.999999]</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">TIMESTAMP</td><td style="text-align:center">4~7 字节</td><td style="text-align:center">YYYY-MM-DD hh:mm:ss[.fraction]</td><td style="text-align:center">1970-01-01 00:00:01[.000000] ～ 2038-01-19 03:14:07[.999999]</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">数值型时间戳</td><td style="text-align:center">4 字节</td><td style="text-align:center">全数字如 1578707612</td><td style="text-align:center">1970-01-01 00:00:01 之后的时间</td><td style="text-align:center">否</td></tr></tbody></table><h4 id="同财务相关的金额类数据必须使用-decimal-类型">同财务相关的金额类数据必须使用 decimal 类型</h4><p><strong>非精准浮点：float,double</strong><br><strong>精准浮点：decimal</strong></p><p>decimal 类型为精准浮点数，在<strong>计算时不会丢失精度</strong>。占用空间由定义的宽度决定，每 4 个字节可以存储 9 位数字，并且小数点要占用一个字节。</p><p>并且，decimal 可用于存储比 bigint 更大的整型数据不过， 由于 decimal 需要额外的空间和计算开销，应该尽量只在需要对数据进行精确计算时才使用 decimal 。</p><h4 id="单表不要包含过多字段">单表不要包含过多字段</h4><h3 id="索引设计规范">索引设计规范</h3><h4 id="限制每张表上的索引数量-建议单张表索引不超过-5-个">限制每张表上的索引数量,建议单张表索引不超过 5 个</h4><p>索引并不是越多越好！索引可以提高效率同样可以降低效率。</p><p>索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。</p><p>因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。</p><h4 id="禁止使用全文索引">禁止使用全文索引</h4><p>全文索引不适用于 OLTP(联机事务处理) 场景。</p><h4 id="禁止给表中的每一列都建立单独的索引">禁止给表中的每一列都建立单独的索引</h4><p>5.6 版本之前，一个 sql 只能使用到一个表中的一个索引，5.6 以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好。</p><h4 id="每个-InnoDB-表必须有个主键">每个 InnoDB 表必须有个主键</h4><p>InnoDB 是一种索引组织表：数据的存储的逻辑顺序和索引的顺序是相同的。每个表都可以有多个索引，但是表的存储顺序只能有一种。</p><p>InnoDB 是按照主键索引的顺序来组织表的:</p><ul><li>不要使用更新频繁的列作为主键，不使用多列主键（相当于联合索引）</li><li>不要使用 UUID,MD5,HASH,字符串列作为主键（无法保证数据的顺序增长）</li><li>主键建议使用自增 ID 值</li></ul><h4 id="常见索引列建议常见索引列建议">常见索引列建议常见索引列建议</h4><ul><li>出现在 SELECT、UPDATE、DELETE 语句的 WHERE 从句中的列</li><li>包含在 ORDER BY、GROUP BY、DISTINCT 中的字段</li><li>并不要将符合 1 和 2 中的字段的列都建立一个索引， 通常将 1、2 中的字段建立联合索引效果更好</li><li>多表 join 的关联列</li></ul><h4 id="如何选择索引列的顺序">如何选择索引列的顺序</h4><p>建立索引的目的是：希望通过索引进行数据查找，减少随机 IO，增加查询性能 ，索引能过滤出越少的数据，则从磁盘中读入的数据也就越少。</p><ul><li>区分度最高的放在联合索引的最左侧（区分度=列中不同值的数量/列的总行数）</li><li>尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO 性能也就越好）</li><li>使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）</li></ul><h4 id="避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）">避免建立冗余索引和重复索引（增加了查询优化器生成执行计划的时间）</h4><ul><li>重复索引示例：primary key(id)、index(id)、unique index(id)</li><li>冗余索引示例：index(a,b,c)、index(a,b)、index(a)</li></ul><h4 id="对于频繁的查询优先考虑使用覆盖索引">对于频繁的查询优先考虑使用覆盖索引</h4><blockquote><p>覆盖索引：就是包含了所有查询字段 (where,select,order by,group by 包含的字段) 的索引</p></blockquote><p>覆盖索引的好处：</p><ul><li><strong>避免 InnoDB 表进行索引的二次查询:</strong> InnoDB 是以聚集索引的顺序来存储的，对于 InnoDB 来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询 ，减少了 IO 操作，提升了查询效率。</li><li><strong>可以把随机 IO 变成顺序 IO 加快查询效率:</strong> 由于覆盖索引是按键值的顺序存储的，对于 IO 密集型的范围查找来说，对比随机从磁盘读取每一行的数据 IO 要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的 IO 转变成索引查找的顺序 IO。</li></ul><h4 id="索引-SET-规范">索引 SET 规范</h4><p>尽量避免使用外键约束</p><ul><li>不建议使用外键约束（foreign key），但一定要在表与表之间的关联键上建立索引</li><li>外键可用于保证数据的参照完整性，但建议在业务端实现</li><li>外键会影响父表和子表的写操作从而降低性能</li></ul><h3 id="数据库-SQL-开发规范">数据库 SQL 开发规范</h3><h4 id="尽量不在数据库做运算，复杂运算需移到业务应用里完成">尽量不在数据库做运算，复杂运算需移到业务应用里完成</h4><h4 id="优化对性能影响较大的-SQL-语句">优化对性能影响较大的 SQL 语句</h4><h4 id="充分利用表上已经存在的索引">充分利用表上已经存在的索引</h4><p>避免使用双%号的查询条件。如：<code>a like '%123%'</code>，（如果无前置%,只有后置%，是可以用到列上的索引的）</p><p>一个 SQL 只能利用到复合索引中的一列进行范围查询。如：有 a,b,c 列的联合索引，在查询条件中有 a 列的范围查询，则在 b,c 列上的索引将不会被用到。</p><p>在定义联合索引时，如果 a 列要用到范围查找的话，就要把 a 列放到联合索引的右侧，使用 left join 或 not exists 来优化 not in 操作，因为 not in 也通常会使用索引失效。</p><h4 id="禁止使用-SELECT-必须使用-SELECT-字段列表-查询">禁止使用 SELECT * 必须使用 SELECT &lt;字段列表&gt; 查询</h4><p><code>SELECT *</code> 会消耗更多的 CPU。<br><code>SELECT *</code> 无用字段增加网络带宽资源消耗，增加数据传输时间，尤其是大字段（如 varchar、blob、text）。<br><code>SELECT *</code> 无法使用 MySQL 优化器覆盖索引的优化（基于 MySQL 优化器的“覆盖索引”策略又是速度极快，效率极高，业界极为推荐的查询优化方式）<br><code>SELECT &lt;字段列表&gt;</code> 可减少表结构变更带来的影响</p><h4 id="禁止使用不含字段列表的-INSERT-语句">禁止使用不含字段列表的 INSERT 语句</h4><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span> (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>);</span><br></pre></td></tr></table></figure><p>应使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t(c1,c2,c3) <span class="keyword">values</span> (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="建议使用预编译语句进行数据库操作">建议使用预编译语句进行数据库操作</h4><ul><li>预编译语句可以重复使用这些计划，减少 SQL 编译所需要的时间，还可以解决动态 SQL 所带来的 SQL 注入的问题。</li><li>只传参数，比传递 SQL 语句更高效。</li><li>相同语句可以一次解析，多次使用，提高处理效率。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">prepare</span> ins <span class="keyword">from</span> <span class="string">&#x27;insert into t select ?,?&#x27;</span>;  #预编译</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@a</span><span class="operator">=</span><span class="number">999</span>,<span class="variable">@b</span><span class="operator">=</span><span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">execute</span> ins <span class="keyword">using</span> <span class="variable">@a</span>,<span class="variable">@b</span>; #传参使用预编译语句</span><br></pre></td></tr></table></figure><h4 id="避免数据类型的隐式转换">避免数据类型的隐式转换</h4><h4 id="避免使用子查询，可以把子查询优化为-join-操作">避免使用子查询，可以把子查询优化为 join 操作</h4><p>通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时,才可以把子查询转化为关联查询进行优化。</p><p><strong>子查询性能差的原因：</strong> 子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。</p><h4 id="避免使用-JOIN-关联太多的表">避免使用 JOIN 关联太多的表</h4><p>会占用大量内存,有可能出现内存溢出</p><h4 id="减少同数据库的交互次数">减少同数据库的交互次数</h4><p>数据库更适合处理批量操作，合并多个相同的操作到一起，可以提高处理效率。</p><h4 id="对应同一列进行-or-判断时，使用-in-代替-or">对应同一列进行 or 判断时，使用 in 代替 or</h4><p>in 的值不要超过 500 个，in 操作可以更有效的利用索引，or 大多数情况下很少能利用到索引。</p><h4 id="禁止使用-order-by-rand-进行随机排序">禁止使用 order by rand() 进行随机排序</h4><p>order by rand() 会把表中所有符合条件的数据装载到内存中，然后在内存中对所有数据根据随机生成的值进行排序，并且可能会对每一行都生成一个随机值，如果满足条件的数据集非常大，就会消耗大量的 CPU 和 IO 及内存资源。推荐在程序中获取一个随机值，然后从数据库中获取数据的方式。</p><h4 id="WHERE-从句中禁止对列进行函数转换和计算">WHERE 从句中禁止对列进行函数转换和计算</h4><p>对列进行函数转换或计算时会导致无法使用索引</p><p><strong>不推荐：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span> <span class="type">date</span>(create_time)<span class="operator">=</span><span class="string">&#x27;20190101&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>推荐：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span> create_time <span class="operator">&gt;=</span> <span class="string">&#x27;20190101&#x27;</span> <span class="keyword">and</span> create_time <span class="operator">&lt;</span> <span class="string">&#x27;20190102&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="在明显不会有重复值时使用-UNION-ALL-而不是-UNION">在明显不会有重复值时使用 UNION ALL 而不是 UNION</h4><ul><li>UNION 会把两个结果集的所有数据放到临时表中后再进行去重操作</li><li>UNION ALL 不会再对结果集进行去重操作</li></ul><h4 id="拆分复杂的大-SQL-为多个小-SQL">拆分复杂的大 SQL 为多个小 SQL</h4><ul><li>大 SQL 逻辑上比较复杂，需要占用大量 CPU 进行计算的 SQL</li><li>MySQL 中，一个 SQL 只能使用一个 CPU 进行计算</li><li>SQL 拆分后可以通过并行执行来提高处理效率</li></ul><h4 id="程序连接不同的数据库使用不同的账号，禁止跨库查询">程序连接不同的数据库使用不同的账号，禁止跨库查询</h4><ul><li>为数据库迁移和分库分表留出余地</li><li>降低业务耦合度</li><li>避免权限过大而产生的安全风险</li></ul><h3 id="数据库操作行为规范">数据库操作行为规范</h3><h4 id="超-100-万行的批量写-UPDATE-DELETE-INSERT-操作-要分批多次进行操作">超 100 万行的批量写 (UPDATE,DELETE,INSERT) 操作,要分批多次进行操作</h4><p><strong>大批量操作可能会造成严重的主从延迟</strong></p><p>主从环境中,大批量操作可能会造成严重的主从延迟，大批量的写操作一般都需要执行一定长的时间，而只有当主库上执行完成后，才会在其他从库上执行，所以会造成主库与从库长时间的延迟情况</p><p><strong>binlog 日志为 row 格式时会产生大量的日志</strong></p><p>大批量写操作会产生大量日志，特别是对于 row 格式二进制数据而言，由于在 row 格式中会记录每一行数据的修改，我们一次修改的数据越多，产生的日志量也就会越多，日志的传输和恢复所需要的时间也就越长，这也是造成主从延迟的一个原因</p><p><strong>避免产生大事务操作</strong></p><p>大批量修改数据，一定是在一个事务中进行的，这就会造成表中大批量数据进行锁定，从而导致大量的阻塞，阻塞会对 MySQL 的性能产生非常大的影响。特别是长时间的阻塞会占满所有数据库的可用连接，这会使生产环境中的其他应用无法连接到数据库，因此一定要注意大批量写操作要进行分批</p><h4 id="对于大表使用-pt-online-schema-change-修改表结构">对于大表使用 pt-online-schema-change 修改表结构</h4><ul><li>避免大表修改产生的主从延迟</li><li>避免在对表字段进行修改时进行锁表</li></ul><p>对大表数据结构的修改一定要谨慎，会造成严重的锁表操作，尤其是生产环境，是不能容忍的。</p><p><code>pt-online-schema-change</code> 它会首先建立一个与原表结构相同的新表，并且在新表上进行表结构的修改，然后再把原表中的数据复制到新表中，并在原表中增加一些触发器。把原表中新增的数据也复制到新表中，在行所有数据复制完成之后，把新表命名成原表，并把原来的表删除掉。把原来一个 DDL 操作，分解成多个小的批次进行。</p><h4 id="禁止为程序使用的账号赋予-super-权限">禁止为程序使用的账号赋予 super 权限</h4><ul><li>当达到最大连接数限制时，还运行 1 个有 super 权限的用户连接</li><li>super 权限只能留给 DBA 处理问题的账号使用</li></ul><h4 id="对于程序连接数据库账号-遵循权限最小原则">对于程序连接数据库账号,遵循权限最小原则</h4><ul><li>程序使用数据库账号只能在一个 DB 下使用，不准跨库</li><li>程序使用的账号原则上不准有 drop 权限</li></ul><p><strong>Reference:</strong><br><a href="https://javaguide.cn/database/mysql/mysql-high-performance-optimization-specification-recommendations.html" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">MySQL高性能优化规范建议总结</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL锁</title>
      <link href="/2023/12/21/MySQL%E9%94%81/"/>
      <url>/2023/12/21/MySQL%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL锁">MySQL锁</h3><h4 id="表级锁和行级锁">表级锁和行级锁</h4><p><strong>MyISAM</strong> (MySQL5.5版本以前默认的存储引擎) 仅仅支持表级锁，一锁就锁整张表，这在并发写的情况下性非常差。</p><p><strong>InnoDB</strong> (MySQL5.5版本后默认的存储引擎) 不光支持表级锁，还支持行级锁，默认为行级锁。行级锁的粒度更小，仅对相关的记录上锁即可（对一行或者多行记录加锁），所以对于并发写入操作来说， InnoDB 的性能更高。</p><p><strong>表级锁和行级锁对比：</strong></p><ul><li><p><strong>表级锁</strong>： MySQL 中锁定粒度最大的一种锁（全局锁除外），是针对非索引字段加的锁，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。不过，触发锁冲突的概率最高，高并发下效率极低。表级锁和存储引擎无关，MyISAM 和 InnoDB 引擎都支持表级锁。</p></li><li><p><strong>行级锁</strong>： MySQL 中锁的粒度最小的一种锁，是 针对索引字段加的锁 ，只针对当前操作的行记录进行加锁。 行级锁能大大减少数据库操作的冲突。<strong>其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁</strong>。行级锁和存储引擎有关，是在存储引擎层面实现的。</p></li></ul><p>InnoDB 的行锁是针对索引字段加的锁，表级锁是针对非索引字段加的锁。当我们执行 UPDATE、DELETE 语句时，如果 WHERE条件中字段没有命中唯一索引或者索引失效的话，就会导致扫描全表对表中的所有行记录进行加锁。</p><h4 id="InnoDB-有哪几类行锁？">InnoDB 有哪几类行锁？</h4><p>MySQL InnoDB 支持三种行锁定方式：</p><ul><li><strong>记录锁</strong>（Record Lock）：属于单个行记录上的锁。</li><li><strong>间隙锁</strong>（Gap Lock）：锁定一个范围，不包括记录本身。</li></ul><p>假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。</p><p><img src="https://pb01.s3.bitiful.net/gap.drawio.webp" alt="avatar"></p><p>间隙锁之间是兼容的，即两个事务可以同时持有包含共同间隙范围的间隙锁，并不存在互斥关系，因为间隙锁的目的是防止插入幻影记录而提出的。</p><ul><li><strong>临键锁</strong>（Next-Key Lock）：Record Lock+Gap Lock，锁定一个范围，包含记录本身，主要目的是为了解决幻读问题。记录锁只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁。</li></ul><p>Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</p><p>假设，表中有一个范围 id 为(3，5] 的 next-key lock，那么其他事务即不能插入 id = 4 记录，也不能修改 id = 5 这条记录。</p><p><img src="https://pb01.s3.bitiful.net/nextkey.drawio.webp" alt="avatar"></p><p>next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。</p><p>虽然相同范围的间隙锁是多个事务相互兼容的，但对于记录锁，我们是要考虑 X 型与 S 型关系，X 型的记录锁与 X 型的记录锁是冲突的。</p><p>在 InnoDB 默认的隔离级别 <code>REPEATABLE-READ</code>(可重复读) 下，行锁默认使用的是 <code>Next-Key Lock</code>。但是，如果操作的索引是唯一索引或主键，InnoDB 会对 <code>Next-Key Lock</code> 进行优化，将其降级为 <code>Record Lock</code>，即仅锁住索引本身，而不是范围。</p><h4 id="意向锁">意向锁</h4><p>如果需要用到表锁的话，如何判断表中的记录没有行锁呢(<strong>表锁和行锁是满足读读共享、读写互斥、写写互斥的</strong>)，一行一行遍历肯定是不行，性能太差。我们需要用做意向锁来快速判断是否可以对某个表使用表锁。</p><p>是一种表级锁。</p><p>意向锁是一种表级锁,分为两种：</p><ul><li><strong>意向共享锁</strong>（IS）：事务有意向对表中的某些记录加共享锁（S 锁），加共享锁前必须先取得该表的 IS 锁</li><li><strong>意向排他锁</strong>（IX）：事务有意向对表中的某些记录加排他锁（X 锁），加排他锁之前必须先取得该表的 IX 锁</li></ul><p>意向锁是由数据引擎自己维护的，用户无法手动操作意向锁，在为数据行加共享/排他锁之前，InooDB 会先获取该数据行所在在数据表的对应意向锁。</p><p>意向锁之间是互相兼容的:</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">IS 锁</th><th style="text-align:center">IX 锁</th></tr></thead><tbody><tr><td style="text-align:center">IS 锁</td><td style="text-align:center">兼容</td><td style="text-align:center">兼容</td></tr><tr><td style="text-align:center">IX 锁</td><td style="text-align:center">兼容</td><td style="text-align:center">兼容</td></tr></tbody></table><p>意向锁和共享锁和排它锁互斥（这里指的是表级别的共享锁和排他锁，意向锁不会与行级的共享锁和排他锁互斥）。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">IS 锁</th><th style="text-align:center">IX 锁</th></tr></thead><tbody><tr><td style="text-align:center">S 锁</td><td style="text-align:center">兼容</td><td style="text-align:center">互斥</td></tr><tr><td style="text-align:center">X 锁</td><td style="text-align:center">互斥</td><td style="text-align:center">互斥</td></tr></tbody></table><h4 id="自增锁">自增锁</h4><p>设置<code>AUTO_INCREMENT</code>的列都会涉及到自增锁.</p><p>AUTO-INC 锁是特殊的表锁机制，锁不是在一个事务提交后才释放，而是在执行完插入语句后就会立即释放。</p><p>在插入数据时，会加一个表级别的 AUTO-INC 锁，然后为被 AUTO_INCREMENT 修饰的字段赋值(递增的值)，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。</p><p>那么，一个事务在持有 AUTO-INC 锁的过程中，其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 AUTO_INCREMENT 修饰的字段的值是连续递增的。</p><p>但是， AUTO-INC 锁再对大量数据进行插入的时候，会影响插入性能，因为另一个事务中的插入会被阻塞。</p><p>因此， 在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种轻量级的锁来实现自增。</p><p>一样也是在插入数据的时候，会为被 AUTO_INCREMENT 修饰的字段加上轻量级锁，然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁。</p><p>InnoDB 存储引擎提供了个 <code>innodb_autoinc_lock_mode</code> 的系统变量，是用来控制选择用 AUTO-INC 锁，还是轻量级的锁。</p><table><thead><tr><th style="text-align:center">innodb_autoinc_lock_mode</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">传统模式</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">连续模式（MySQL 8.0 之前默认）</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">交错模式(MySQL 8.0 之后默认)</td></tr></tbody></table><ul><li>当 <strong>innodb_autoinc_lock_mode = 0</strong>，就采用 AUTO-INC 锁，语句执行结束后才释放锁；</li><li>当 <strong>innodb_autoinc_lock_mode = 2</strong>，就采用轻量级锁，申请自增主键后就释放锁，并不需要等语句执行后才释放。</li><li>当 <strong>innodb_autoinc_lock_mode = 1</strong>：<ul><li>普通 insert 语句，自增锁在申请之后就马上释放；</li><li>类似 insert … select 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；</li></ul></li></ul><h4 id="References">References</h4><ul><li>javaguide</li><li>小林coding<br>…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务</title>
      <link href="/2023/12/21/MySQL%E4%BA%8B%E5%8A%A1/"/>
      <url>/2023/12/21/MySQL%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL事务">MySQL事务</h3><h4 id="什么是事务">什么是事务</h4><p><strong>事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p><p>事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账 1000 元，这个转账会涉及到两个关键操作，这两个操作必须都成功或者都失败。</p><ol><li>将小明的余额减少 1000 元</li><li>将小红的余额增加 1000 元</li></ol><p>事务会把这两个操作看成逻辑上的一个整体，这个整体包含的操作要么都成功，要么都要失败。这样就不会出现小明余额减少而小红的余额却并没有增加的情况。</p><h4 id="数据库事务">数据库事务</h4><p>大多数情况下，我们在谈论事务的时候，如果没有特指分布式事务，往往指的就是数据库事务。</p><p>数据库事务在我们日常开发中接触的最多了。如果你的项目属于单体架构的话，你接触到的往往就是数据库事务了。那数据库事务有什么作用呢？</p><p>简单来说，数据库事务可以保证多个对数据库的操作（也就是 SQL 语句）构成一个逻辑上的整体。构成这个逻辑上的整体的这些数据库操作遵循：<strong>要么全部执行成功,要么全部不执行</strong> 。</p><p><img src="https://pb01.s3.bitiful.net/140.png" alt="avatar"></p><h4 id="事务的-ACID-特性">事务的 ACID 特性</h4><p>ACID，是指关系型数据库事务正确执行的四个基本要素的缩写。包含：</p><ul><li>原子性（Atomicity）</li><li>一致性（Consistency）</li><li>隔离性（Isolation）</li><li>持久性（Durability）</li></ul><h5 id="原子性（Atomicity）">原子性（Atomicity）</h5><p><strong>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</strong></p><p>事务的原子性是事务<strong>最核心</strong>的特性。</p><h5 id="一致性（Consistency）">一致性（Consistency）</h5><p><strong>一致性是指事务执行前后，数据保持一致。</strong></p><p>比如小明给小红转账，转账前后小明和小红的余额的变化大小是相同的。</p><h5 id="隔离性（Isolation）">隔离性（Isolation）</h5><p><strong>隔离性是指多个用户并发访问数据库时，一个用户的事务不能被其他用户的事务所干扰，多个并发事务之间要相互隔离。</strong></p><p>比如，一个用户正在操作数据库 A，其他用户不能操作数据库 A。</p><h5 id="持久性（Durability）">持久性（Durability）</h5><p><strong>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其影响。</strong></p><p>比如，一个事务对数据库中数据的改变已经写入磁盘，即使数据库发生故障，这个事务对数据库中数据的改变也不应该丢失。</p><p>🌈 这里要额外补充一点：只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 <strong>A、I、D 是手段，C 是目的</strong>！</p><h4 id="MySQL事务操作">MySQL事务操作</h4><p>mysql中事务<strong>默认是隐式事务</strong>，执行insert、update、delete操作的时候，数据库自动开启事务、提交或回滚事务。</p><p>是否开启隐式事务是由变量autocommit控制的。</p><h4 id="隐式事务">隐式事务</h4><p>事务自动开启、提交或回滚，比如insert、update、delete语句，事务的开启、提交或回滚由mysql内部自动控制的。</p><p>查看变量autocommit是否开启了自动提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;autocommit&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> autocommit   <span class="operator">|</span> <span class="keyword">ON</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="显式事务">显式事务</h4><p>显式事务需要手动开启、提交或回滚，由开发者自己控制。</p><p><strong>方式1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 设置不自动提交事务</span><br><span class="line"><span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"># 执行事务操作</span><br><span class="line">SQL1,SQL2...</span><br><span class="line">## 提交或回滚</span><br><span class="line"><span class="keyword">commit</span><span class="operator">|</span><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><p><strong>方式2</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 开启一个事务</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"># 执行事务操作</span><br><span class="line">SQL1,SQL2...</span><br><span class="line">## 提交或回滚</span><br><span class="line"><span class="keyword">commit</span><span class="operator">|</span><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><h4 id="并发事务带来了哪些问题">并发事务带来了哪些问题?</h4><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能会导致很多问题。</p><h5 id="脏读（Dirty-read）">脏读（Dirty read）</h5><p>一个事务读取数据并且对数据进行了修改，这个修改对其他事务来说是可见的，即使当前事务没有提交。这时另外一个事务读取了这个还未提交的数据，但第一个事务突然回滚，导致数据并没有被提交到数据库，那第二个事务读取到的就是脏数据，这也就是脏读的由来。</p><h5 id="丢失修改（Lost-to-modify）">丢失修改（Lost to modify）</h5><p>在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。</p><h5 id="不可重复读（Unrepeatable-read）">不可重复读（Unrepeatable read）</h5><p>指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p><h5 id="幻读（Phantom-read）">幻读（Phantom read）</h5><p>幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现有它本来没有的数据，就好像发生了幻觉一样，所以称为幻读。</p><p><strong>不可重复读和幻读有什么区别？</strong></p><p><code>不可重复读侧重于修改，幻读侧重于新增或删除。</code></p><h4 id="并发事务的控制方式有哪些？">并发事务的控制方式有哪些？</h4><p>MySQL 中并发事务的控制方式无非就两种：<strong>锁 和 MVCC</strong>。锁可以看作是悲观控制的模式，多版本并发控制（MVCC）可以看作是乐观控制的模式。</p><p>锁控制方式下会通过锁来显示控制共享资源而不是通过调度手段，MySQL中主要是通过<strong>读写锁</strong>来实现并发控制。</p><ul><li><strong>共享锁（S 锁）</strong>：又称读锁，事务在读取记录的时候获取共享锁，允许多个事务同时获取（锁兼容）。</li><li><strong>排他锁（X 锁）</strong>：又称写锁/独占锁，事务在修改记录的时候获取排他锁，不允许多个事务同时获取。如果一个记录已经被加了排他锁，那其他事务不能再对这条记录加任何类型的锁（锁不兼容）。</li></ul><p>读写锁可以做到读读并行，但是无法做到写读、写写并行。另外，根据根据锁粒度的不同，又被分为表级锁 和 行级锁。InnoDB(MySQL5.5版本后的默认存储引擎) 不光支持表级锁，还支持行级锁，默认为行级锁。</p><p>行级锁的粒度更小，仅对相关的记录上锁即可（对一行或者多行记录加锁），所以对于并发写入操作来说， InnoDB 的性能更高。不论是表级锁还是行级锁，都存在共享锁和排他锁。</p><p>MVCC 是多版本并发控制方法，即对一份数据会存储多个版本，通过事务的可见性来保证事务能看到自己应该看到的版本。通常会有一个全局的版本分配器来为每一行数据设置版本号，版本号是唯一的。</p><p>MVCC 在 MySQL 中实现所依赖的手段主要是: <strong>隐藏字段、read view、undo log</strong>。</p><ul><li>undo log : undo log 用于记录某行数据的多个版本的数据。</li><li>read view 和 隐藏字段 : 用来判断当前版本数据的可见性。</li></ul><h4 id="隔离级别">隔离级别</h4><p>SQL 标准定义了四个隔离级别：</p><ul><li>READ-UNCOMMITTED(读取未提交) ：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li><li>READ-COMMITTED(读取已提交) ：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</li><li>REPEATABLE-READ(可重复读) ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</li><li>SERIALIZABLE(可串行化) ：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li></ul><p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong>。我们可以通过<code>SELECT @@tx_isolation;</code>命令来查看，MySQL 8.0 该命令改为<code>SELECT @@transaction_isolation;</code></p><p>从上面对 SQL 标准定义了四个隔离级别的介绍可以看出，标准的 SQL 隔离级别定义里，REPEATABLE-READ(可重复读)是不可以防止幻读的。</p><p>但是！InnoDB 实现的 REPEATABLE-READ 隔离级别其实是可以解决幻读问题发生的，主要有下面两种情况：</p><ul><li><strong>快照读</strong>：由 MVCC 机制来保证不出现幻读。</li><li><strong>当前读</strong>：使用 Next-Key Lock 进行加锁来保证不出现幻读，Next-Key Lock 是行锁（Record Lock）和间隙锁（Gap Lock）的结合，行锁只能锁住已经存在的行，为了避免插入新行，需要依赖间隙锁。</li></ul><p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 READ-COMMITTED ，但是你要知道的是 InnoDB 存储引擎默认使用 REPEATABLE-READ 并不会有任何性能损失。</p><p>InnoDB 存储引擎在分布式事务的情况下一般会用到 SERIALIZABLE 隔离级别。</p><p>接下来，举个具体的例子来说明这四种隔离级别，有一张账户余额表，里面有一条账户余额为 100 万的记录。然后有两个并发的事务，事务 A 只负责查询余额，事务 B 则会将我的余额改成 200 万，下面是按照时间顺序执行两个事务的行为：</p><p><img src="https://pb01.s3.bitiful.net/45.webp" alt="avatar"></p><p>在不同隔离级别下，事务 A 执行过程中查询到的余额可能会不同：</p><ul><li><p><code>「读未提交」</code>:事务 B 修改余额后，虽然没有提交事务，但是此时的余额已经可以被事务 A 看见了，于是事务 A 中余额 V1 查询的值是 200 万，余额 V2、V3 自然也是 200 万了；</p></li><li><p><code>「读已提交」</code>:事务 B 修改余额后，因为没有提交事务，所以事务 A 中余额 V1 的值还是 100 万，等事务 B 提交完后，最新的余额数据才能被事务 A 看见，因此额 V2、V3 都是 200 万；</p></li><li><p><code>「可重复读」</code>:事务 A 只能看见启动事务时的数据，所以余额 V1、余额 V2 的值都是 100 万，当事务 A 提交事务后，就能看见最新的余额数据了，所以余额 V3 的值是 200 万；</p></li><li><p><code>「串行化」</code>:事务 B 在执行将余额 100 万修改为 200 万时，由于此前事务 A 执行了读操作，这样就发生了读写冲突，于是就会被锁住，直到事务 A 提交后，事务 B 才可以继续执行，所以从 A 的角度看，余额 V1、V2 的值是 100 万，余额 V3 的值是 200万。</p></li></ul><p>这四种隔离级别具体是如何实现的呢？</p><p>对于<code>「读未提交」</code>隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；</p><p>对于<code>「串行化」</code>隔离级别的事务来说，通过加读写锁的方式来避免并行访问；</p><p>对于<code>「读已提交」</code>和<code>「可重复读」</code>隔离级别的事务来说，它们是通过 <code>Read View</code> 来实现的，它们的区别<strong>在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。「读已提交」隔离级别是在每个语句执行前都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View</strong>。</p><p>注意，执行了 begin/start transaction 命令后，并不代表事务启动了。只有在执行这个命令后，执行了第一条 SQL 语句，才是事务真正启动的时机；</p><h4 id="References">References</h4><ul><li>javaguide</li><li>小林coding<br>…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载机制</title>
      <link href="/2023/12/21/JVM4/"/>
      <url>/2023/12/21/JVM4/</url>
      
        <content type="html"><![CDATA[<h2 id="类加载机制">类加载机制</h2><p>现在，我们已经了解了字节码文件的结构，以及JVM如何对内存进行管理，现在只剩下最后一个谜团等待解开了，也就是我们的类字节码文件到底是如何加载到内存中的，加载之后又会做什么事情。</p><h3 id="类加载过程">类加载过程</h3><p>首先，要加载一个类，一定是出于某种目的的，比如我们要运行我们的Java程序，那么就必须要加载主类才能运行主类中的主方法，又或是我们需要加载数据库驱动，那么可以通过反射来将对应的数据库驱动类进行加载。</p><p>所以，一般在这些情况下，如果类没有被加载，那么会被自动加载：</p><ul><li>使用new关键字创建对象时</li><li>使用某个类的静态成员（包括方法和字段）的时候（当然，final类型的静态字段有可能在编译的时候被放到了当前类的常量池中，这种情况下是不会触发自动加载的）</li><li>使用反射对类信息进行获取的时候（之前的数据库驱动就是这样的）</li><li>加载一个类的子类时</li><li>加载接口的实现类，且接口带有<code>default</code>的方法默认实现时</li></ul><p>比如这种情况，那么需要用到另一个类中的成员字段，所以就必须将另一个类加载之后才能访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Test.str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我被初始化了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我被调用了!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们就演示一个不太好理解的情况，我们现在将静态成员变量修改为final类型的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Test.str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我被初始化了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我被调用了!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在主方法中，我们使用了Test类的静态成员变量，并且此静态成员变量是一个final类型的，也就是说不可能再发生改变。那么各位觉得，Test类会像上面一样被初始化吗？</p><p>按照正常逻辑来说，既然要用到其他类中的字段，那么肯定需要加载其他类，但是这里我们结果发现，并没有对Test类进行加载，那么这是为什么呢？</p><p>在编译阶段，整个<code>Test.str</code>直接被替换为了对应的字符串（因为final不可能发生改变的，编译就会进行优化，直接来个字符串比你去加载类在获取快得多不是吗，反正结果都一样），所以说编译之后，实际上跟Test类半毛钱关系都没有了。</p><p>所以说，当你在某些情况下疑惑为什么类加载了或是没有加载时，可以从字节码指令的角度去进行分析，一般情况下，只要遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>、<code>invokestatic</code>这些指令时，都会进行类加载</p><p>好了，聊完了类的加载触发条件，我们接着来看一下类的详细加载流程。</p><p><img src="https://pb01.s3.bitiful.net/136.png" alt="avatar"></p><p>首先类的生命周期一共有7个阶段，而首当其冲的就是<strong>加载</strong>。</p><p>加载阶段需要获取此类的二进制数据流，比如我们要从硬盘中读取一个class文件，那么就可以通过<strong>文件输入流</strong>来获取类文件的<code>byte[]（二进制字节流）</code>，也可以是其他各种途径获取，甚至网络传输并加载一个类也不是不可以。然后交给类加载器进行加载（类加载器可以是JDK内置的，也可以是开发者自己撸的）类的所有信息会被加载到方法区中，并且在堆内存中会生成一个代表当前类的Class类对象（那么思考一下，同一个Class文件加载的类，是唯一存在的吗？），我们可以通过此对象以及反射机制来访问这个类的各种信息。</p><p>每个 Java 类都有一个引用指向加载它的 ClassLoader(类加载器)。不过，数组类不是通过 ClassLoader 创建的（即<strong>不会导致类加载</strong>），而是 JVM 在需要的时候自动创建的，数组类通过getClassLoader()方法获取 ClassLoader 的时候和该数组的元素类型的 ClassLoader 是一致的。</p><p>一个非数组类的加载阶段（加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，这一步我们可以去完成还可以自定义类加载器去控制字节流的获取方式（重写一个类加载器的 loadClass() 方法）。</p><p>加载阶段与连接阶段的部分动作(如一部分字节码文件格式验证动作)是交叉进行的，加载阶段尚未结束，连接阶段可能就已经开始了。</p><p>接着我们来看<strong>验证</strong>阶段，验证阶段相当于是对加载的类进行一次规范校验，如果说类的任何地方不符合虚拟机规范，那么这个类是不会验证通过的，如果没有验证机制，那么一旦出现危害虚拟机的操作，整个程序会出现无法预料的后果。</p><p>验证阶段主要由四个检验阶段组成：</p><ol><li>文件格式验证（Class 文件格式检查）</li><li>元数据验证（字节码语义检查）</li><li>字节码验证（程序语义检查）</li><li>符号引用验证（类的正确性检查）</li></ol><p><img src="https://pb01.s3.bitiful.net/137.png" alt="avatar"></p><p>文件格式验证这一阶段是基于该类的二进制字节流进行的，主要目的是保证输入的字节流能正确地解析并存储于方法区之内，格式上符合描述一个 Java 类型信息的要求。除了这一阶段之外，<strong>其余三个验证阶段都是基于方法区的存储结构上进行的，不会再直接读取、操作字节流了</strong>。</p><p>接下来就是<strong>准备</strong>阶段了，这个阶段会为类变量分配内存，并为一些字段设定初始值，注意是系统规定的初始值，不是我们手动指定的初始值。</p><p>再往下就是<strong>解析</strong>阶段，此阶段是将常量池内的符号引用替换为直接引用的过程，也就是说，到这个时候，所有引用变量的指向都是已经切切实实地指向了内存中的对象了。</p><p>到这里，链接过程就结束了，也就是说这个时候类基本上已经完成大部分内容的初始化了。</p><p>最后就是真正的<strong>初始化</strong>阶段了。</p><p>初始化阶段是执行初始化方法 <code>&lt;clinit&gt; ()</code>方法的过程，是类加载的最后一步，这一步 JVM 才开始真正执行类中定义的 Java 程序代码(字节码)。</p><blockquote><p>说明：<code>&lt;clinit&gt; ()</code>方法是编译之后自动生成的。</p></blockquote><hr><h3 id="类加载器-ClassLoader">类加载器(ClassLoader)</h3><p>开始介绍类加载器和双亲委派模型之前，简单回顾一下类加载过程。</p><p>类加载过程：<strong>加载-&gt;链接-&gt;初始化</strong>。<br>链接过程又可分为三步：<strong>验证-&gt;准备-&gt;解析</strong>。</p><p><img src="https://pb01.s3.bitiful.net/138.png" alt="avatar"></p><p>加载是类加载过程的第一步，主要完成下面 3 件事情：</p><ol><li>通过全类名获取定义此类的二进制字节流</li><li>将字节流所代表的静态存储结构转换为方法区的运行时数据结构</li><li>在内存中生成一个代表该类的 <code>Class</code> 对象，作为方法区这些数据的访问入口</li></ol><ul><li>类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步。</li><li>每个 Java 类都有一个引用指向加载它的 ClassLoader。</li><li>数组类不是通过 ClassLoader 创建的（数组类没有对应的二进制字节流），是由 JVM 直接生成的。</li></ul><p>简单来说，类加载器的主要作用就<strong>是加载 Java 类的字节码（ .class 文件）到 JVM 中（在内存中生成一个代表该类的 Class 对象）</strong>。 字节码可以是 Java 源程序（.java文件）经过 javac 编译得来，也可以是通过工具动态生成或者通过网络下载得来。</p><p>其实除了加载类之外，类加载器还可以加载 Java 应用所需的资源如文本、图像、配置文件、视频等等文件资源。</p><h4 id="类加载器加载规则">类加载器加载规则</h4><p>JVM 启动的时候，并不会一次性加载所有的类，而是根据需要去动态加载。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。对于已经加载的类会被放在 ClassLoader 中。</p><p>在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，<strong>对于一个类加载器来说，相同二进制名称的类只会被加载一次</strong>。</p><h4 id="类加载器总结">类加载器总结</h4><p>JVM 中内置了三个重要的 ClassLoader：</p><ol><li><strong>BootstrapClassLoader(启动类加载器)</strong>: 最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK 内部的核心类库（ <code>%JAVA_HOME%/lib</code>目录下的 <code>rt.jar</code>、<code>resources.jar</code>、<code>charsets.jar</code>等 jar 包和类）以及被 <code>-Xbootclasspath</code>参数指定的路径下的所有类。</li><li><strong>ExtensionClassLoader(扩展类加载器)</strong>: 主要负责加载 <code>%JRE_HOME%/lib/ext</code> 目录下的 jar 包和类以及被 <code>java.ext.dirs</code> 系统变量所指定的路径下的所有类。</li><li><strong>AppClassLoader(应用程序类加载器)</strong>: 面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。</li></ol><p>除了这三种类加载器之外，用户还可以加入自定义的类加载器来进行拓展，以满足自己的特殊需求。就比如说，我们可以对 Java 类的字节码（ .class 文件）进行加密，加载时再利用自定义的类加载器对其解密。</p><p><img src="https://pb01.s3.bitiful.net/139.png" alt="avatar"></p><p>除了启动类加载器是 JVM 自身的一部分之外，其他所有的类加载器都是在 JVM 外部实现的，并且全都继承自 ClassLoader抽象类。</p><p>这样做的好处是用户可以自定义类加载器，以便让应用程序自己决定如何去获取所需的类。每个 ClassLoader 可以通过getParent()获取其父 ClassLoader，如果获取到 ClassLoader 为null的话，那么该类就是是通过 启动类加载器 加载的</p><p><strong>为什么获取到的ClassLoader 为null就是启动类加载器加载的呢？</strong> 这是因为启动类加载器由 C++ 实现，由于这个 C++ 实现的类加载器在 Java 中是没有与之对应的类的，所以拿到的结果是 null。</p><h4 id="自定义类加载器">自定义类加载器</h4><p>我们前面也说说了，除了启动类加载器,其他类加载器均由 Java 实现且全部继承自java.lang.ClassLoader。如果我们要自定义自己的类加载器，很明显需要继承 ClassLoader抽象类。</p><p>ClassLoader 类有两个关键的方法：</p><ul><li><strong>protected Class loadClass(String name, boolean resolve)</strong>：加载指定二进制名称的类，实现了双亲委派机制 。name 为类的二进制名称，resolve 如果为 true，在加载时调用 resolveClass(Class&lt;?&gt; c) 方法解析该类。</li><li><strong>protected Class findClass(String name)</strong>：根据类的二进制名称来查找类，默认实现是空方法。</li></ul><p>官方 API 文档中写到：</p><blockquote><p>建议 ClassLoader的子类重写 findClass(String name)方法而不是loadClass(String name, boolean resolve) 方法。</p></blockquote><p>如果我们不想打破双亲委派模型，就重写 ClassLoader 类中的 findClass() 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派模型则需要重写 loadClass() 方法。</p><h3 id="双亲委派模型">双亲委派模型</h3><h4 id="双亲委派模型介绍">双亲委派模型介绍</h4><p>类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载呢？这就需要提到双亲委派模型了。</p><p><code>ClassLoader</code> 类使用委托模型来搜索类和资源。每个 <code>ClassLoader</code> 实例都有一个相关的父类加载器。需要查找类或资源时，<code>ClassLoader</code> 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。</p><p>下图展示的各种类加载器之间的层次关系被称为类加载器的“<strong>双亲委派模型(Parents Delegation Model)</strong>”。</p><p><img src="https://pb01.s3.bitiful.net/139.png" alt="avatar"></p><p>注意 ⚠️：双亲委派模型并不是一种强制性的约束，只是 JDK 官方推荐的一种方式。如果我们因为某些特殊需求想要打破双亲委派模型，也是可以的.</p><p>其实这个双亲翻译的容易让别人误解，我们一般理解的双亲都是父母，这里的双亲更多地表达的是“父母这一辈”的人而已，并不是说真的有一个 MotherClassLoader 和一个FatherClassLoader 。</p><p>另外，类加载器之间的父子关系一般不是以继承的关系来实现的，而是通常使用组合关系来复用父加载器的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 组合</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">ClassLoader</span><span class="params">(ClassLoader parent)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>(checkCreateClassLoader(), parent);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在面向对象编程中，有一条非常经典的设计原则：<strong>组合优于继承，多用组合少用继承</strong>。</p><h4 id="双亲委派模型的执行流程">双亲委派模型的执行流程</h4><ol><li>在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。</li><li>类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 loadClass()方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 BootstrapClassLoader 中。</li><li>只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 findClass() 方法来加载类）。</li><li>如果子类加载器也无法加载这个类，那么它会抛出一个 ClassNotFoundException 异常。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">//首先，检查该类是否已经加载过</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果 c 为 null，则说明该类没有被加载过</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//当父类的加载器不为空，则通过父类的loadClass来加载该类</span></span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//当父类的加载器为空，则调用启动类加载器来加载该类</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">//非空父类的类加载器无法找到相应的类，则抛出异常</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//当父类加载器无法加载时，则调用findClass方法来加载该类</span></span><br><span class="line">                <span class="comment">//用户可通过覆写该方法，来自定义类加载器</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//用于统计类加载器相关的信息</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            <span class="comment">//对类进行link操作</span></span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌈 拓展一下：<br><strong>JVM 判定两个 Java 类是否相同的具体规则</strong>: JVM 不仅要看类的全名是否相同，还要看加载此类的类加载器是否一样。只有两者都相同的情况，才认为两个类是相同的。即使两个类来源于同一个 Class 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相同。</p><p>双亲委派模型保证了 Java 程序的稳定运行，<strong>可以避免类的重复加载</strong>（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），<strong>也保证了 Java 的核心 API 不被篡改</strong>。</p><p>如果没有使用双亲委派模型，而是每个类加载器加载自己的话就会出现一些问题，比如我们编写一个称为 <code>java.lang.Object </code>类的话，那么程序运行的时候，系统就会出现两个不同的 <code>Object</code> 类。双亲委派模型可以保证加载的是 JRE 里的那个 <code>Object</code> 类，而不是你写的 <code>Object</code> 类。这是因为 <code>AppClassLoader</code> 在加载你的 <code>Object</code> 类时，会委托给 <code>ExtClassLoader</code> 去加载，而 <code>ExtClassLoader</code> 又会委托给 <code>BootstrapClassLoader</code>，<code>BootstrapClassLoader</code> 发现自己已经加载过了 <code>Object</code> 类，会直接返回，不会去加载你写的 <code>Object</code> 类。</p><h4 id="打破双亲委派模型方法">打破双亲委派模型方法</h4><p>打破双亲委派模型方法就要<strong>自定义加载器,重写loadClass方法</strong>. 自定义加载器的话，需要继承 <code>ClassLoader</code> 。如果我们不想打破双亲委派模型，就重写 <code>ClassLoader</code> 类中的 findClass() 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。但是，如果想打破双亲委派模型则需要重写 loadClass() 方法。</p><p>为什么是重写 loadClass() 方法打破双亲委派模型呢？双亲委派模型的执行流程已经解释了：</p><blockquote><p>类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 loadClass()方法来加载类）。</p></blockquote><p>重写 loadClass()方法之后，我们就可以改变传统双亲委派模型的执行流程。例如，子类加载器可以在委派给父类加载器之前，先自己尝试加载这个类，或者在父类加载器返回之后，再尝试从其他地方加载这个类。具体的规则由我们自己实现，根据项目需求定制化。</p>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类文件结构</title>
      <link href="/2023/12/20/JVM3/"/>
      <url>/2023/12/20/JVM3/</url>
      
        <content type="html"><![CDATA[<h2 id="类文件结构">类文件结构</h2><p>在我们学习C语言的时候，我们的编程过程会经历如下几个阶段：写代码、保存、编译、运行。实际上，最关键的一步是编译，因为只有经历了编译之后，我们所编写的代码才能够翻译为机器可以直接运行的二进制代码，并且在不同的操作系统下，我们的代码都需要进行一次编译之后才能运行。</p><blockquote><p>如果全世界所有的计算机指令集只有x86一种，操作系统只有Windows一种，那也许就不会有Java语言的出现。</p></blockquote><p>随着时代的发展，人们迫切希望能够在不同的操作系统、不同的计算机架构中运行同一套编译之后的代码。本地代码不应该是我们编程的唯一选择，所以，越来越多的语言选择了与操作系统和机器指令集无关的中立格式作为编译后的存储格式。</p><p>“一次编写，到处运行”，Java最引以为傲的口号，标志着平台不再是限制编程语言的阻碍。</p><p>实际上，Java正式利用了这样的解决方案，将源代码编译为平台无关的中间格式，并通过对应的Java虚拟机读取和运行这些中间格式的编译文件，这样，我们只需要考虑不同平台的虚拟机如何编写，而Java语言本身很轻松地实现了跨平台。</p><p>现在，越来越多的开发语言都支持将源代码编译为<code>.class</code>字节码文件格式，以便能够直接交给JVM运行，包括Kotlin（安卓开发官方指定语言）、Groovy、Scala等。</p><p><img src="https://pb01.s3.bitiful.net/129.png" alt="avatar"></p><p>那么，让我们来看看，我们的源代码编译之后，是如何保存在字节码文件中的。</p><hr><h3 id="类文件信息">类文件信息</h3><p>我们之前都是使用<code>javap</code>命令来对字节码文件进行反编译查看的，那么，它以二进制格式是怎么保存呢？我们可以使用WinHex软件（Mac平台可以使用<a href="https://www.macwk.com/soft/010-editor">010 Editor</a>）来以十六进制查看字节码文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> i++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ++i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到我们在IDEA中编译出来的class文件，将其拖动进去：</p><p><img src="https://pb01.s3.bitiful.net/130.png" alt="avatar"></p><p>可以看到整个文件中，全是一个字节一个字节分组的样子，从左上角开始，一行一行向下读取。</p><p>实际上Class文件采用了一种类似于C中结构体的伪结构来存储数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4             magic; //Class 文件的标志</span><br><span class="line">    u2             minor_version;//Class 的小版本号</span><br><span class="line">    u2             major_version;//Class 的大版本号</span><br><span class="line">    u2             constant_pool_count;//常量池的数量</span><br><span class="line">    cp_info        constant_pool[constant_pool_count-1];//常量池</span><br><span class="line">    u2             access_flags;//Class 的访问标记</span><br><span class="line">    u2             this_class;//当前类</span><br><span class="line">    u2             super_class;//父类</span><br><span class="line">    u2             interfaces_count;//接口数量</span><br><span class="line">    u2             interfaces[interfaces_count];//一个类可以实现多个接口</span><br><span class="line">    u2             fields_count;//字段数量</span><br><span class="line">    field_info     fields[fields_count];//一个类可以有多个字段</span><br><span class="line">    u2             methods_count;//方法数量</span><br><span class="line">    method_info    methods[methods_count];//一个类可以有个多个方法</span><br><span class="line">    u2             attributes_count;//此类的属性表中的属性数</span><br><span class="line">    attribute_info attributes[attributes_count];//属性表集合</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而Class文件中，有两种允许存在的数据类型，一个是无符号数，还有一个是表。</p><ul><li>无符号数一般是基本数据类型，用u1、u2、u4、u8来表示，表示1个字节~8个字节的无符号数。可以表示数字、索引引用、数量值或是以UTF-8编码格式的字符串。</li><li>表包含多个无符号数，并且以&quot;_info&quot;结尾。</li></ul><p>我们首先从最简单的开始看起。</p><p><img src="https://pb01.s3.bitiful.net/131.png" alt="avatar"></p><p>首先，我们可以看到，前4个字节（共32位）组成了<strong>魔数</strong>（其实就是表示这个文件是一个JVM可以运行的字节码文件，除了Java以外，其他某些文件中也采用了这种魔数机制来进行区分，这种方式比直接起个文件扩展名更安全）</p><p>字节码文件的魔数为：CAFEBABE（这名字能想出来也是挺难的了，毕竟4个bit位只能表示出A-F这几个字母）</p><p>紧接着魔数的后面4个字节存储的是字节码文件的版本号，注意前两个是次要版本号（现在基本都不用了，都是直接Java8、Java9这样命名了），后面两个是<strong>主要版本号</strong>，这里我们主要看主版本号，比如上面的就是34，注意这是以16进制表示的，我们把它换算为10进制后，得到的结果为：<code>34  -&gt;  3*16 + 4 = 52</code>，其中<code>52</code>代表的是<code>JDK8</code>编译的字节码文件（51是JDK7、50是JDK6、53是JDK9，以此类推）</p><p>JVM会<strong>根据版本号决定是否能够运行</strong>，比如JDK6只能支持版本号为1.1~6的版本，也就是说必须是Java6之前的环境编译出来的字节码文件，否则无法运行。又比如我们现在安装的是JDK8版本，它能够支持的版本号为1.1~8，那么如果这时我们有一个通过Java7编译出来的字节码文件，依然是可以运行的，所以说Java版本是向下兼容的。</p><p>紧接着，就是类的<strong>常量池</strong>了，这里面存放了类中所有的常量信息（注意这里的常量并不是指我们手动创建的final类型常量，而是程序运行一些需要用到的常量数据，比如字面量和符号引用等）由于常量的数量不是确定的，所以在最开始的位置会存放常量池中常量的数量（是从1开始计算的，不是0，比如这里是18，翻译为10进制就是24，所以实际上有23个常量）</p><p>接着再往下，就是常量池里面的数据了，常量池中每一项常量都是一个表，这 14 种表有一个共同的特点：开始的第一位是一个 u1 类型的标志位 -tag 来标识常量的类型，代表当前这个常量属于哪种常量类型,都是以_info结尾</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">标志</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">CONSTANT_Utf8_info</td><td style="text-align:center">1</td><td style="text-align:center">UTF-8编码格式的字符串</td></tr><tr><td style="text-align:center">CONSTANT_Integer_info</td><td style="text-align:center">3</td><td style="text-align:center">整形字面量（第一章我们演示的很大的数字，实际上就是以字面量存储在常量池中的）</td></tr><tr><td style="text-align:center">CONSTANT_Float_info</td><td style="text-align:center">4</td><td style="text-align:center">浮点型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Long_info</td><td style="text-align:center">5</td><td style="text-align:center">长整型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Double_info</td><td style="text-align:center">6</td><td style="text-align:center">双精度浮点型字面量</td></tr><tr><td style="text-align:center">CONSTANT_Class_info</td><td style="text-align:center">7</td><td style="text-align:center">类或接口的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_String_info</td><td style="text-align:center">8</td><td style="text-align:center">字符串类型的字面量</td></tr><tr><td style="text-align:center">CONSTANT_Fieldref_info</td><td style="text-align:center">9</td><td style="text-align:center">字段的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_Methodref_info</td><td style="text-align:center">10</td><td style="text-align:center">方法的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_InterfaceMethodref_info</td><td style="text-align:center">11</td><td style="text-align:center">接口方法的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_NameAndType_info</td><td style="text-align:center">12</td><td style="text-align:center">字段或方法的符号引用</td></tr><tr><td style="text-align:center">CONSTANT_MethodType_info</td><td style="text-align:center">16</td><td style="text-align:center">方法类型</td></tr><tr><td style="text-align:center">CONSTANT_MethodHandle_info</td><td style="text-align:center">15</td><td style="text-align:center">表示方法句柄</td></tr><tr><td style="text-align:center">CONSTANT_InvokeDynamic_info</td><td style="text-align:center">18</td><td style="text-align:center">表示一个动态方法调用点</td></tr></tbody></table><p>比如我们来看第一个<code>CONSTANT_Methodref_info</code>表中存放了什么数据，这里我只列出它的结构表（详细的结构表可以查阅《深入理解Java虚拟机 第三版》中222页总表）：</p><table><thead><tr><th style="text-align:center">常量</th><th style="text-align:center">项目</th><th style="text-align:center">类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">CONSTANT_Methodref_info</td><td style="text-align:center">tag</td><td style="text-align:center">u1</td><td style="text-align:center">值为10</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">index</td><td style="text-align:center">u2</td><td style="text-align:center">指向声明方法的类描述父CONSTANT_Class_info索引项</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">index</td><td style="text-align:center">u2</td><td style="text-align:center">指向名称及类型描述符CONSTANT_NameAndType_info索引项</td></tr></tbody></table><p>在常量池结束之后，紧接着的两个字节代表<strong>访问标志</strong>，这个标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口，是否为 public 或者 abstract 类型，如果是类的话是否声明为 final 等等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u2             access_flags;//Class 的访问标记</span><br></pre></td></tr></table></figure><p>可以看到它只占了2个字节，那么它是如何表示访问标志呢?</p><p><img src="https://pb01.s3.bitiful.net/132.png" alt="avatar"></p><p>比如我们这里的Main类，它是一个普通的class类型，并且访问权限为public，那么它的访问标志值是这样计算的：</p><p><code>ACC_PUBLIC | ACC_SUPER = 0x0001 | 0x0020 = 0x0021</code>（这里进行的是按位或运算），可以看到和我们上面的结果是一致的。</p><p>再往下就是类索引、父类索引、接口索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u2             this_class;//当前类</span><br><span class="line">u2             super_class;//父类</span><br><span class="line">u2             interfaces_count;//接口数量</span><br><span class="line">u2             interfaces[interfaces_count];//一个类可以实现多个接口</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/133.png" alt="avatar"></p><p>可以看到它们的值也是指向<strong>常量池中的值</strong>，其中2号常量正是存储的当前类信息，3号常量存储的是父类信息，这里就不再倒推回去了，由于没有接口，所以这里接口数量为0，如果不为0还会有一个索引表来引用接口。</p><p>Java 类的继承关系由类索引、父类索引和接口索引集合三项确定。类索引、父类索引和接口索引集合按照顺序排在访问标志之后，<strong>类索引</strong>用于确定这个类的全限定名，<strong>父类索引</strong>用于确定这个类的父类的全限定名，由于 Java 语言的单继承，所以父类索引只有一个，除了 java.lang.Object 之外，所有的 Java 类都有父类，因此除了 java.lang.Object 外，所有 Java 类的父类索引都不为 0。<strong>接口索引集合</strong>用来描述这个类实现了那些接口，这些被实现的接口将按 implements (如果这个类本身是接口的话则是extends) 后的接口顺序从左到右排列在接口索引集合中。</p><p>接着就是<strong>字段表</strong>了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             fields_count;//字段数量</span><br><span class="line">field_info     fields[fields_count];//一个类会可以有个字段</span><br></pre></td></tr></table></figure><p>由于我们这里没有声明任何字段，所以我们先给Main类添加一个字段再重新加载一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> i++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ++i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/134.png" alt="avatar"></p><ul><li><strong>access_flags:</strong> 字段的作用域（public ,private,protected修饰符），是实例变量还是类变量（static修饰符）,可否被序列化（transient 修饰符）,可变性（final）,可见性（volatile 修饰符，是否强制从主内存读写）。</li><li><strong>name_index:</strong> 对常量池的引用，表示的字段的名称；</li><li><strong>descriptor_index:</strong> 对常量池的引用，表示字段和方法的描述符；</li><li><strong>attributes_count:</strong> 一个字段还会拥有一些额外的属性，attributes_count 存放属性的个数；</li><li><strong>attributes[attributes_count]:</strong> 存放具体属性具体内容。</li></ul><p>上述这些信息中，各个修饰符都是布尔值，要么有某个修饰符，要么没有，很适合使用标志位来表示。而字段叫什么名字、字段被定义为什么数据类型这些都是无法固定的，只能引用常量池中常量来描述。</p><p>接着就是我们的<strong>方法表</strong>了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             methods_count;//方法数量</span><br><span class="line">method_info    methods[methods_count];//一个类可以有个多个方法</span><br></pre></td></tr></table></figure><p>methods_count 表示方法的数量，而 method_info 表示方法表。</p><p>Class 文件存储格式中对方法的描述与对字段的描述几乎采用了完全一致的方式。方法表的结构如同字段表一样，依次包括了访问标志、名称索引、描述符索引、属性表集合几项。</p><p><strong>method_info(方法表的) 结构:</strong></p><p><img src="https://pb01.s3.bitiful.net/135.png" alt="avatar"></p><p>最后，就是<strong>属性表</strong>了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u2             attributes_count;//此类的属性表中的属性数</span><br><span class="line">attribute_info attributes[attributes_count];//属性表集合</span><br></pre></td></tr></table></figure><p>在 Class 文件，字段表，方法表中都可以携带自己的属性表集合，以用于描述某些场景专有的信息。与 Class 文件中其它的数据项目要求的顺序、长度和内容不同，属性表集合的限制稍微宽松一些，不再要求各个属性表具有严格的顺序，并且只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写入自己定义的属性信息，Java 虚拟机运行时会忽略掉它不认识的属性。</p>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM垃圾回收机制</title>
      <link href="/2023/12/19/JVM2/"/>
      <url>/2023/12/19/JVM2/</url>
      
        <content type="html"><![CDATA[<h2 id="垃圾回收机制">垃圾回收机制</h2><p>我们前面提到，Java会自动管理和释放内存，它不像C/C++那样要求我们手动管理内存，JVM提供了一套全自动的内存管理机制，当一个Java对象不再用到时，JVM会自动将其进行回收并释放内存，那么对象所占内存在什么时候被回收，如何判定对象可以被回收，以及如何去进行回收工作也是JVM需要关注的问题。</p><h3 id="对象存活判定算法">对象存活判定算法</h3><p>首先我们来套讨论第一个问题，也就是：对象在什么情况下可以被判定为不再使用已经可以回收了？这里就需要提到以下几种垃圾回收算法了。</p><p><img src="https://pb01.s3.bitiful.net/108.png" alt="avatar"></p><h4 id="引用计数法">引用计数法</h4><p>我们知道，如果我们要经常操作一个对象，那么首先一定会创建一个引用变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//str就是一个引用类型的变量，它持有对后面字符串对象的引用，可以代表后面这个字符串对象本身</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;lbwnb&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//str.xxxxx...</span></span><br></pre></td></tr></table></figure><p>实际上，我们会发现，只要一个对象还有使用价值，我们就会通过它的引用变量来进行操作，那么可否这样判断一个对象是否还需要被使用：</p><ul><li>每个对象都包含一个 <strong>引用计数器</strong>，用于存放引用计数（其实就是存放被引用的次数）</li><li>每当有一个地方引用此对象时，引用计数<code>+1</code></li><li>当引用失效（ 比如离开了局部变量的作用域或是引用被设定为<code>null</code>）时，引用计数<code>-1</code></li><li>当引用计数为<code>0</code>时，表示此对象不可能再被使用，因为这时我们已经没有任何方法可以得到此对象的引用了</li></ul><p>但是这样存在一个问题，如果两个对象相互引用呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="type">Test</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        a.another = b;</span><br><span class="line">        b.another = a;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里直接把a和b赋值为null，这样前面的两个对象我们不可能再得到了</span></span><br><span class="line">        a = b = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        Test another;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照引用计数算法，那么当出现以上情况时，虽然我们无法在得到此对象的引用了，并且此对象我们也无需再使用，但是由于这两个对象直接存在相互引用的情况，那么引用计数器的值将会永远是<code>1</code>，但是实际上此对象已经没有任何用途了。所以引用计数法并不是最好的解决方案。</p><h4 id="可达性分析算法">可达性分析算法</h4><p>目前比较主流的编程语言（包括Java），一般都会使用可达性分析算法来判断对象是否存活，它采用了类似于树结构的搜索机制。</p><p>首先每个对象的引用都有机会成为树的根节点（GC Roots），可以被选定作为根节点条件如下：</p><ul><li>位于虚拟机栈的栈帧中的本地变量表中所引用到的对象（其实就是我们方法中的局部变量）同样也包括本地方法栈中JNI引用的对象。</li><li>类的静态成员变量引用的对象。</li><li>方法区中，常量池里面引用的对象，比如我们之前提到的<code>String</code>类型对象。</li><li>被添加了锁的对象（比如synchronized关键字）</li><li>虚拟机内部需要用到的对象。</li></ul><p><img src="https://pb01.s3.bitiful.net/109.png" alt="avatar"></p><p>一旦已经存在的根节点不满足存在的条件时，那么根节点与对象之间的连接将被断开。此时虽然对象1仍存在对其他对象的引用，但是由于其没有任何根节点引用，所以此对象即可被判定为不再使用。比如某个方法中的局部变量引用，在方法执行完成返回之后：</p><p><img src="https://pb01.s3.bitiful.net/110.png" alt="avatar"></p><p>这样就能很好地解决我们刚刚提到的循环引用问题，我们再来重现一下出现循环引用的情况：</p><p><img src="https://pb01.s3.bitiful.net/111.png" alt="avatar"></p><p>可以看到，对象1和对象2依然是存在循环引用的，但是只有他们各自的GC Roots断开，那么就会变成下面这样：</p><p><img src="https://pb01.s3.bitiful.net/112.png" alt="avatar"></p><p>所以，我们最后进行一下总结：如果某个对象无法到达任何GC Roots，则证明此对象是不可能再被使用的。</p><h4 id="最终判定">最终判定</h4><p>虽然在经历了可达性分析算法之后基本可能判定哪些对象能够被回收，但是并不代表此对象一定会被回收，我们依然可以在最终判定阶段对其进行挽留。</p><p>还记得<code>Object</code>类中的<code>finalize()</code>方法吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called by the garbage collector on an object when garbage collection</span></span><br><span class="line"><span class="comment"> * determines that there are no more references to the object.</span></span><br><span class="line"><span class="comment"> * A subclass overrides the &#123;<span class="doctag">@code</span> finalize&#125; method to dispose of</span></span><br><span class="line"><span class="comment"> * system resources or to perform other cleanup.</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123; &#125;</span><br></pre></td></tr></table></figure><p>此方法正是最终判定方法，如果子类重写了此方法，那么子类对象在被判定为可回收时，会进行二次确认，也就是执行<code>finalize()</code>方法，而在此方法中，当前对象是完全有可能重新建立GC Roots的！所以，如果在二次确认后对象不满足可回收的条件，那么此对象不会被回收，巧妙地逃过了垃圾回收的命运。比如下面这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Test a;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里直接把a赋值为null，这样前面的对象我们不可能再得到了</span></span><br><span class="line">        a  = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动申请执行垃圾回收操作（注意只是申请，并不一定会执行，但是一般情况下都会执行）</span></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待垃圾</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们来看看a有没有被回收</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>+<span class="string">&quot; 开始了它的救赎之路！&quot;</span>);</span><br><span class="line">            a = <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意<code>finalize()</code>方法并不是在主线程调用的，而是虚拟机自动建立的一个低优先级的<code>Finalizer</code>线程（正是因为优先级比较低，所以前面才需要等待1秒钟）进行处理，我们可以稍微修改一下看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(Thread.currentThread());</span><br><span class="line">        a = <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread[Finalizer,8,system]</span><br><span class="line">com.test.Main$Test@232204a1</span><br></pre></td></tr></table></figure><p>同时，同一个对象的<code>finalize()</code>方法只会有一次调用机会，也就是说，如果我们连续两次这样操作，那么第二次，对象必定被回收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    a = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    <span class="comment">//这里直接把a赋值为null，这样前面的对象我们不可能再得到了</span></span><br><span class="line">    a  = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//手动申请执行垃圾回收操作（注意只是申请，并不一定会执行，但是一般情况下都会执行）</span></span><br><span class="line">    System.gc();</span><br><span class="line">    <span class="comment">//等垃圾回收一下</span></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(a);</span><br><span class="line">    <span class="comment">//这里直接把a赋值为null，这样前面的对象我们不可能再得到了</span></span><br><span class="line">    a  = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//手动申请执行垃圾回收操作（注意只是申请，并不一定会执行，但是一般情况下都会执行）</span></span><br><span class="line">    System.gc();</span><br><span class="line">    <span class="comment">//等垃圾回收一下</span></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，<code>finalize()</code>方法也并不是专门防止对象被回收的，我们可以使用它来释放一些程序使用中的资源等。</p><p>最后，总结成一张图：</p><p><img src="https://pb01.s3.bitiful.net/113.png" alt="avatar"></p><p>当然，除了堆中的对象以外，方法区中的数据也是可以被垃圾回收的，但是回收条件比较严格，这里就暂时不谈了。</p><hr><h3 id="垃圾回收算法">垃圾回收算法</h3><p>前面我们介绍了对象存活判定算法，现在我们已经可以准确地知道堆中的哪些对象可以被回收了，那么，接下来就该考虑如何对对象进行回收了，垃圾收集器会不定期地检查堆中的对象，查看它们是否满足被回收的条件。我们该如何对这些对象进行回收，是一个一个判断是否需要回收吗？</p><h4 id="分代收集机制">分代收集机制</h4><p>实际上，如果我们对堆中的每一个对象都依次判断是否需要回收，这样的效率其实是很低的，那么有没有更好地回收机制呢？第一步，我们可以对堆中的对象进行分代管理。</p><p>比如某些对象，在多次垃圾回收时，都未被判定为可回收对象，我们完全可以将这一部分对象放在一起，并让垃圾收集器减少回收此区域对象的频率，这样就能很好地提高垃圾回收的效率了。</p><p>因此，Java虚拟机将堆内存划分为<strong>新生代</strong>、<strong>老年代</strong>和<strong>永久代</strong>（其中永久代是HotSpot虚拟机特有的概念，在JDK8之前方法区实际上就是采用的永久代作为实现，而在JDK8之后，方法区由元空间实现，并且使用的是本地内存，容量大小取决于物理机实际大小，之后会详细介绍）这里我们主要讨论的是<strong>新生代</strong>和<strong>老年代</strong>。</p><p>不同的分代内存回收机制也存在一些不同之处，在HotSpot虚拟机中，新生代被划分为三块，一块较大的Eden空间和两块较小的Survivor空间，默认比例为8：1：1，老年代的GC评率相对较低，永久代一般存放类信息等（其实就是方法区的实现）如图所示：</p><p><img src="https://pb01.s3.bitiful.net/114.png" alt="avatar"></p><p>那么它是如何运作的呢？</p><p>首先，所有新创建的对象，在一开始都会进入到新生代的Eden区（如果是大对象会被直接丢进老年代），在进行新生代区域的垃圾回收时，首先会对所有新生代区域的对象进行扫描，并回收那些不再使用对象：</p><p><img src="https://pb01.s3.bitiful.net/115.png" alt="avatar"></p><p>接着，在一次垃圾回收之后，Eden区域没有被回收的对象，会进入到Survivor区。在一开始From和To都是空的，而GC之后，所有Eden区域存活的对象都会直接被放入到From区，最后From和To会发生一次交换，也就是说目前存放我们对象的From区，变为To区，而To区变为From区：</p><p><img src="https://pb01.s3.bitiful.net/116.png" alt="avatar"></p><p>接着就是下一次垃圾回收了，操作与上面是一样的，不过这时由于我们From区域中已经存在对象了，所以，在Eden区的存活对象复制到From区之后，所有To区域中的对象会进行年龄判定（每经历一轮GC年龄<code>+1</code>，当年龄大小超过了 survivor 区的一半时，取这个年龄和 MaxTenuringThreshold 中更小的一个值，作为新的晋升到老年代的年龄阈值，大于这个阈值的话,会直接进入到老年代，否则移动到From区）</p><p><img src="https://pb01.s3.bitiful.net/117.png" alt="avatar"></p><p>最后像上面一样交换To区和From区，之后不断重复以上步骤。</p><h4 id="空间分配担保">空间分配担保</h4><p>我们可以思考一下，有没有这样一种极端情况（正常情况下新生代的回收率是很高的，所以说不用太担心会经常出现这种问题），在一次GC后，新生代Eden区仍然存在大量的对象（因为GC之后存活对象会进入到一个Survivor区，但是很明显这时已经超出Survivor区的容量了，肯定是装不下的）那么现在该怎么办？</p><p>这时就需要用到空间分配担保机制了，可以把Survivor区无法容纳的对象直接送到老年代，让老年代进行分配担保（当然老年代也得装得下才行）。当新生代无法容纳更多的的对象时，可以把新生代中的对象移动到老年代中，这样新生代就腾出了空间来容纳更多的对象。</p><p>好，那既然新生代装不下就丢给老年代，那么要是老年代也装不下新生代的数据呢？这时，老年代肯定担保人是当不成了，那么这样的话，首先会判断一下之前的每次垃圾回收进入老年代的平均大小是否小于当前老年代的剩余空间，如果小于，那么说明也许可以放得下（不过也仅仅是也许，依然有可能放不下，因为判断的实际上只是平均值，万一这一次突然非常大呢），否则，会先来一次Full GC，进行一次大规模垃圾回收，来尝试腾出空间，再次判断老年代是否有空间存放，要是还是装不下，直接抛出OOM错误，摆烂。</p><p>最后，我们来总结一下一次Minor GC的整个过程：</p><p><img src="https://pb01.s3.bitiful.net/118.png" alt="avatar"></p><hr><h4 id="标记-清除算法">标记-清除算法</h4><p>前面我们已经了解了整个堆内存实际上是以分代收集机制为主，但是依然没有讲到具体的收集过程，那么，具体的回收过程又是什么样的呢？首先我们来了解一下最古老的<code>标记-清除</code>算法。</p><p>首先标记出所有需要回收的对象，然后再依次回收掉被标记的对象，或是标记出所有不需要回收的对象，只回收未标记的对象。</p><p>如果按照前者的理解，整个标记-清除过程大致是这样的：</p><ol><li>当一个对象被创建时，给一个标记位，假设为 0 (false)；</li><li>在标记阶段，我们将所有可达对象（或用户可以引用的对象）的标记位设置为 1 (true)；</li><li>扫描阶段清除的就是标记位为 0 (false)的对象。</li></ol><p><img src="https://pb01.s3.bitiful.net/119.png" alt="avatar"></p><p>虽然此方法非常简单，但是缺点也是非常明显的 ，首先如果内存中存在大量的对象，那么可能就会存在大量的标记，并且大规模进行清除。并且一次标记清除之后，连续的内存空间可能会出现许许多多的空隙，碎片化会导致连续内存空间利用率降低。</p><h4 id="标记-复制算法">标记-复制算法</h4><p>既然标记清除算法在面对大量对象时效率低，那么我们可以采用标记-复制算法。它将容量分为同样大小的两块区域，</p><p>标记复制算法，实际上就是将内存区域划分为大小相同的两块区域，每次只使用其中的一块区域，每次垃圾回收结束后，将所有存活的对象全部复制到另一块区域中，并一次性清空当前区域。虽然浪费了一些时间进行复制操作，但是这样能够很好地解决对象大面积回收后空间碎片化严重的问题。</p><p><img src="https://pb01.s3.bitiful.net/120.png" alt="avatar"></p><p>这种算法就非常适用于新生代（因为新生代的回收效率极高，一般不会留下太多的对象）的垃圾回收，而我们之前所说的新生代Survivor区其实就是这个思路，包括8:1:1的比例也正是为了对标记复制算法进行优化而采取的。</p><h4 id="标记-整理算法">标记-整理算法</h4><p>虽然标记-复制算法能够很好地应对新生代高回收率的场景，但是放到老年代，它就显得很鸡肋了。我们知道，一般长期都回收不到的对象，才有机会进入到老年代，所以老年代一般都是些钉子户，可能一次GC后，仍然存留很多对象。而标记复制算法会在GC后完整复制整个区域内容，并且会折损50%的区域，显然这并不适用于老年代。</p><p>那么我们能否这样，在标记所有待回收对象之后，不急着去进行回收操作，而是将所有待回收的对象整齐排列在一段内存空间中，而需要回收的对象全部往后丢，这样，前半部分的所有对象都是无需进行回收的，而后半部分直接一次性清除即可。</p><p><img src="https://pb01.s3.bitiful.net/121.png" alt="avatar"></p><p>虽然这样能保证内存空间充分使用，并且也没有标记复制算法那么繁杂，但是缺点也是显而易见的，它的效率比前两者都低。甚至，由于需要修改对象在内存中的位置，此时程序必须要暂停才可以，在极端情况下，可能会导致整个程序发生停顿（被称为“Stop The World”）。</p><p>所以，我们可以将标记清除算法和标记整理算法混合使用，在内存空间还不是很凌乱的时候，采用标记清除算法其实是没有多大问题的，当内存空间凌乱到一定程度后，我们可以进行一次标记整理算法。</p><hr><h3 id="垃圾收集器实现">垃圾收集器实现</h3><p>聊完了对象存活判定和垃圾回收算法，接着我们就要看看具体有哪些垃圾回收器的实现了。我们可以自由地为新生代和老年代选择更适合它们的收集器。</p><h4 id="Serial收集器">Serial收集器</h4><p>这款垃圾收集器也是元老级别的收集器了，在JDK1.3.1之前，是虚拟机新生代区域收集器的唯一选择。这是一款单线程的垃圾收集器，也就是说，当开始进行垃圾回收时，需要暂停所有的线程，直到垃圾收集工作结束。它的新生代收集算法采用的是标记复制算法，老年代采用的是标记整理算法。</p><p><img src="https://pb01.s3.bitiful.net/122.png" alt="avatar"></p><p>可以看到，当进入到垃圾回收阶段时，所有的用户线程必须等待GC线程完成工作，就相当于你打一把LOL 40分钟，中途每隔1分钟网络就卡5秒钟，可能这时你正在打团，结果你被物理控制直接在那里站了5秒钟，这确实让人难以接受。</p><p>虽然缺点很明显，但是优势也是显而易见的：</p><ol><li>设计简单而高效。</li><li>在用户的桌面应用场景中，内存一般不大，可以在较短时间内完成垃圾收集，只要不频繁发生，使用串行回收器是可以接受的。</li></ol><p>所以，在客户端模式（一般用于一些桌面级图形化界面应用程序）下的新生代中，默认垃圾收集器至今依然是Serial收集器。</p><h4 id="Serial-Old收集器">Serial Old收集器</h4><p><strong>Serial 收集器的老年代版本</strong>，它同样是一个单线程收集器。它主要有两大用途：一种用途是在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用，另一种用途是作为 CMS 收集器的后备方案。</p><h4 id="ParNew收集器">ParNew收集器</h4><p>这款垃圾收集器相当于是Serial收集器的多线程版本，它能够支持多线程垃圾收集：</p><p><img src="https://pb01.s3.bitiful.net/123.png" alt="avatar"></p><p>除了多线程支持以外，其他内容基本与Serial收集器一致，是许多运行在 Server 模式下的虚拟机的首要选择，新生代采用标记-复制算法，老年代采用标记-整理算法。</p><h4 id="Parallel-Scavenge-Parallel-Old收集器">Parallel Scavenge/Parallel Old收集器</h4><p>Parallel Scavenge同样是一款面向新生代的垃圾收集器，同样采用标记复制算法实现，在JDK6时也推出了其老年代收集器Parallel Old，采用标记整理算法实现：</p><p><img src="https://pb01.s3.bitiful.net/124.png" alt="avatar"></p><p>与ParNew收集器不同的是，它会自动衡量一个吞吐量，并根据吞吐量来决定每次垃圾回收的时间，这种自适应机制，能够很好地权衡当前机器的性能，根据性能选择最优方案。</p><p>目前JDK8采用的就是这种 Parallel Scavenge + Parallel Old 的垃圾回收方案。</p><h4 id="CMS收集器">CMS收集器</h4><p>在JDK1.5，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep,即并行扫描标记）收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发（注意这里的并发和之前的并行是有区别的，并发可以理解为同时运行用户线程和GC线程，而并行可以理解为多条GC线程同时工作）收集器，<strong>它第一次实现了让垃圾收集线程与用户线程同时工作</strong>。</p><p>它主要采用标记清除算法：</p><p><img src="https://pb01.s3.bitiful.net/125.png" alt="avatar"></p><p>它的垃圾回收分为4个阶段：</p><ul><li><strong>初始标记：</strong> 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；</li><li><strong>并发标记：</strong> 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</li><li><strong>重新标记：</strong> 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li><strong>并发清除：</strong> 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。</li></ul><p>虽然它的优点非常之大，但是缺点也是显而易见的，我们之前说过，标记清除算法会产生大量的内存碎片，导致可用连续空间逐渐变少，长期这样下来，会有更高的概率触发Full GC，并且在与用户线程并发执行的情况下，也会占用一部分的系统资源，导致用户线程的运行速度一定程度上减慢。</p><p>不过，如果你希望的是最低的GC停顿时间，这款垃圾收集器无疑是最佳选择，不过自从G1收集器问世之后，CMS收集器不再推荐使用了。</p><h4 id="Garbage-First-G1-收集器">Garbage First (G1) 收集器</h4><p>此垃圾收集器也是一款划时代的垃圾收集器，在JDK7的时候正式走上历史舞台，它是一款主要面向于服务端的垃圾收集器，并且在JDK9时，取代了JDK8默认的 Parallel Scavenge + Parallel Old 的回收方案。</p><p>我们知道，我们的垃圾回收分为<code>Minor GC</code>、<code>Major GC </code>和<code>Full GC</code>，它们分别对应的是新生代，老年代和整个堆内存的垃圾回收，而G1收集器巧妙地绕过了这些约定，它将整个Java堆划分成<code>2048</code>个大小相同的独立<code>Region</code>块，每个<code>Region块</code>的大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且都为2的N次幂。所有的<code>Region</code>大小相同，且在JVM的整个生命周期内不会发生改变。</p><p>那么分出这些<code>Region</code>有什么意义呢？每一个<code>Region</code>都可以根据需要，自由决定扮演哪个角色（Eden、Survivor和老年代），收集器会根据对应的角色采用不同的回收策略。此外，G1收集器还存在一个Humongous区域，它专门用于存放大对象（一般认为大小超过了Region容量一半的对象为大对象）这样，新生代、老年代在物理上，不再是一个连续的内存区域，而是到处分布的。</p><p><img src="https://pb01.s3.bitiful.net/126.png" alt="avatar"></p><p>它的回收过程与CMS大体类似：</p><p><img src="https://pb01.s3.bitiful.net/127.png" alt="avatar"></p><p>分为以下四个步骤：</p><ul><li><p>**初始标记（暂停用户线程）：**仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。</p></li><li><p>**并发标记：**从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。</p></li><li><p>**最终标记（暂停用户线程）：**对用户线程做一个短暂的暂停，用于处理并发标记阶段漏标的那部分对象。</p></li><li><p>**筛选回收：**负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多个收集器线程并行完成的。</p></li></ul><p>它具备以下特点：</p><ul><li>**并行与并发：**G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。</li><li>**分代收集：**虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。</li><li>**空间整合：**与 CMS 的“标记-清除”算法不同，G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。</li><li>**可预测的停顿：**这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在垃圾收集上的时间不得超过 N 毫秒。</li></ul><hr><h3 id="元空间">元空间</h3><p>JDK8之前，Hotspot虚拟机的方法区实际上是永久代实现的。在JDK8之后，Hotspot虚拟机不再使用永久代，而是采用了全新的元空间。类的元信息被存储在元空间中。元空间没有使用堆内存，而是与堆不相连的本地内存区域。所以，理论上系统可以使用的内存有多大，元空间就有多大，所以不会出现永久代存在时的内存溢出问题。这项改造也是有必要的，永久代的调优是很困难的，虽然可以设置永久代的大小，但是很难确定一个合适的大小，因为其中的影响因素很多，比如类数量的多少、常量数量的多少等。</p><p>因此在JDK8时直接将本地内存作为元空间（<strong>Metaspace</strong>）的区域，物理内存有多大，元空间内存就可以有多大，这样永久代的空间分配问题就讲解了，所以最终它变成了这样：</p><p><img src="https://pb01.s3.bitiful.net/128.png" alt="avatar"></p><hr><h3 id="其他引用类型">其他引用类型</h3><p><strong>1．强引用（StrongReference）</strong></p><p>以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于必不可少的生活用品，<strong>垃圾回收器绝不会回收它</strong>。当内存空间不足，Java 虚拟机宁愿抛出 OutOfMemoryError 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。</p><p><strong>2．软引用（SoftReference）</strong><br>如果一个对象只具有软引用，那就类似于可有可无的生活用品。<strong>如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存</strong>。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA 虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><p><strong>3．弱引用（WeakReference）</strong><br>如果一个对象只具有弱引用，那就类似于可有可无的生活用品。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。<strong>在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存</strong>。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p><p><strong>4．虚引用（PhantomReference）</strong><br>&quot;虚引用&quot;顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。<strong>如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收</strong>。</p><p><strong>虚引用主要用来跟踪对象被垃圾回收的活动</strong>。</p><p>虚引用与软引用和弱引用的一个区别在于： 虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p><p>特别注意，在程序设计中一般<strong>很少使用弱引用与虚引用</strong>，使用软引用的情况较多，这是因为软引用可以加速 JVM 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生。</p>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存区域</title>
      <link href="/2023/12/18/JVM1/"/>
      <url>/2023/12/18/JVM1/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM内存区域">JVM内存区域</h1><p>在传统的C/C++开发中，我们经常通过使用申请内存的方式来创建对象或是存放某些数据，但是这样也带来了一些额外的问题，我们要在何时释放这些内存，怎么才能使得内存的使用最高效，因此，内存管理是一个非常严肃的问题。</p><p>比如我们就可以通过C语言<strong>malloc函数</strong>动态申请内存，并用于存放数据，而在Java中，这种操作实际上是不允许的，Java只支持直接使用基本数据类型和对象类型，至于内存到底如何分配，并不是由我们来处理，而是JVM帮助我们进行控制，这样就帮助我们节省很多内存上的工作，虽然带来了很大的便利，但是，一旦出现内存问题，我们就无法像C/C++那样对所管理的内存进行合理地处理，因为所有的内存操作都是由JVM在进行，只有了解了JVM的内存管理机制，我们才能够在出现内存相关问题时找到解决方案。</p><h2 id="内存区域划分">内存区域划分</h2><p>既然要管理内存，那么肯定不会是杂乱无章的，JVM对内存的管理采用的是分区治理，不同的内存区域有着各自的职责所在，在虚拟机运行时，内存区域如下划分：</p><p><img src="https://pb01.s3.bitiful.net/92.png" alt="avatar"><br><img src="https://pb01.s3.bitiful.net/93.png" alt="avatar"></p><p>我们可以看到，内存区域一共分为5个区域，其中方法区,堆和直接内存是所有线程共享的区域，随着虚拟机的创建而创建，虚拟机的结束而销毁，而虚拟机栈、本地方法栈、程序计数器都是线程之间相互隔离的，每个线程都有一个自己的区域，并且线程启动时会自动创建，结束之后会自动销毁。内存划分完成之后，我们的JVM执行引擎和本地库接口，也就是Java程序开始运行之后就会根据分区合理地使用对应区域的内存了。</p><h3 id="大致划分">大致划分</h3><h4 id="程序计数器">程序计数器</h4><p>首先我们来介绍一下程序计数器，它和我们的传统8086 CPU中PC寄存器的工作差不多，因为JVM虚拟机目的就是实现物理机那样的程序执行。在8086 CPU中，PC作为程序计数器，负责储存内存地址，该地址指向下一条即将执行的指令，每解释执行完一条指令，PC寄存器的值就会自动被更新为下一条指令的地址，进入下一个指令周期时，就会根据当前地址所指向的指令，进行执行。</p><p>而JVM中的程序计数器可以看做是当前线程所执行字节码的行号指示器，而行号正好就指的是某一条指令，字节码解释器在工作时也会改变这个值，来指定下一条即将执行的指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</p><p>因为Java的多线程也是依靠时间片轮转算法进行的，因此一个CPU同一时间也只会处理一个线程，当某个线程的时间片消耗完成后，会自动切换到下一个线程继续执行，而当前线程的执行位置会被保存到当前线程的程序计数器中，当下次轮转到此线程时，又继续根据之前的执行位置继续向下执行。</p><p>为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p><p>程序计数器因为只需要记录很少的信息，所以只占用很少一部分内存。</p><p>⚠️ 注意：程序计数器是唯一一个不会出现<strong>OutOfMemoryError</strong>的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</p><h4 id="虚拟机栈">虚拟机栈</h4><p>虚拟机栈就是一个非常关键的部分，看名字就知道它是一个栈结构，每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧（其实就是栈里面的一个元素），栈帧中包括了当前方法的一些信息，比如局部变量表、操作数栈、动态链接、方法出口等。</p><p><img src="https://pb01.s3.bitiful.net/95.png" alt="avatar"></p><p>其中局部变量表主要存放了编译器可知的各种数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置），在class文件中就已经定义好了</p><p><strong>操作数栈</strong>主要作为方法调用的中转站使用，用于存放方法执行过程中产生的<strong>中间计算结果</strong>。另外，计算过程中产生的<strong>临时变量</strong>也会放在操作数栈中</p><p>每个栈帧还保存了一个<strong>可以指向当前方法所在类</strong>的<strong>运行时常量池</strong>，目的是：当前方法中如果需要调用其他方法的时候，能够从运行时常量池中找到对应的符号引用，然后将符号引用转换为直接引用，然后就能直接调用对应方法，这就是动态链接</p><p><img src="https://pb01.s3.bitiful.net/94.png" alt="avatar"></p><p>最后是<strong>方法出口</strong>，也就是方法该如何结束，是抛出异常还是正常返回，不管哪种返回方式，都会导致栈帧被弹出。也就是说， 栈帧随着方法调用而创建，随着方法结束而销毁。无论方法正常完成还是异常完成都算作方法结束。</p><p>程序运行中栈可能会出现两种错误：</p><ul><li><strong>StackOverFlowError</strong>： 若栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。</li><li><strong>OutOfMemoryError</strong>： 如果栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</li></ul><p>这里我们来模拟一下整个虚拟机栈的运作流程，我们先编写一个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> a();</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">b</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">c</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们的主方法执行后，会依次执行三个方法<code>a() -&gt; b() -&gt; c() -&gt; 返回</code>，我们首先来观察一下反编译之后的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.test.Main();   #这个是构造方法</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="built_in">this</span>   Lcom/test/Main;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;    #主方法</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: invokestatic  #<span class="number">2</span>                  <span class="comment">// Method a:()I</span></span><br><span class="line">         <span class="number">3</span>: istore_1</span><br><span class="line">         <span class="number">4</span>: getstatic     #<span class="number">3</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">7</span>: iload_1</span><br><span class="line">         <span class="number">8</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        <span class="number">11</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">11</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">12</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">4</span>       <span class="number">8</span>     <span class="number">1</span>   res   I</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">a</span><span class="params">()</span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: invokestatic  #<span class="number">5</span>                  <span class="comment">// Method b:()I</span></span><br><span class="line">         <span class="number">3</span>: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">10</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">b</span><span class="params">()</span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: invokestatic  #<span class="number">6</span>                  <span class="comment">// Method c:()I</span></span><br><span class="line">         <span class="number">3</span>: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">14</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">c</span><span class="params">()</span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">2</span>: istore_0</span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">20</span></span><br><span class="line">         <span class="number">5</span>: istore_1</span><br><span class="line">         <span class="number">6</span>: iload_0</span><br><span class="line">         <span class="number">7</span>: iload_1</span><br><span class="line">         <span class="number">8</span>: iadd</span><br><span class="line">         <span class="number">9</span>: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">18</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">19</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">20</span>: <span class="number">6</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">3</span>       <span class="number">7</span>     <span class="number">0</span>     a   I</span><br><span class="line">            <span class="number">6</span>       <span class="number">4</span>     <span class="number">1</span>     b   I</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到在编译之后，我们整个方法的最大操作数栈深度、局部变量表都是已经确定好的，当我们程序开始执行时，会根据这些信息封装为对应的栈帧，我们从<code>main</code>方法开始看起：</p><p><img src="https://pb01.s3.bitiful.net/96.png" alt="avatar"></p><p>接着我们继续往下，到了<code> 0: invokestatic  #2                  // Method a:()I</code>时，需要调用方法<code>a()</code>，这时当前方法就不会继续向下运行了，而是去执行方法<code>a()</code>，那么同样的，将此方法也入栈，注意是放入到栈顶位置，<code>main</code>方法的栈帧会被压下去：</p><p><img src="https://pb01.s3.bitiful.net/97.png" alt="avatar"></p><p>这时，进入方法a之后，又继而进入到方法b，最后在进入c，因此，到达方法c的时候，我们的虚拟机栈变成了：</p><p><img src="https://pb01.s3.bitiful.net/98.png" alt="avatar"></p><p>现在我们依次执行方法c中的指令，最后返回a+b的结果，在方法c返回之后，也就代表方法c已经执行结束了，栈帧4会自动出栈，这时栈帧3就得到了上一栈帧返回的结果，并继续执行，但是由于紧接着马上就返回，所以继续重复栈帧4的操作，此时栈帧3也出栈并继续将结果交给下一个栈帧2，最后栈帧2再将结果返回给栈帧1，然后栈帧1就可以继续向下运行了，最后输出结果。</p><p><img src="https://pb01.s3.bitiful.net/99.png" alt="avatar"></p><h4 id="本地方法栈">本地方法栈</h4><p>和虚拟机栈所发挥的作用非常相似，区别是：<strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务</strong>。</p><p>本地方法栈在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种错误。</p><h4 id="堆">堆</h4><p>堆是整个Java应用程序共享的区域，也是整个虚拟机最大的一块内存空间，而此区域的职责就是存放和管理对象和数组。</p><p>Java 世界中“<strong>几乎</strong>”所有的对象都在堆中分配，但是，随着 JIT 编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。从 JDK 1.7 开始已经默认开启逃逸分析，<strong>如果某些方法中的对象引用没有被返回或者未被外面使用（也就是未逃逸出去），那么对象可以直接在栈上分配内存</strong>。</p><p>Java 堆是垃圾收集器管理的主要区域，因此也被称作 GC 堆（Garbage Collected Heap）。从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代；再细致一点有：Eden、Survivor、Old 等空间。进一步划分的目的是更好地回收内存，或者更快地分配内存。在 JDK 7 版本及 JDK 7 版本之前，堆内存被通常分为下面三部分：</p><ol><li>新生代内存(Young Generation)</li><li>老生代(Old Generation)</li><li>永久代(Permanent Generation)</li></ol><p>下图所示的 Eden 区、两个 Survivor 区 S0 和 S1 都属于新生代，中间一层属于老年代，最下面一层属于永久代。</p><p><img src="https://pb01.s3.bitiful.net/100.png" alt="avatar"></p><p><strong>JDK 8 版本之后 PermGen(永久代) 已被 Metaspace(元空间) 取代，元空间使用的是本地内存</strong>。</p><p>大多数情况下，对象在新生代中 Eden 区分配。当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC(新生代垃圾回收)。在一次新生代垃圾回收后，如果对象还存活，则会进入 S0 或者 S1，并且对象的年龄还会变为1(Eden 区-&gt;Survivor 区后对象的初始年龄变为 1,每经历一次Minor GC且存活下来,年龄+1)。当年龄大小超过了 survivor 区的一半时，取这个年龄和 MaxTenuringThreshold 中更小的一个值，作为新的晋升到老年代的年龄阈值(<strong>长期存活的对象进入老年代</strong>)。</p><p><strong>大对象直接进入老年代:</strong></p><p>对于一个大对象，我们会首先在Eden 尝试创建，如果创建不了，就会触发Minor GC。随后继续尝试在Eden区存放，发现仍然放不下，尝试直接进入老年代，老年代也放不下，触发 Full GC 清理空间,再次放入老年代，如果放不下就报OutOfMemory错误。</p><p>大对象直接进入老年代的行为是由虚拟机动态决定的，它与具体使用的垃圾回收器和相关参数有关。<strong>大对象直接进入老年代是一种优化策略，旨在避免将大对象放入新生代，从而减少新生代的垃圾回收频率和成本</strong>。</p><p>针对 HotSpot VM 的实现，它里面的 GC 其实准确分类只有两大种：<br><strong>1. 部分收集 (Partial GC)</strong>：</p><ul><li>新生代收集（Minor GC / Young GC）：只对新生代进行垃圾收集；</li><li>老年代收集（Major GC / Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</li><li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li></ul><p><strong>2. 整堆收集 (Full GC)</strong>：收集整个 Java 堆和方法区。</p><ul><li>触发条件1：每次晋升到老年代的对象平均大小大于老年代剩余空间</li><li>触发条件2：Minor GC后存活的对象超过了老年代剩余空间</li><li>触发条件3：永久代内存不足（JDK8之前）</li><li>触发条件4：手动调用<code>System.gc()</code>方法</li></ul><p>堆这里最容易出现的就是 OutOfMemoryError 错误，并且出现这种错误之后的表现形式还会有几种，比如：</p><ul><li><strong>java.lang.OutOfMemoryError: GC Overhead Limit Exceeded</strong>：当 JVM 花太多时间执行垃圾回收并且只能回收很少的堆空间时，就会发生此错误。</li><li><strong>java.lang.OutOfMemoryError: Java heap space</strong> :假如在创建新的对象时, 堆内存中的空间不足以存放新创建的对象, 就会引发此错误。(和配置的最大堆内存有关，且受制于物理内存大小。最大堆内存可通过-Xmx参数配置，若没有特别配置，将会使用默认值)</li></ul><h4 id="方法区">方法区</h4><p>方法区也是整个Java应用程序共享的区域，它用于存储所有的类信息、常量、静态变量、动态编译缓存等数据，可以大致分为两个部分，一个是类信息表，一个是运行时常量池。</p><p>方法区和永久代以及元空间是什么关系呢？永久代以及元空间是 HotSpot 虚拟机对虚拟机规范中方法区的两种实现方式。并且，永久代是 JDK 1.8 之前的方法区实现，JDK 1.8 及以后方法区的实现变成了元空间。</p><p><img src="https://pb01.s3.bitiful.net/101.png" alt="avatar"></p><p>首先类信息表中存放的是当前应用程序加载的所有类信息，包括类的版本、字段、方法、接口等信息，同时会将编译时生成的常量池数据全部存放到运行时常量池中。当然，常量也并不是只能从类信息中获取，在程序运行时，也有可能会有新的常量进入到常量池。</p><p><strong>运行时常量池</strong></p><p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有用于存放编译期生成的各种字面量和符号引用的 常量池表。</p><p>常量池表会在类加载后存放到方法区的运行时常量池中。运行时常量池的功能类似于传统编程语言的符号表，尽管它包含了比典型符号表更广泛的数据。</p><p><strong>字符串常量池</strong><br>字符串常量池 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p><p>JDK1.7 之前，字符串常量池存放在永久代。JDK1.7 字符串常量池和静态变量从永久代移动了 Java 堆中。</p><p><strong>JDK 1.7 为什么要将字符串常量池移动到堆中？</strong><br>主要是因为永久代（方法区实现）的 GC 回收效率太低，只有在整堆收集 (Full GC)的时候才会被执行 GC。Java 程序中通常会有大量的被创建的字符串等待回收，将字符串常量池放到堆中，能够更高效及时地回收字符串内存。</p><p>我们编写一个测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(str1 == str2);</span><br><span class="line">    System.out.println(str1.equals(str2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果也是显而易见的，由于<code>str1</code>和<code>str2</code>是单独创建的两个对象，那么这两个对象实际上会在堆中存放，保存在不同的地址：</p><p><img src="https://pb01.s3.bitiful.net/102.png" alt="avatar"></p><p>所以当我们使用<code>==</code>判断时，得到的结果<code>false</code>，而使用<code>equals</code>时因为比较的是值，所以得到<code>true</code>。现在我们来稍微修改一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(str1 == str2);</span><br><span class="line">    System.out.println(str1.equals(str2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们没有使用new的形式，而是直接使用双引号创建，那么这时得到的结果就变成了两个<code>true</code>，这是为什么呢？这其实是因为我们直接使用双引号赋值，会先在常量池中查找是否存在相同的字符串，若存在，则将引用直接指向该字符串；若不存在，则在常量池中生成一个字符串，再将引用指向该字符串：</p><p><img src="https://pb01.s3.bitiful.net/103.png" alt="avatar"></p><p>实际上两次调用String类的<code>intern()</code>方法，和上面的效果差不多，也是第一次调用会将堆中字符串复制并放入常量池中，第二次通过此方法获取字符串时，会查看常量池中是否包含，如果包含那么会直接返回常量池中字符串的地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//不能直接写&quot;abc&quot;，双引号的形式，写了就直接在常量池里面吧abc创好了</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>)+<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>)+<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(str1.intern() == str2.intern());</span><br><span class="line">    System.out.println(str1.equals(str2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/104.png" alt="avatar"></p><p>所以上述结果中得到的依然是两个<code>true</code>。在JDK1.7之后，稍微有一些区别，在调用<code>intern()</code>方法时，当常量池中没有对应的字符串时，不会再进行复制操作，而是将其直接修改为指向当前字符串堆中的的引用：</p><p><img src="https://pb01.s3.bitiful.net/105.png" alt="avatar"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">//不能直接写&quot;abc&quot;，双引号的形式，写了就直接在常量池里面吧abc创好了</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>)+<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    System.out.println(str1.intern() == str1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以最后我们会发现，<code>str1.intern()</code>和<code>str1</code>都是同一个对象，结果为<code>true</code>。</p><p>最后我们再来进行一个总结，各个内存区域的用途：</p><ul><li>（线程独有）程序计数器：保存当前程序的执行位置。</li><li>（线程独有）虚拟机栈：通过栈帧来维持方法调用顺序，帮助控制程序有序运行。</li><li>（线程独有）本地方法栈：同上，作用与本地方法。</li><li>堆：几乎所有的对象和数组都在这里保存,字符串常量池。</li><li>方法区：类信息、即时编译器的代码缓存、运行时常量池。</li></ul><h3 id="爆内存和爆栈">爆内存和爆栈</h3><p>实际上，在Java程序运行时，内存容量不可能是无限制的，当我们的对象创建过多或是数组容量过大时，就会导致我们的堆内存不足以存放更多新的对象或是数组，这时就会出现错误，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[Integer.MAX_VALUE];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们申请了一个容量为21亿多的int型数组，显然，如此之大的数组不可能放在我们的堆内存中，所以程序运行时就会这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Requested array size exceeds VM limit</span><br><span class="line">at com.test.Main.main(Main.java:<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>这里得到了一个<code>OutOfMemoryError</code>错误，也就是我们常说的内存溢出错误。我们可以通过参数来控制堆内存的最大值和最小值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms最小值 -Xmx最大值</span><br></pre></td></tr></table></figure><p>比如我们现在限制堆内存为固定值1M大小，并且在抛出内存溢出异常时保存当前的内存堆转储快照：</p><p><img src="https://pb01.s3.bitiful.net/106.png" alt="avatar"></p><p>注意堆内存不要设置太小，不然连虚拟机都不足以启动，接着我们编写一个一定会导致内存溢出的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Test&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">Test</span>());    <span class="comment">//无限创建Test对象并丢进List中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在程序运行之后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Dumping heap to java_pid35172.hprof ...</span><br><span class="line">Heap dump file created [12895344 bytes in 0.028 secs]</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at java.util.Arrays.copyOf(Arrays.java:3210)</span><br><span class="line">at java.util.Arrays.copyOf(Arrays.java:3181)</span><br><span class="line">at java.util.ArrayList.grow(ArrayList.java:267)</span><br><span class="line">at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:241)</span><br><span class="line">at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:233)</span><br><span class="line">at java.util.ArrayList.add(ArrayList.java:464)</span><br><span class="line">at com.test.Main.main(Main.java:10)</span><br></pre></td></tr></table></figure><p>可以看到错误出现原因正是<code>Java heap space</code>，也就是堆内存满了，并且根据我们设定的VM参数，堆内存保存了快照信息。我们可以在IDEA内置的Profiler中进行查看：</p><p><img src="https://pb01.s3.bitiful.net/107.png" alt="avatar"></p><p>可以很明显地看到，在创建了360146个Test对象之后，堆内存不够了，于是就抛出了内存溢出错误。</p><p>我们接着来看栈溢出，我们知道，虚拟机栈会在方法调用时插入栈帧，那么，设想如果出现无限递归的情况呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这很明显是一个永无休止的程序，并且会不断继续向下调用test方法本身，那么按照我们之前的逻辑推导，无限地插入栈帧那么一定会将虚拟机栈塞满，所以，当栈的深度已经不足以继续插入栈帧时，就会这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.StackOverflowError</span><br><span class="line">at com.test.Main.test(Main.java:12)</span><br><span class="line">at com.test.Main.test(Main.java:12)</span><br><span class="line">at com.test.Main.test(Main.java:12)</span><br><span class="line">at com.test.Main.test(Main.java:12)</span><br><span class="line">at com.test.Main.test(Main.java:12)</span><br><span class="line">at com.test.Main.test(Main.java:12)</span><br><span class="line">....以下省略很多行</span><br></pre></td></tr></table></figure><p>这也是我们常说的栈溢出，它和堆溢出比较类似，也是由于容纳不下才导致的，我们可以使用<code>-Xss</code>来设定栈容量。</p><h3 id="申请堆外内存">申请堆外内存</h3><p>除了堆内存可以存放对象数据以外，我们也可以申请堆外内存（直接内存），也就是不受JVM管控的内存区域，这部分区域的内存需要我们自行去申请和释放，实际上本质就是JVM通过C/C++调用<code>malloc</code>函数申请的内存，当然得我们自己去释放了。不过虽然是直接内存，不会受到堆内存容量限制，但是依然会受到本机最大内存的限制，所以还是有可能抛出<code>OutOfMemoryError</code>异常。</p><p>这里我们需要提到一个堆外内存操作类：<code>Unsafe</code>，就像它的名字一样，虽然Java提供堆外内存的操作类，但是实际上它是不安全的，只有你完全了解底层原理并且能够合理控制堆外内存，才能安全地使用堆外内存。</p><p>注意这个类不让我们new，也没有直接获取方式（压根就没想让我们用）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Unsafe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">registerNatives</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        registerNatives();</span><br><span class="line">        sun.reflect.Reflection.registerMethodsToFilter(Unsafe.class, <span class="string">&quot;getUnsafe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Unsafe</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Unsafe</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> &#123;</span><br><span class="line">        Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">        <span class="keyword">if</span> (!VM.isSystemDomainLoader(caller.getClassLoader()))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Unsafe&quot;</span>);   <span class="comment">//不是JDK的类，不让用。</span></span><br><span class="line">        <span class="keyword">return</span> theUnsafe;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以我们这里就通过反射给他搞出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">unsafeField</span> <span class="operator">=</span> Unsafe.class.getDeclaredFields()[<span class="number">0</span>];</span><br><span class="line">    unsafeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) unsafeField.get(<span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功拿到Unsafe类之后，我们就可以开始申请堆外内存了，比如我们现在想要申请一个int大小的内存空间，并在此空间中存放一个int类型的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">unsafeField</span> <span class="operator">=</span> Unsafe.class.getDeclaredFields()[<span class="number">0</span>];</span><br><span class="line">    unsafeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) unsafeField.get(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请4字节大小的内存空间，并得到对应位置的地址</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">address</span> <span class="operator">=</span> unsafe.allocateMemory(<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//在对应的地址上设定int的值</span></span><br><span class="line">    unsafe.putInt(address, <span class="number">6666666</span>);</span><br><span class="line">    <span class="comment">//获取对应地址上的Int型数值</span></span><br><span class="line">    System.out.println(unsafe.getInt(address));</span><br><span class="line">    <span class="comment">//释放申请到的内容</span></span><br><span class="line">    unsafe.freeMemory(address);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于内存已经释放，这时数据就没了</span></span><br><span class="line">    System.out.println(unsafe.getInt(address));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以来看一下<code>allocateMemory</code>底层是如何调用的，这是一个native方法，我们来看C++源码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UNSAFE_ENTRY</span>(jlong, <span class="built_in">Unsafe_AllocateMemory0</span>(JNIEnv *env, jobject unsafe, jlong size)) &#123;</span><br><span class="line">  <span class="type">size_t</span> sz = (<span class="type">size_t</span>)size;</span><br><span class="line"></span><br><span class="line">  sz = <span class="built_in">align_up</span>(sz, HeapWordSize);</span><br><span class="line">  <span class="type">void</span>* x = os::<span class="built_in">malloc</span>(sz, mtOther);   <span class="comment">//这里调用了os::malloc方法</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">addr_to_java</span>(x);</span><br><span class="line">&#125; UNSAFE_END</span><br></pre></td></tr></table></figure><p>接着来看：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">os::malloc</span><span class="params">(<span class="type">size_t</span> size, MEMFLAGS flags)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> os::<span class="built_in">malloc</span>(size, flags, CALLER_PC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">os::malloc</span><span class="params">(<span class="type">size_t</span> size, MEMFLAGS memflags, <span class="type">const</span> NativeCallStack&amp; stack)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">  u_char* ptr;</span><br><span class="line">  ptr = (u_char*)::<span class="built_in">malloc</span>(alloc_size);   <span class="comment">//调用C++标准库函数 malloc(size)</span></span><br><span class="line">....</span><br><span class="line">  <span class="comment">// we do not track guard memory</span></span><br><span class="line">  <span class="keyword">return</span> MemTracker::<span class="built_in">record_malloc</span>((address)ptr, size, memflags, stack, level);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，我们上面的Java代码转换为C代码，差不多就是这个意思：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> * a = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    *a = <span class="number">6666666</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *a);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以说，直接内存实际上就是JVM申请的一块额外的内存空间，但是它并不在受管控的几种内存空间中，当然这些内存依然属于是JVM的，由于JVM提供的堆内存会进行垃圾回收等工作，效率不如直接申请和操作内存来得快，一些比较追求极致性能的框架会用到堆外内存来提升运行速度，如nio框架。</p>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM启动流程(JDK8)</title>
      <link href="/2023/12/17/JVM%E5%90%AF%E5%8A%A8/"/>
      <url>/2023/12/17/JVM%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM启动流程-JDK8">JVM启动流程(JDK8)</h2><p>JVM的启动入口是位于jdk/src/share/bin/java.c的JLI_Launch函数,其定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">JLI_Launch</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv,              <span class="comment">/* main argc, argc */</span></span></span><br><span class="line"><span class="params">        <span class="type">int</span> jargc, <span class="type">const</span> <span class="type">char</span>** jargv,          <span class="comment">/* java args */</span></span></span><br><span class="line"><span class="params">        <span class="type">int</span> appclassc, <span class="type">const</span> <span class="type">char</span>** appclassv,  <span class="comment">/* app classpath */</span></span></span><br><span class="line"><span class="params">        <span class="type">const</span> <span class="type">char</span>* fullversion,                <span class="comment">/* full version defined */</span></span></span><br><span class="line"><span class="params">        <span class="type">const</span> <span class="type">char</span>* dotversion,                 <span class="comment">/* dot version defined */</span></span></span><br><span class="line"><span class="params">        <span class="type">const</span> <span class="type">char</span>* pname,                      <span class="comment">/* program name */</span></span></span><br><span class="line"><span class="params">        <span class="type">const</span> <span class="type">char</span>* lname,                      <span class="comment">/* launcher name */</span></span></span><br><span class="line"><span class="params">        jboolean javaargs,                      <span class="comment">/* JAVA_ARGS */</span></span></span><br><span class="line"><span class="params">        jboolean cpwildcard,                    <span class="comment">/* classpath wildcard */</span></span></span><br><span class="line"><span class="params">        jboolean javaw,                         <span class="comment">/* windows-only javaw */</span></span></span><br><span class="line"><span class="params">        jint     ergo_class                     <span class="comment">/* ergnomics policy */</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h4 id="1-初始化">1.初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">InitLauncher(javaw);  <span class="comment">//初始化启动器</span></span><br><span class="line">DumpState();  <span class="comment">//打印当前状态</span></span><br><span class="line"><span class="comment">//确保开启启动器跟踪状态</span></span><br><span class="line"><span class="keyword">if</span> (JLI_IsTraceLauncher()) &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Command line args:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc ; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;argv[%d] = %s\n&quot;</span>, i, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    AddOption(<span class="string">&quot;-Dsun.java.launcher.diag=true&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-选择jre版本">2.选择jre版本</h4><p>解析参数，读取manifest文件，jre版本校验，加载jre以便确认是否存在，最后将相关环境变量放置好。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SelectVersion(argc, argv, &amp;main_class);</span><br></pre></td></tr></table></figure><h4 id="3-创建JVM执行环境">3.创建JVM执行环境</h4><p>确定数据模型，是32位还是64位，以及jvm本身的一些配置在jvm.cfg文件中读取和解析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CreateExecutionEnvironment(&amp;argc, &amp;argv,</span><br><span class="line">                               jrepath, <span class="keyword">sizeof</span>(jrepath), <span class="comment">//jre路径</span></span><br><span class="line">                               jvmpath, <span class="keyword">sizeof</span>(jvmpath), <span class="comment">//jvm路径</span></span><br><span class="line">                               jvmcfg,  <span class="keyword">sizeof</span>(jvmcfg)); <span class="comment">//jvm配置文件</span></span><br></pre></td></tr></table></figure><h4 id="4-加载jvm-so库">4.加载jvm.so库</h4><p>动态加载jvm.so这个共享库，并把jvm.so中的相关函数导出并且初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!IsJavaArgs()) &#123;</span><br><span class="line">        <span class="comment">// 设置一些特殊的环境变量</span></span><br><span class="line">        SetJvmEnvironment(argc,argv);</span><br><span class="line">    &#125;</span><br><span class="line">    ifn.CreateJavaVM = <span class="number">0</span>;</span><br><span class="line">    ifn.GetDefaultJavaVMInitArgs = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (JLI_IsTraceLauncher()) &#123;</span><br><span class="line">        start = CounterGet();     <span class="comment">// 记录启动时间</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加载VM, 重中之重</span></span><br><span class="line">    <span class="keyword">if</span> (!LoadJavaVM(jvmpath, &amp;ifn)) &#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (JLI_IsTraceLauncher()) &#123;</span><br><span class="line">        end   = CounterGet();</span><br><span class="line">    &#125;</span><br><span class="line">    JLI_TraceLauncher(<span class="string">&quot;%ld micro seconds to LoadJavaVM\n&quot;</span>,</span><br><span class="line">             (<span class="type">long</span>)(jint)Counter2Micros(end-start));</span><br><span class="line">    ++argv;</span><br><span class="line">    --argc;</span><br><span class="line">    <span class="comment">// 解析更多参数信息</span></span><br><span class="line">    <span class="keyword">if</span> (IsJavaArgs()) &#123;</span><br><span class="line">        <span class="comment">/* Preprocess wrapper arguments */</span></span><br><span class="line">        TranslateApplicationArgs(jargc, jargv, &amp;argc, &amp;argv);</span><br><span class="line">        <span class="keyword">if</span> (!AddApplicationOptions(appclassc, appclassv)) &#123;</span><br><span class="line">            <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Set default CLASSPATH */</span></span><br><span class="line">        cpath = getenv(<span class="string">&quot;CLASSPATH&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cpath == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            cpath = <span class="string">&quot;.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SetClassPath(cpath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Parse command line options; if the return value of</span></span><br><span class="line"><span class="comment">     * ParseArguments is false, the program should exit.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 解析参数</span></span><br><span class="line">    <span class="keyword">if</span> (!ParseArguments(&amp;argc, &amp;argv, &amp;mode, &amp;what, &amp;ret, jrepath))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>(ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Override class path if -jar flag was specified */</span></span><br><span class="line">    <span class="keyword">if</span> (mode == LM_JAR) &#123;</span><br><span class="line">        SetClassPath(what);     <span class="comment">/* Override class path */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* set the -Dsun.java.command pseudo property */</span></span><br><span class="line">    SetJavaCommandLineProp(what, argc, argv);</span><br><span class="line">    <span class="comment">/* Set the -Dsun.java.launcher pseudo property */</span></span><br><span class="line">    SetJavaLauncherProp();</span><br><span class="line">    <span class="comment">/* set the -Dsun.java.launcher.* platform properties */</span></span><br><span class="line">    SetJavaLauncherPlatformProps();</span><br></pre></td></tr></table></figure><h4 id="5-初始化jvm">5.初始化jvm</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> JVMInit(&amp;ifn, threadStackSize, argc, argv, mode, what, ret);</span><br></pre></td></tr></table></figure><p>JVMInit函数最后一句是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);</span><br></pre></td></tr></table></figure><p>继续看ContinueInNewThread函数,会进入ContinueInNewThread0函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ContinueInNewThread0(JavaMain, threadStackSize, (<span class="type">void</span>*)&amp;args);</span><br></pre></td></tr></table></figure><p>实现在新的线程中执行JavaMain函数</p><ol><li>初始化虚拟机，如果报错直接退出。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Initialize the virtual machine */</span></span><br><span class="line">start = CounterGet();</span><br><span class="line"><span class="keyword">if</span> (!InitializeJVM(&amp;vm, &amp;env, &amp;ifn)) &#123;</span><br><span class="line">    JLI_ReportErrorMessage(JVM_ERROR1);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>加载主类</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainClass = LoadMainClass(env, mode, what);</span><br></pre></td></tr></table></figure><ol start="3"><li>获取Application Main Class</li></ol><p>某些没有主方法的Java程序比如JavaFX应用，会获取Application Main Class</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * In some cases when launching an application that needs a helper, e.g., a</span></span><br><span class="line"><span class="comment"> * JavaFX application with no main method, the mainClass will not be the</span></span><br><span class="line"><span class="comment"> * applications own main class but rather a helper class. To keep things</span></span><br><span class="line"><span class="comment"> * consistent in the UI we need to track and report the application main class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">appClass = GetApplicationClass(env);</span><br></pre></td></tr></table></figure><ol start="4"><li>初始化完成</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PostJVMInit(env, appClass, vm);</span><br></pre></td></tr></table></figure><ol start="5"><li>获取主类中的主方法</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainID = (*env)-&gt;GetStaticMethodID(env, mainClass, <span class="string">&quot;main&quot;</span>,<span class="string">&quot;([Ljava/lang/String;)V&quot;</span>);</span><br></pre></td></tr></table></figure><p>在字节码中void main(String[] args)表示为([Ljava/lang/String;)V</p><ol start="6"><li>调用主方法</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Invoke main method. */</span></span><br><span class="line">(*env)-&gt;CallStaticVoidMethod(env, mainClass, mainID, mainArgs);</span><br></pre></td></tr></table></figure><ol start="7"><li>LEAVE函数结束线程,销毁JVM</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The launcher&#x27;s exit code (in the absence of calls to</span></span><br><span class="line"><span class="comment"> * System.exit) will be non-zero if main threw an exception.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ret = (*env)-&gt;ExceptionOccurred(env) == <span class="literal">NULL</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">LEAVE();</span><br></pre></td></tr></table></figure><p>流程图如下:<br><img src="https://pb01.s3.bitiful.net/91.png" alt="avatar"></p>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西电计科微机原理实验四</title>
      <link href="/2023/12/16/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C4/"/>
      <url>/2023/12/16/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C4/</url>
      
        <content type="html"><![CDATA[<h3 id="西电计科微机原理实验四">西电计科微机原理实验四</h3><h4 id="实验要求">实验要求</h4><ol><li>流水灯实验：利用8255的A口、B口、C口循环点亮发光二极管。</li><li>根据输入控制灯的亮灭</li><li>在完成(1)基础上，增加通过读取开关控制流水灯的循环方向和循环方式。</li></ol><p>跟上一次实验基本相同,换了个芯片,然后控制的范围从八颗发光二极管变为了十六颗发光二极管</p><h4 id="基础版">基础版</h4><p>简单实现了功能1和2,全1左移,全0右移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">COM_ADD EQU 0273H </span><br><span class="line">PA_ADD EQU 0270H </span><br><span class="line">PB_ADD EQU 0271H </span><br><span class="line">PC_ADD EQU 0272H </span><br><span class="line">_STACK SEGMENT STACK </span><br><span class="line"> DW 100 DUP(?) </span><br><span class="line">_STACK ENDS </span><br><span class="line">_DATA SEGMENT WORD PUBLIC &#x27;DATA&#x27; </span><br><span class="line">_DATA ENDS </span><br><span class="line">CODE SEGMENT </span><br><span class="line">START PROC NEAR </span><br><span class="line">ASSUME CS:CODE, DS:_DATA, SS:_STACK </span><br><span class="line">MOV AX,_DATA  ; 将数据段地址加载到AX寄存器</span><br><span class="line">MOV DS,AX ; 将数据段地址传送给数据段寄存器DS</span><br><span class="line">NOP </span><br><span class="line">MOV DX,COM_ADD ; 将串口地址传送给DX寄存器</span><br><span class="line">MOV AL,82H ; 设置AL寄存器的值为82H</span><br><span class="line">OUT DX,AL </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">INPUT:</span><br><span class="line"> ; 清零操作</span><br><span class="line">MOV     AX, 0FFFFH </span><br><span class="line">MOVDX, PA_ADD</span><br><span class="line">OUT     DX, AX</span><br><span class="line">MOVDX, PC_ADD</span><br><span class="line">OUT     DX, AX</span><br><span class="line">; 输入操作</span><br><span class="line">MOVDX, PB_ADD</span><br><span class="line">INal, DX</span><br><span class="line">mov    ah, 0</span><br><span class="line"></span><br><span class="line">; 判断</span><br><span class="line">CMPal, 0FFH ;全1</span><br><span class="line">JZ low1</span><br><span class="line">CMPal, 0 ;全0</span><br><span class="line">JZ high1</span><br><span class="line">MOVDX, PA_ADD</span><br><span class="line">OUTDX, al</span><br><span class="line">JMPINPUT</span><br><span class="line">; 处理输入值为0-7的情况</span><br><span class="line">low1:</span><br><span class="line">MOVal, 7FH ; 设置AL寄存器的值为7FH</span><br><span class="line">MOVDX, PA_ADD ; 将并口PA地址传送给DX寄存器</span><br><span class="line">low2:</span><br><span class="line">ROLal, 1 ; 将AL寄存器的值左循环移位1位</span><br><span class="line">OUTDX, al</span><br><span class="line">CALL    Delay</span><br><span class="line">CMPal, 7FH</span><br><span class="line">JNElow2</span><br><span class="line">MOV    AX, 0FFFFH ; 将AX寄存器的值设为0xFFFF</span><br><span class="line">OUT     DX, AX</span><br><span class="line">; 处理输入值为8-15的情况</span><br><span class="line">low3:</span><br><span class="line">MOVal, 7FH</span><br><span class="line">MOVDX, PC_ADD</span><br><span class="line">low4:</span><br><span class="line">ROLal, 1</span><br><span class="line">OUTDX, al</span><br><span class="line">CALL    Delay</span><br><span class="line">CMPal, 7FH</span><br><span class="line">JNElow4</span><br><span class="line">JMPINPUT</span><br><span class="line"></span><br><span class="line">; 处理输入值为15-8的情况</span><br><span class="line">high1:</span><br><span class="line">MOVal, 0FEH</span><br><span class="line">MOVDX, PC_ADD</span><br><span class="line">high2:</span><br><span class="line">RORal, 1</span><br><span class="line">OUTDX, al</span><br><span class="line">CALL    Delay</span><br><span class="line">CMPal, 0FEH</span><br><span class="line">JNEhigh2</span><br><span class="line">MOV    AX, 0FFFFH</span><br><span class="line">OUT     DX, AX</span><br><span class="line">; 处理输入值为7-0的情况</span><br><span class="line">high3:</span><br><span class="line">MOVal, 0FEH</span><br><span class="line">MOVDX, PA_ADD</span><br><span class="line">high4:</span><br><span class="line">RORal, 1</span><br><span class="line">OUTDX, al</span><br><span class="line">CALL    Delay</span><br><span class="line">CMPal, 0FEH</span><br><span class="line">JNEhigh4</span><br><span class="line">JMPINPUT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Delay PROC NEAR</span><br><span class="line">Delay1:</span><br><span class="line">XORCX,CX</span><br><span class="line">LOOP$</span><br><span class="line">RET</span><br><span class="line">DelayENDP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">START ENDP </span><br><span class="line">CODE ENDS </span><br><span class="line">END START</span><br></pre></td></tr></table></figure><h4 id="完整版">完整版</h4><p>增加了一些功能:</p><ul><li>输入为11010000时,流水灯展示00001101</li><li>输入为00001111时,前8颗发光二极管左移,后8颗发光二极管右移</li><li>输入为11110000时,前8颗发光二极管右移,后8颗发光二极管左移</li></ul><p>这个版本的代码还没有在试验箱上跑过,本来我是想验证完基础版后加上的,但当时我的试验箱出了一些问题,浪费了我好多时间,所以实验的时候只跑了基础版,应该是没有问题的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">COM_ADD EQU 0273H </span><br><span class="line">PA_ADD EQU 0270H </span><br><span class="line">PB_ADD EQU 0271H </span><br><span class="line">PC_ADD EQU 0272H </span><br><span class="line">_STACK SEGMENT STACK </span><br><span class="line"> DW 100 DUP(?) </span><br><span class="line">_STACK ENDS </span><br><span class="line">_DATA SEGMENT WORD PUBLIC &#x27;DATA&#x27; </span><br><span class="line">_DATA ENDS </span><br><span class="line">CODE SEGMENT </span><br><span class="line">START PROC NEAR </span><br><span class="line">ASSUME CS:CODE, DS:_DATA, SS:_STACK </span><br><span class="line">MOV AX,_DATA  ; 将数据段地址加载到AX寄存器</span><br><span class="line">MOV DS,AX ; 将数据段地址传送给数据段寄存器DS</span><br><span class="line">NOP </span><br><span class="line">MOV DX,COM_ADD ; 将串口地址传送给DX寄存器</span><br><span class="line">MOV AL,82H ; 设置AL寄存器的值为82H</span><br><span class="line">OUT DX,AL </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">INPUT:</span><br><span class="line"> ; 清零操作</span><br><span class="line">MOV     AX, 0FFFFH </span><br><span class="line">MOVDX, PA_ADD</span><br><span class="line">OUT     DX, AX</span><br><span class="line">MOVDX, PC_ADD</span><br><span class="line">OUT     DX, AX</span><br><span class="line">; 输入操作</span><br><span class="line">MOVDX, PB_ADD</span><br><span class="line">INal, DX</span><br><span class="line">mov    ah, 0</span><br><span class="line">; 判断</span><br><span class="line">        CMPal, 0D0H </span><br><span class="line">JZ mid</span><br><span class="line">        cmp al, 0FH </span><br><span class="line">        JZ lar1 </span><br><span class="line">        cmp al, 0F0H </span><br><span class="line">        JZ ral1</span><br><span class="line">CMPal, 0FFH ;全1,</span><br><span class="line">JZ low1</span><br><span class="line">CMPal, 0 ;全0</span><br><span class="line">JZ high1</span><br><span class="line">MOVDX, PA_ADD</span><br><span class="line">OUTDX, al</span><br><span class="line">JMPINPUT</span><br><span class="line">; 处理输入值为0-7的情况</span><br><span class="line">mid:</span><br><span class="line">shl al,4</span><br><span class="line">        shr al,4</span><br><span class="line">        shr ah,4</span><br><span class="line">        add al,ah</span><br><span class="line">        mov ah,0</span><br><span class="line">        mov dx, PA_ADD ;00001101</span><br><span class="line">        out dx,ax</span><br><span class="line">        jmp INPUT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; 处理输入值为0-7的情况</span><br><span class="line">ral1:</span><br><span class="line">MOVal, 7FH ; 设置AL寄存器的值为7FH</span><br><span class="line">MOVDX, PA_ADD ; 将并口PA地址传送给DX寄存器</span><br><span class="line">ral2:</span><br><span class="line">RORal, 1 ; 将AL寄存器的值左循环移位1位</span><br><span class="line">OUTDX, al</span><br><span class="line">CALL    Delay</span><br><span class="line">CMPal, 7FH</span><br><span class="line">JNElow2</span><br><span class="line">MOV    AX, 0FFFFH ; 将AX寄存器的值设为0xFFFF</span><br><span class="line">OUT     DX, AX</span><br><span class="line">; 处理输入值为8-15的情况</span><br><span class="line">ral3:</span><br><span class="line">MOVal, 7FH</span><br><span class="line">MOVDX, PC_ADD</span><br><span class="line">ral4:</span><br><span class="line">ROLal, 1</span><br><span class="line">OUTDX, al</span><br><span class="line">CALL    Delay</span><br><span class="line">CMPal, 7FH</span><br><span class="line">JNElow4</span><br><span class="line">JMPINPUT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; 处理输入值为0-7的情况</span><br><span class="line">lar1:</span><br><span class="line">MOVal, 7FH ; 设置AL寄存器的值为7FH</span><br><span class="line">MOVDX, PA_ADD ; 将并口PA地址传送给DX寄存器</span><br><span class="line">lar2:</span><br><span class="line">ROLal, 1 ; 将AL寄存器的值左循环移位1位</span><br><span class="line">OUTDX, al</span><br><span class="line">CALL    Delay</span><br><span class="line">CMPal, 7FH</span><br><span class="line">JNElow2</span><br><span class="line">MOV    AX, 0FFFFH ; 将AX寄存器的值设为0xFFFF</span><br><span class="line">OUT     DX, AX</span><br><span class="line">; 处理输入值为8-15的情况</span><br><span class="line">lar3:</span><br><span class="line">MOVal, 7FH</span><br><span class="line">MOVDX, PC_ADD</span><br><span class="line">lar4:</span><br><span class="line">RORal, 1</span><br><span class="line">OUTDX, al</span><br><span class="line">CALL    Delay</span><br><span class="line">CMPal, 7FH</span><br><span class="line">JNElow4</span><br><span class="line">JMPINPUT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; 处理输入值为0-7的情况</span><br><span class="line">low1:</span><br><span class="line">MOVal, 7FH ; 设置AL寄存器的值为7FH</span><br><span class="line">MOVDX, PA_ADD ; 将并口PA地址传送给DX寄存器</span><br><span class="line">low2:</span><br><span class="line">ROLal, 1 ; 将AL寄存器的值左循环移位1位</span><br><span class="line">OUTDX, al</span><br><span class="line">CALL    Delay</span><br><span class="line">CMPal, 7FH</span><br><span class="line">JNElow2</span><br><span class="line">MOV    AX, 0FFFFH ; 将AX寄存器的值设为0xFFFF</span><br><span class="line">OUT     DX, AX</span><br><span class="line">; 处理输入值为8-15的情况</span><br><span class="line">low3:</span><br><span class="line">MOVal, 7FH</span><br><span class="line">MOVDX, PC_ADD</span><br><span class="line">low4:</span><br><span class="line">ROLal, 1</span><br><span class="line">OUTDX, al</span><br><span class="line">CALL    Delay</span><br><span class="line">CMPal, 7FH</span><br><span class="line">JNElow4</span><br><span class="line">JMPINPUT</span><br><span class="line"></span><br><span class="line">; 处理输入值为15-8的情况</span><br><span class="line">high1:</span><br><span class="line">MOVal, 0FEH</span><br><span class="line">MOVDX, PC_ADD</span><br><span class="line">high2:</span><br><span class="line">RORal, 1</span><br><span class="line">OUTDX, al</span><br><span class="line">CALL    Delay</span><br><span class="line">CMPal, 0FEH</span><br><span class="line">JNEhigh2</span><br><span class="line">MOV    AX, 0FFFFH</span><br><span class="line">OUT     DX, AX</span><br><span class="line">; 处理输入值为7-0的情况</span><br><span class="line">high3:</span><br><span class="line">MOVal, 0FEH</span><br><span class="line">MOVDX, PA_ADD</span><br><span class="line">high4:</span><br><span class="line">RORal, 1</span><br><span class="line">OUTDX, al</span><br><span class="line">CALL    Delay</span><br><span class="line">CMPal, 0FEH</span><br><span class="line">JNEhigh4</span><br><span class="line">JMPINPUT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Delay PROC NEAR</span><br><span class="line">Delay1:</span><br><span class="line">XORCX,CX</span><br><span class="line">LOOP$</span><br><span class="line">RET</span><br><span class="line">DelayENDP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">START ENDP </span><br><span class="line">CODE ENDS </span><br><span class="line">END START</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> xdu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西电计科微机原理实验三</title>
      <link href="/2023/12/11/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C3/"/>
      <url>/2023/12/11/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C3/</url>
      
        <content type="html"><![CDATA[<h3 id="西电计科微机原理实验三">西电计科微机原理实验三</h3><h4 id="实验要求">实验要求</h4><ol><li>开关Yi为低电平时对应的发光二极管亮，Yi为高电平时对应的发光二极管灭。</li><li>当开关Yi全为高电平时，发光二极管Qi从左至右轮流点亮。</li><li>当开关Yi全为低电平时，发光二极管Qi从右至左轮流点亮。</li><li>自主设计控制及显示模式，完成编程调试，演示实验结果。</li></ol><p>我没做要求1,当开关Yi不是全为低电平和高电平时,发光二极管Qi按1423的顺序点亮,这里可以按照自己的需求改,可以把剩下的四个也加上去,顺序也可以改,如果你要做要求1,开关Yi为某特定值时跳转Light更好(在实验四中实现类似功能)</p><h4 id="代码">代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">IO244equ230h;244</span><br><span class="line">IO273equ230h;273</span><br><span class="line"></span><br><span class="line">_stack segmentstack</span><br><span class="line">       dw 100 DUP(?)</span><br><span class="line">_stackends</span><br><span class="line"></span><br><span class="line">_data segmentword public &#x27;DATA&#x27;</span><br><span class="line">_dataends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">main proc</span><br><span class="line">        assume cs:code,ds:_data,ss:_stack</span><br><span class="line">; 初始化寄存器</span><br><span class="line">        mov    ax,_data</span><br><span class="line">        mov    ds,ax</span><br><span class="line">        mov    bx,0fefeh</span><br><span class="line">start:  mov    dx,IO244 ; 读取244引脚的输入值</span><br><span class="line">        in     al,dx</span><br><span class="line">        mov    ah,al</span><br><span class="line">        cmp    al,0ffh ; 判断输入值是否为0xff，如果不是，则进行翻转操作       </span><br><span class="line">        jnz    Next0</span><br><span class="line">        call   ROLeft ; 调用ROLeft函数进行左移操作</span><br><span class="line">        jmp    Next2</span><br><span class="line">Next0:  cmp    al,0 ; 判断输入值是否为0，如果不是，跳转Next1         </span><br><span class="line">        jnz    Next1</span><br><span class="line">        call   RORight </span><br><span class="line">        jmp    Next2</span><br><span class="line">Next1:  call   Light</span><br><span class="line">Next2:  call   Delay</span><br><span class="line">        jmp    start</span><br><span class="line">main endp</span><br><span class="line"></span><br><span class="line">ROLeft procnear</span><br><span class="line">; 左移bl寄存器，并将结果存储在al寄存器中</span><br><span class="line">        rol    bl,1</span><br><span class="line">        mov    al,bl</span><br><span class="line">; 输出左移后的值到273引脚</span><br><span class="line">        mov    dx,IO273</span><br><span class="line">        out    dx,ax</span><br><span class="line">        ret</span><br><span class="line">ROLeft endp</span><br><span class="line"></span><br><span class="line">RORight proc near</span><br><span class="line">; 右移bl寄存器，并将结果存储在al寄存器中</span><br><span class="line">        ror    bl,1</span><br><span class="line">        mov    al,bl</span><br><span class="line">        mov    dx,IO273</span><br><span class="line">        out    dx,ax</span><br><span class="line">        ret</span><br><span class="line">RORight endp</span><br><span class="line"></span><br><span class="line">Light proc near</span><br><span class="line">xor    bh,1  ;bx高八位与1异或</span><br><span class="line">        mov    al,bh</span><br><span class="line">        mov    dx,IO273</span><br><span class="line">        out    dx,ax</span><br><span class="line">call   Delay</span><br><span class="line">xor    bh,8 </span><br><span class="line">        mov    al,bh</span><br><span class="line">        mov    dx,IO273</span><br><span class="line">        out    dx,ax</span><br><span class="line">call   Delay</span><br><span class="line">xor    bh,2 </span><br><span class="line">        mov    al,bh</span><br><span class="line">        mov    dx,IO273</span><br><span class="line">        out    dx,ax</span><br><span class="line">call   Delay</span><br><span class="line">xor    bh,4 </span><br><span class="line">        mov    al,bh</span><br><span class="line">        mov    dx,IO273</span><br><span class="line">        out    dx,ax</span><br><span class="line">call   Delay</span><br><span class="line">        ret</span><br><span class="line">Light endp</span><br><span class="line"></span><br><span class="line">Delay proc near                 </span><br><span class="line">        xor    cx,cx</span><br><span class="line">delay1: loop   delay1</span><br><span class="line">        ret</span><br><span class="line">Delay endp</span><br><span class="line">code ends</span><br><span class="line">ENDmain</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> xdu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Butterfly博客添加Google分析</title>
      <link href="/2023/12/05/%E5%8D%9A%E5%AE%A2%E5%88%86%E6%9E%90/"/>
      <url>/2023/12/05/%E5%8D%9A%E5%AE%A2%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-Butterfly博客添加Google分析">Hexo Butterfly博客添加Google分析</h2><p>进入谷歌分析官网:<a href="https://analytics.google.com/analytics/web/">https://analytics.google.com/analytics/web/</a><br>如下图所示:</p><p><img src="https://pb01.s3.bitiful.net/48.png" alt="avatar"></p><p>点击开始评估</p><p><img src="https://pb01.s3.bitiful.net/50.png" alt="avatar"></p><p>输入账户名,随便填就行,点击下一步</p><p><img src="https://pb01.s3.bitiful.net/51.png" alt="avatar"></p><p>输入属性名称(随便填),填上你的博客域名,点击下一步</p><p>剩下的步骤按自己的情况填就行</p><p>最后会弹出一个弹窗,上面会有一个跟踪id,一般以UA开头,将它复制下来,在_config.butterfly.yml文件中搜索google_analytics,在这个后面把你的跟踪id填进去,如下所示:</p><p><img src="https://pb01.s3.bitiful.net/52.png" alt="avatar"></p><p>如果你小心把谷歌分析的网址关了,应该怎么找跟踪id呢?</p><p>进入后台,点击管理:<br><img src="https://pb01.s3.bitiful.net/53.png" alt="avatar"></p><p>找到资源存取管理,点击:<br><img src="https://pb01.s3.bitiful.net/54.png" alt="avatar"></p><p>点开查看使用者的账户详细资料就能找到:</p><p><img src="https://pb01.s3.bitiful.net/56.png" alt="avatar"></p><p>下图我打红色码的就是跟踪id:</p><p><img src="https://pb01.s3.bitiful.net/55.png" alt="avatar"></p><p>更改好了以后,重新部署博客,最后看到这样的页面:</p><p><img src="https://pb01.s3.bitiful.net/49.png" alt="avatar"></p><p>就大功告成啦!</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Retrofit2简明讲解</title>
      <link href="/2023/12/05/2023-12-5-Retrofit2/"/>
      <url>/2023/12/05/2023-12-5-Retrofit2/</url>
      
        <content type="html"><![CDATA[<h3 id="Retrofit2简明讲解">Retrofit2简明讲解</h3><h4 id="什么是Retrofit">什么是Retrofit</h4><p>retrofit是现在比较流行的网络请求框架，可以理解为okhttp的加强版，底层封装了okhttp。准确来说，Retrofit是一个RESTful的http网络请求框架的封装。因为网络请求工作本质上是由okhttp来完成，而Retrofit负责网络请求接口的封装。</p><p><img src="https://pb01.s3.bitiful.net/45.png" alt="avatar"></p><p><strong>本质过程</strong>：App应用程序通过Retrofit请求网络，实质上是使用Retrofit接口层封装请求参数,即Header、Url等信息，之后由okhttp来完成后续的请求工作。在服务端返回数据后，okhttp将原始数据交给Retrofit，Retrofit根据用户需求解析。</p><p><img src="https://pb01.s3.bitiful.net/46.png" alt="avatar"></p><h4 id="使用介绍">使用介绍</h4><p>使用 Retrofit 的步骤共有7个：</p><p><strong>步骤1</strong>：添加Retrofit库的依赖<br><strong>步骤2</strong>：创建 接收服务器返回数据 的类<br><strong>步骤3</strong>：创建 用于描述网络请求 的接口<br><strong>步骤4</strong>：创建Retrofit实例 并 创建网络请求接口实例<br><strong>步骤5</strong>：发送网络请求（异步 / 同步）</p><h5 id="步骤1：添加Retrofit库的依赖">步骤1：添加Retrofit库的依赖</h5><p>如图所示:</p><p><img src="https://pb01.s3.bitiful.net/47.png" alt="avatar"></p><h5 id="步骤2：创建-接收服务器返回数据-的类">步骤2：创建 接收服务器返回数据 的类</h5><p>在正式的请求网络数据中，返回的数据的外嵌套部分都是一样的，携带状态码、状态信息、实体数据一起返回，我们可以将它封装一个统一的数据回调类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatCompletionResponse</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** ID */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/** 对象 */</span></span><br><span class="line">    <span class="keyword">private</span> String object;</span><br><span class="line">    <span class="comment">/** 模型 */</span></span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line">    <span class="comment">/** 对话 */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ChatChoice&gt; choices;</span><br><span class="line">    <span class="comment">/** 创建 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> created;</span><br><span class="line">    <span class="comment">/** 耗材 */</span></span><br><span class="line">    <span class="keyword">private</span> Usage usage;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="步骤3：创建-用于描述网络请求-的接口">步骤3：创建 用于描述网络请求 的接口</h5><p>这个类就是Retrofit将okhttp请求抽象成java的接口类，用注解描述和配置网络请求参数，封装Url地址和网络数据请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IOpenAiApi</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认 GPT-3.5 问答模型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chatCompletionRequest 请求信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>                      返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@POST(&quot;v1/chat/completions&quot;)</span></span><br><span class="line">    Single&lt;ChatCompletionResponse&gt; <span class="title function_">completions</span><span class="params">(<span class="meta">@Body</span> ChatCompletionRequest chatCompletionRequest)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在方法头部添加@POST注解，表示采用post方法访问网络请求，括号内的是请求的地址(Url的一部分) ，其中返回类型是Single&lt;*&gt;，*表示接收数据的类，ChatCompletionResponse是上面封装的一个接收数据的统一公共类</p><h5 id="步骤4：创建Retrofit实例-并-创建网络请求接口实例">步骤4：创建Retrofit实例 并 创建网络请求接口实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">IOpenAiApi</span> <span class="variable">openAiApi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                .baseUrl(configuration.getApiHost())<span class="comment">//得到url</span></span><br><span class="line">                .client(okHttpClient)<span class="comment">//设置客户端</span></span><br><span class="line"><span class="comment">//        RxJava2CallAdapterFactory的主要作用是：</span></span><br><span class="line"><span class="comment">//        1.将Android的Call对象转换为RxJava的Observable类型。</span></span><br><span class="line"><span class="comment">//        2.处理Call的错误和结果，并将其转换为RxJava的onError和onNext事件。</span></span><br><span class="line"><span class="comment">//        3.添加适当的错误处理逻辑，例如重试、网络错误等。</span></span><br><span class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                .addConverterFactory(JacksonConverterFactory.create())<span class="comment">//在请求和响应中使用jackson库进行json转换</span></span><br><span class="line">                .build().create(IOpenAiApi.class);</span><br></pre></td></tr></table></figure><h5 id="步骤5：发送网络请求（异步-同步）">步骤5：发送网络请求（异步 / 同步）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultOpenAiSession</span> <span class="keyword">implements</span> <span class="title class_">OpenAiSession</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IOpenAiApi openAiApi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultOpenAiSession</span><span class="params">(IOpenAiApi openAiApi)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.openAiApi = openAiApi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ChatCompletionResponse <span class="title function_">completions</span><span class="params">(ChatCompletionRequest chatCompletionRequest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.openAiApi.completions(chatCompletionRequest).blockingGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="References">References</h4><ol><li><p><a href="https://www.jianshu.com/p/a3e162261ab6" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">Carson带你学Android：网络请求库Retrofit使用教程(含实例讲解)</a></p></li><li><p><a href="https://juejin.cn/post/6978777076073660429" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">Retrofit2 实战（一、使用详解篇）</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD架构之端口</title>
      <link href="/2023/12/04/2023-12-4-DDD%E6%9E%B6%E6%9E%84-4/"/>
      <url>/2023/12/04/2023-12-4-DDD%E6%9E%B6%E6%9E%84-4/</url>
      
        <content type="html"><![CDATA[<h3 id="DDD架构之端口">DDD架构之端口</h3><p>在领域驱动设计（DDD）的上下文中，适配器（Adapter）模式扮演着至关重要的角色。适配器模式允许将不兼容的接口转换为另一个预期的接口，从而使原本由于接口不兼容而不能一起工作的类可以协同工作。在DDD中，适配器通常与端口（Port）概念结合使用，形成&quot;端口和适配器&quot;（Ports and Adapters）架构，也称为&quot;六边形架构&quot;（Hexagonal Architecture）。这种架构风格旨在将应用程序的核心逻辑与外部世界的交互解耦。</p><h4 id="概念">概念</h4><p>Port 在这种架构中代表了应用程序的一个入口或出口点。它定义了一个与外部世界交互的接口，但不关心具体的实现细节。端口可以是驱动端口（Driving Ports，通常是输入端口）或被驱动端口（Driven Ports，通常是输出端口）。</p><h4 id="特性">特性</h4><ul><li><strong>抽象性</strong>：端口提供了服务行为的抽象描述，明确了服务的功能和外部依赖。</li><li><strong>独立性</strong>：端口独立于具体实现，允许服务实现的灵活替换或扩展。</li><li><strong>灵活性</strong>：可以为同一端口提供不同的适配器实现，以适应不同的运行环境或需求。</li></ul><h4 id="用途">用途</h4><ul><li><strong>标准定义</strong>：端口和适配器定义了服务的标准行为和外部依赖，提高了代码的可读性和可维护性。</li><li><strong>隔离变化</strong>：当外部系统变化时，只需更换或修改适配器，无需改动核心业务逻辑。</li><li><strong>促进测试</strong>：可以使用模拟适配器来测试核心逻辑，而不依赖真实的外部系统。</li></ul><h4 id="实现">实现</h4><p>实现端口和适配器架构通常涉及以下步骤：</p><ol><li><strong>定义端口</strong>：在领域层定义清晰的接口，这些接口代表了应用程序与外部世界的交互点。</li><li><strong>创建适配器</strong>：在基础层或应用层实现适配器，这些适配器负责将端口的抽象操作转换为具体的外部调用。</li><li><strong>依赖倒置</strong>：应用程序的核心逻辑依赖于端口接口，而不是适配器的具体实现。这样，适配器可以随时被替换，而不影响核心逻辑。</li><li><strong>配置和组装</strong>：在应用程序启动时，根据需要将适配器与相应的端口连接起来。</li></ol><p>通过这种方式，DDD中的适配器模式有助于构建一个灵活、可维护且易于测试的系统。</p><h4 id="案例">案例</h4><p>以下是一个简单的Java示例，展示了如何在DDD架构中实现适配器模式。在这个例子中，我们将创建一个简单的支付系统，其中包含一个支付端口和一个适配器，该适配器负责调用外部支付服务的接口。</p><p>首先，我们定义一个支付端口（Port），它是一个接口，描述了支付服务应该提供的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentPort</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">processPayment</span><span class="params">(<span class="type">double</span> amount)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们创建一个适配器，它实现了支付端口，并负责调用外部支付服务的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExternalPaymentService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">makePayment</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里是外部支付服务的具体调用逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Calling external payment service for amount: &quot;</span> + amount);</span><br><span class="line">        <span class="comment">// 假设支付总是成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentAdapter</span> <span class="keyword">implements</span> <span class="title class_">PaymentPort</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ExternalPaymentService externalPaymentService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PaymentAdapter</span><span class="params">(ExternalPaymentService externalPaymentService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.externalPaymentService = externalPaymentService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">processPayment</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用外部支付服务的接口</span></span><br><span class="line">        <span class="keyword">return</span> externalPaymentService.makePayment(amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以在应用程序的核心逻辑中使用支付端口，而不依赖于适配器的具体实现。这样，如果将来需要更换外部支付服务，我们只需提供一个新的适配器实现即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> PaymentPort paymentPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PaymentService</span><span class="params">(PaymentPort paymentPort)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.paymentPort = paymentPort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processUserPayment</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (paymentPort.processPayment(amount)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Payment processed successfully.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Payment failed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们在应用程序的启动或配置阶段组装这些组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建外部支付服务的实例</span></span><br><span class="line">        <span class="type">ExternalPaymentService</span> <span class="variable">externalPaymentService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExternalPaymentService</span>();</span><br><span class="line">        <span class="comment">// 创建适配器的实例，注入外部支付服务</span></span><br><span class="line">        <span class="type">PaymentAdapter</span> <span class="variable">paymentAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentAdapter</span>(externalPaymentService);</span><br><span class="line">        <span class="comment">// 创建支付服务的实例，注入适配器</span></span><br><span class="line">        <span class="type">PaymentService</span> <span class="variable">paymentService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentService</span>(paymentAdapter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理用户支付</span></span><br><span class="line">        paymentService.processUserPayment(<span class="number">100.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，PaymentAdapter 负责调用外部的支付接口 ExternalPaymentService.makePayment。PaymentService 使用 PaymentPort 接口与外部世界交互，这样就实现了领域逻辑与外部服务之间的解耦。如果需要更换支付服务提供商，我们只需要实现一个新的 PaymentAdapter，而不需要修改 PaymentService 的代码。</p><h3 id="References">References</h3><p><a href="https://bugstack.cn/" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">小傅哥 bugstack 虫洞栈</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计原则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenAI SDK开发(2)</title>
      <link href="/2023/12/04/2023-12-4-OpenAI-SDK%E5%BC%80%E5%8F%91-2/"/>
      <url>/2023/12/04/2023-12-4-OpenAI-SDK%E5%BC%80%E5%8F%91-2/</url>
      
        <content type="html"><![CDATA[<h2 id="OpenAI-SDK开发-2-okhttp3的sse流式应答设计">OpenAI SDK开发(2) okhttp3的sse流式应答设计</h2><p>本次开发完成了流式应答,主要使用的就是okhttp3的eventsource</p><h4 id="流程验证">流程验证</h4><p>跟之前的主要区别就是需要使用eventsource来监听流式应答,要将ChatCompletionRequest中的stream参数设置为true,以okHttpClient开启EventSource Factory,以全新的request格式传递数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_client_stream</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException, InterruptedException &#123;</span><br><span class="line">        <span class="type">HttpLoggingInterceptor</span> <span class="variable">httpLoggingInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpLoggingInterceptor</span>();</span><br><span class="line">        httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line"></span><br><span class="line">        <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span></span><br><span class="line">                .Builder()</span><br><span class="line">                .addInterceptor(httpLoggingInterceptor)</span><br><span class="line">                .addInterceptor(chain -&gt; &#123;</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">original</span> <span class="operator">=</span> chain.request();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 从请求中获取 token 参数，并将其添加到请求路径中</span></span><br><span class="line">                    <span class="type">HttpUrl</span> <span class="variable">url</span> <span class="operator">=</span> original.url().newBuilder()</span><br><span class="line">                            .addQueryParameter(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">                            .build();</span><br><span class="line"></span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> original.newBuilder()</span><br><span class="line">                            .url(url)</span><br><span class="line">                            .header(Header.AUTHORIZATION.getValue(), <span class="string">&quot;Bearer &quot;</span> + <span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">                            .header(Header.CONTENT_TYPE.getValue(), ContentType.JSON.getValue())</span><br><span class="line">                            .method(original.method(), original.body())</span><br><span class="line">                            .build();</span><br><span class="line">                    <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> Message.builder().role(Constants.Role.USER).content(<span class="string">&quot;写一个java冒泡排序&quot;</span>).build();</span><br><span class="line">        <span class="type">ChatCompletionRequest</span> <span class="variable">chatCompletion</span> <span class="operator">=</span> ChatCompletionRequest</span><br><span class="line">                .builder()</span><br><span class="line">                .messages(Collections.singletonList(message))</span><br><span class="line">                .model(ChatCompletionRequest.Model.GPT_3_5_TURBO.getCode())</span><br><span class="line">                .stream(<span class="literal">true</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        EventSource.<span class="type">Factory</span> <span class="variable">factory</span> <span class="operator">=</span> EventSources.createFactory(okHttpClient);</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestBody</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(chatCompletion);<span class="comment">//将chatCompletion转为json格式</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                .url(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">                .post(RequestBody.create(MediaType.parse(ContentType.JSON.getValue()), requestBody))</span><br><span class="line">                <span class="comment">//MediaType.parse用来声明浏览器将以什么形式、什么编码对requestBody进行解析</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">EventSource</span> <span class="variable">eventSource</span> <span class="operator">=</span> factory.newEventSource(request, <span class="keyword">new</span> <span class="title class_">EventSourceListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(EventSource eventSource, String id, String type, String data)</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;测试结果：&#123;&#125;&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>).await();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="添加方法">添加方法</h4><p>在OpenAiSession接口中添加如下方法,在传入参数为ChatCompletionRequest和EventSourceListener时采用流式应答</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 问答模型 GPT-3.5/4.0 &amp; 流式反馈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chatCompletionRequest 请求信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eventSourceListener   实现监听；通过监听的 onEvent 方法接收数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>                      返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EventSource <span class="title function_">chatCompletions</span><span class="params">(ChatCompletionRequest chatCompletionRequest, EventSourceListener eventSourceListener)</span> <span class="keyword">throws</span> JsonProcessingException;</span><br></pre></td></tr></table></figure><h4 id="实现">实现</h4><p>添加DefaultOpenAiSession类中的chatCompletions方法,实现流式应答</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> EventSource <span class="title function_">chatCompletions</span><span class="params">(ChatCompletionRequest chatCompletionRequest, EventSourceListener eventSourceListener)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="comment">// 核心参数校验；不对用户的传参做更改，只返回错误信息。</span></span><br><span class="line">    <span class="keyword">if</span> (!chatCompletionRequest.isStream()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;illegal parameter stream is false!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建请求信息</span></span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">            <span class="comment">// url: https://api.openai.com/v1/chat/completions - 通过 IOpenAiApi 配置的 POST 接口，用这样的方式从统一的地方获取配置信息</span></span><br><span class="line">            .url(configuration.getApiHost().concat(IOpenAiApi.v1_chat_completions))</span><br><span class="line">            <span class="comment">// 封装请求参数信息，如果使用了 Fastjson 也可以替换 ObjectMapper 转换对象</span></span><br><span class="line">            .post(RequestBody.create(MediaType.parse(ContentType.JSON.getValue()), <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(chatCompletionRequest)))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回结果信息；EventSource 对象可以取消应答</span></span><br><span class="line">    <span class="keyword">return</span> factory.newEventSource(request, eventSourceListener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> okhttp3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD架构之仓储</title>
      <link href="/2023/12/03/2023-12-3-DDD%E6%9E%B6%E6%9E%84-3/"/>
      <url>/2023/12/03/2023-12-3-DDD%E6%9E%B6%E6%9E%84-3/</url>
      
        <content type="html"><![CDATA[<h3 id="DDD架构之仓储">DDD架构之仓储</h3><p>Repository（仓储）模式是一种设计模式，它用于将数据访问逻辑封装起来，使得领域层可以通过一个简单、一致的接口来访问聚合根或实体对象。这个模式的关键在于提供了一个抽象的接口，领域层通过这个接口与数据存储层进行交互，而不需要知道背后具体的实现细节。</p><h4 id="特性">特性</h4><ul><li><strong>封装持久化操作</strong>：Repository负责封装所有与数据源交互的操作，如创建、读取、更新和删除（CRUD）操作。这样，领域层的代码就可以避免直接处理数据库或其他存储机制的复杂性。</li><li><strong>领域对象的集合管理</strong>：Repository通常被视为领域对象的集合，提供了查询和过滤这些对象的方法，使得领域对象的获取和管理更加方便。<br>抽象接口：Repository定义了一个与持久化机制无关的接口，这使得领域层的代码可以在不同的持久化机制之间切换，而不需要修改业务逻辑。</li></ul><h4 id="用途">用途</h4><ol><li><strong>数据访问抽象</strong>：Repository为领域层提供了一个清晰的数据访问接口，使得领域对象可以专注于业务逻辑的实现，而不是数据访问的细节。</li><li><strong>领域对象的查询和管理</strong>：Repository使得对领域对象的查询和管理变得更加方便和灵活，支持复杂的查询逻辑。</li><li><strong>领域逻辑与数据存储分离</strong>：通过Repository模式，领域逻辑与数据存储逻辑分离，提高了领域模型的纯粹性和可测试性。</li><li><strong>优化数据访问</strong>：Repository实现可以包含数据访问的优化策略，如缓存、批处理操作等，以提高应用程序的性能。</li></ol><h4 id="实现手段">实现手段</h4><p>在实践中，Repository模式通常通过以下方式实现：</p><ol><li><strong>定义Repository接口</strong>：在领域层定义一个或多个Repository接口，这些接口声明了所需的数据访问方法。</li><li><strong>实现Repository接口</strong>：在基础设施层或数据访问层实现这些接口，具体实现可能是使用ORM（对象关系映射）框架，如MyBatis、Hibernate等，或者直接使用数据库访问API，如JDBC等。</li><li><strong>依赖注入</strong>：在应用程序中使用依赖注入（DI）来将具体的Repository实现注入到需要它们的领域服务或应用服务中。这样做可以进一步解耦领域层和数据访问层，同时也便于单元测试。</li><li><strong>使用规范模式（Specification Pattern）</strong>：有时候，为了构建复杂的查询，可以结合使用规范模式，这是一种允许将业务规则封装为单独的业务逻辑单元的模式，这些单元可以被Repository用来构建查询。</li></ol><p>总之，Repository模式是DDD（领域驱动设计）中的一个核心概念，它有助于保持领域模型的聚焦和清晰，同时提供了灵活、可测试和可维护的数据访问策略。</p><h4 id="案例">案例</h4><p>以下是一个简单的Java代码示例，展示了如何在DDD架构中实现Repository模式。在这个例子中，我们将创建一个简单的用户管理系统，其中包含用户实体和用户仓储接口，以及一个基于内存的仓储实现。</p><p>首先，我们定义一个用户实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数、getter和setter省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们定义用户仓储的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> &#123;</span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Long id)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们提供一个基于内存的仓储实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InMemoryUserRepository</span> <span class="keyword">implements</span> <span class="title class_">UserRepository</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long, User&gt; database = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicLong</span> <span class="variable">idGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> database.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(database.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (user.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">            user.setId(idGenerator.incrementAndGet());</span><br><span class="line">        &#125;</span><br><span class="line">        database.put(user.getId(), user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        database.remove(user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们可以在应用服务中使用这个仓储：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserRepository userRepository)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userRepository = userRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createUser</span><span class="params">(String username, String email)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        newUser.setUsername(username);</span><br><span class="line">        newUser.setEmail(email);</span><br><span class="line">        userRepository.save(newUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他业务逻辑方法...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在实际应用中，我们通常会使用依赖注入框架（如Spring）来自动注入仓储的实现。这里为了简单起见，我们可以手动创建服务和仓储的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserRepository</span> <span class="variable">userRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserRepository</span>();</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>(userRepository);</span><br><span class="line"></span><br><span class="line">        userService.createUser(<span class="string">&quot;XiaoFuGe&quot;</span>, <span class="string">&quot;xiaofuge@qq.com&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;User found: &quot;</span> + user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子展示了Repository模式的基本结构和用法。在实际项目中，仓储的实现可能会连接到数据库，并使用ORM框架来处理数据持久化的细节。此外，仓储接口可能会包含更复杂的查询方法，以支持各种业务需求。</p><h3 id="References">References</h3><p><a href="https://bugstack.cn/" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">小傅哥 bugstack 虫洞栈</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计原则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD架构之领域,聚合,实体,值对象</title>
      <link href="/2023/12/03/2023-12-3-DDD%E6%9E%B6%E6%9E%84-2/"/>
      <url>/2023/12/03/2023-12-3-DDD%E6%9E%B6%E6%9E%84-2/</url>
      
        <content type="html"><![CDATA[<h2 id="DDD架构之领域-聚合-实体-值对象">DDD架构之领域,聚合,实体,值对象</h2><h3 id="Domain（领域）">Domain（领域）</h3><p>在DDD中，领域是指具体业务领域的知识、业务逻辑、数据以及业务规则的集合。它是软件要解决问题的业务环境，通常由一系列子领域组成，每个子领域代表业务中的一个特定部分。</p><h4 id="领域的特性">领域的特性</h4><ol><li><strong>业务中心</strong>：领域是围绕业务需求和业务规则构建的，它是软件设计的核心。</li><li><strong>模型驱动</strong>：领域模型是对业务知识的抽象，它通过领域实体、值对象、服务、聚合等概念来表达。</li><li><strong>语言一致性</strong>：领域模型的构建基于统一语言（Ubiquitous Language），这是开发团队与业务专家共同使用的语言，确保沟通无歧义。</li><li><strong>边界清晰</strong>：领域模型定义了清晰的边界，这些边界划分了不同的子领域和聚合，有助于管理复杂性和维护性。</li></ol><h4 id="领域的用途">领域的用途</h4><p>业务逻辑的封装：领域模型封装了业务逻辑，使得业务规则和数据操作集中管理，便于理解和维护。<br>沟通工具：领域模型作为开发团队与业务专家之间的共同语言，有助于提高沟通效率，确保软件开发紧密跟随业务需求。<br>软件设计的基础：领域模型是软件设计的基础，它指导着软件的架构和实现。</p><h4 id="实现手段">实现手段</h4><ol><li><strong>实体（Entity）</strong>：具有唯一标识的领域对象，代表业务中的实体。</li><li><strong>值对象（Value Object）</strong>：描述领域中的一些特性或概念，没有唯一标识，通常是不可变的。</li><li><strong>聚合（Aggregate）</strong>：一组相关的实体和值对象的集合，它们一起构成一个数据和业务规则的单元。</li><li><strong>领域服务（Domain Service）</strong>：在领域模型中执行特定业务逻辑的无状态服务，通常操作多个实体或聚合。</li><li><strong>领域事件（Domain Event）</strong>：表示领域中发生的重要业务事件，用于解耦系统的不同部分。</li><li><strong>仓储（Repository）</strong>：提供对聚合根的持久化操作，如保存和检索，通常与数据库交互。</li><li><strong>领域适配器（Domain Adapter）</strong>：领域适配器是适配器模式在DDD中的应用，它的目的是使得领域模型能够与外部系统或技术细节进行交互，而不会受到污染。</li><li><strong>工厂（Factory）</strong>：用于创建复杂的聚合或实体，封装创建逻辑。如 OpenAi项目、Lottery 项目都运用了工厂，也包括如 chatglm-sdk-java 的开发，就是会话模型结构用工厂对外提供服务。</li></ol><p>通过这些实现手段，DDD使得软件设计更加贴近业务需求，提高了软件的质量和可维护性。开发团队可以更好地理解业务逻辑，从而设计出更加健壮和灵活的系统。</p><h3 id="聚合对象">聚合对象</h3><p>聚合是一组相关对象的集合，它们一起形成一个单一的单元。</p><h4 id="概念">概念</h4><p>聚合是领域模型中的一个关键概念，它是一组具有内聚性的相关对象的集合，这些对象一起工作以执行某些业务规则或操作。聚合定义了一组对象的边界，这些对象可以被视为一个单一的单元进行处理。</p><p><strong>关键</strong>：聚合内实现事务一致性、聚合外实现最终一致性。</p><h4 id="特性">特性</h4><ol><li><strong>一致性边界</strong>：聚合确保其内部对象的状态变化是一致的。当对聚合内的对象进行操作时，这些操作必须保持聚合内所有对象的一致性。</li><li><strong>根实体</strong>：每个聚合都有一个根实体（Aggregate Root），它是聚合的入口点。根实体拥有一个全局唯一的标识符，其他对象通过根实体与聚合交互。</li><li><strong>事务边界</strong>：聚合也定义了事务的边界。在聚合内部，所有的变更操作应该是原子的，即它们要么全部成功，要么全部失败，以此来保证数据的一致性。</li></ol><h4 id="用途">用途</h4><ol><li><strong>封装业务逻辑</strong>：聚合通过将相关的对象和操作封装在一起，提供了一个清晰的业务逻辑模型，有助于业务规则的实施和维护。</li><li><strong>保证一致性</strong>：聚合确保内部状态的一致性，通过定义清晰的边界和规则，聚合可以在内部强制执行业务规则，从而保证数据的一致性。</li><li><strong>简化复杂性</strong>：聚合通过组织相关的对象，简化了领域模型的复杂性。这有助于开发者更好地理解和扩展系统。</li></ol><h4 id="实现手段-2">实现手段</h4><ol><li><strong>定义聚合根</strong>：选择合适的聚合根是实现聚合的第一步。聚合根应该是能够代表整个聚合的实体，并且拥有唯一标识。</li><li><strong>限制访问路径</strong>：只能通过聚合根来修改聚合内的对象，不允许直接修改聚合内部对象的状态，以此来维护边界和一致性。</li><li><strong>设计事务策略</strong>：在聚合内部实现事务一致性，确保操作要么全部完成，要么全部回滚。对于聚合之间的交互，可以采用领域事件或其他机制来实现最终一致性。</li><li><strong>封装业务规则</strong>：在聚合内部实现业务规则和逻辑，确保所有的业务操作都遵循这些规则。<br>持久化：聚合根通常与数据持久化层交互，以保存聚合的状态。这通常涉及到对象-关系映射（ORM）或其他数据映射技术。</li></ol><p>通过这些实现手段，DDD中的聚合模型能够帮助开发者构建出既符合业务需求又具有良好架构设计的软件系统。</p><h3 id="实体">实体</h3><p>实体（Entity）在领域驱动设计（Domain-Driven Design, DDD）中是一个核心概念，用于表示具有唯一标识的领域对象。以下是实体的详细介绍：</p><h4 id="概念-2">概念</h4><p>实体 = 唯一标识 + 状态属性 + 行为动作（功能），是DDD中的一个基本构建块，它代表了具有唯一标识的领域对象。实体不仅仅包含数据（状态属性），还包含了相关的行为（功能），并且它的标识在整个生命周期中保持不变。</p><h4 id="特性-2">特性</h4><ol><li><strong>唯一标识</strong>：实体具有一个可以区分其他实体的标识符。这个标识符可以是一个ID、一个复合键或者是一个自然键，关键是它能够唯一地标识实体实例。</li><li><strong>领域标识</strong>：实体的标识通常来源于业务领域，例如用户ID、订单ID等。这些标识符在业务上有特定的含义，并且在系统中是唯一的。</li><li><strong>委派标识</strong>：在某些情况下，实体的标识可能是由ORM（对象关系映射）框架自动生成的，如数据库中的自增主键。这种标识符虽然可以唯一标识实体，但它并不直接来源于业务领域。</li></ol><h4 id="用途-2">用途</h4><ol><li><strong>表达业务概念</strong>：实体用于在软件中表达具体的业务概念，如用户、订单、交易等。通过实体的属性和行为，可以描述这些业务对象的特征和能力。</li><li><strong>封装业务逻辑</strong>：实体不仅仅承载数据，还封装了业务规则和逻辑。这些逻辑包括验证数据的有效性、执行业务规则、计算属性值等。这样做的目的是保证业务逻辑的集中和一致性。</li><li><strong>保持数据一致性</strong>：实体负责维护自身的状态和数据一致性。它确保自己的属性和关联关系在任何时候都是正确和完整的，从而避免数据的不一致性。</li></ol><h4 id="实现手段-3">实现手段</h4><p>在实现实体时，通常会采用以下手段：</p><ol><li><strong>定义实体类</strong>：在代码中定义一个类，该类包含实体的属性、构造函数、方法等。</li><li><strong>实现唯一标识</strong>：为实体类提供一个唯一标识的属性，如ID，并确保在实体的生命周期中这个标识保持不变。</li><li><strong>封装行为</strong>：在实体类中实现业务逻辑的方法，这些方法可以操作实体的状态，并执行相关的业务规则。</li><li><strong>使用ORM框架</strong>：利用ORM框架将实体映射到数据库表中，这样可以简化数据持久化的操作。</li><li><strong>实现领域服务</strong>：对于跨实体或跨聚合的操作，可以实现领域服务来处理这些操作，而不是在实体中直接实现。</li><li><strong>使用领域事件</strong>：当实体的状态发生变化时，可以发布领域事件，这样可以通知其他部分的系统进行相应的处理。</li></ol><p>通过上述手段，实体在DDD架构中扮演着重要的角色，它不仅代表了业务概念，还封装了业务逻辑，并通过其唯一标识确保了数据的一致性。</p><h3 id="值对象">值对象</h3><p>在领域驱动设计（Domain-Driven Design, DDD）中，值对象（Value Object）是一个核心概念，用于封装和表示领域中的概念，其特点是它们描述了领域中的某些属性或度量，但不具有唯一标识。</p><p>值对象 = 值 + 对象，用于描述对象属性的值，表示具体固定不变的属性值信息。</p><h4 id="概念-3">概念</h4><p>值对象是由一组属性组成的，它们共同描述了一个领域概念。与实体（Entity）不同，值对象不需要有一个唯一的标识符来区分它们。值对象通常是不可变的，这意味着一旦创建，它们的状态就不应该改变。</p><h4 id="特性-3">特性</h4><ol><li><strong>不可变性（Immutability）</strong>：值对象一旦被创建，它的状态就不应该发生变化。这有助于保证领域模型的一致性和线程安全性。</li><li><strong>等价性（Equality）</strong>：值对象的等价性不是基于身份或引用，而是基于对象的属性值。如果两个值对象的所有属性值都相等，那么这两个对象就被认为是等价的。</li><li><strong>替换性（Replaceability）</strong>：由于值对象是不可变的，任何需要改变值对象的操作都会导致创建一个新的值对象实例，而不是修改现有的实例。</li><li><strong>侧重于描述事物的状态</strong>：值对象通常用来描述事物的状态，而不是事物的唯一身份。</li><li><strong>可复用性（Reusability）</strong>：值对象可以在不同的领域实体或其他值对象中重复使用。</li></ol><h4 id="用途-3">用途</h4><p>值对象的用途非常广泛，它们可以用来表示：</p><p>金额和货币（如价格、工资、费用等）<br>度量和数据（如重量、长度、体积等）<br>范围或区间（如日期范围、温度区间等）<br>复杂的数学模型（如坐标、向量等）<br>任何其他需要封装的属性集合</p><h4 id="实现手段-4">实现手段</h4><p>在实现值对象时，通常会遵循以下几个步骤：</p><p>定义不可变类：确保类的所有属性都是私有的，并且只能通过构造函数来设置。<br>重写equals和hashCode方法：这样可以确保值对象的等价性是基于它们的属性值，而不是对象的引用。<br>提供只读访问器：只提供获取属性值的方法，不提供修改属性值的方法。<br>使用工厂方法或构造函数创建实例：这有助于确保值对象的有效性和一致性。<br>考虑序列化支持：如果值对象需要在网络上传输或存储到数据库中，需要提供序列化和反序列化的支持。</p><h4 id="示例">示例</h4><p>以订单状态为例，可以定义一个值对象来表示不同的状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Order</span> StatusVO&#123;</span><br><span class="line">    PLACED(<span class="number">0</span>,<span class="string">&quot;下单&quot;</span>),</span><br><span class="line">    PAID(<span class="number">1</span>,<span class="string">&quot;支付&quot;</span>),</span><br><span class="line">    COMPLETED(<span class="number">2</span>,<span class="string">&quot;完成&quot;</span>),</span><br><span class="line">    CANCELLED(<span class="number">3</span>,<span class="string">&quot;退单&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">OrderStatusVO(intcode,String description)&#123;</span><br><span class="line">    <span class="built_in">this</span>.code = code;</span><br><span class="line">    <span class="built_in">this</span>.description = description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据code获取对应的OrderStatus</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">OrderStatusVOfromCode</span><span class="params">(<span class="type">int</span> code)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(OrderStatusVO status:OrderStatusVO.values())&#123;</span><br><span class="line">        <span class="keyword">if</span>(status.getCode()==code)&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">throw</span> newIllegalArgumentException(<span class="string">&quot;Invalid code for OrderStatus:&quot;</span>+code);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，OrderStatusVO是一个枚举类型的值对象，它封装了订单状态的代码和描述。它是不可变的，并且提供了基于属性值的等价性。通过定义一个枚举，我们可以确保订单状态的值是受限的，并且每个状态都有一个明确的含义。</p><p>在数据库中，订单状态可能会以整数形式存储（例如，0表示下单，1表示支付等）。在应用程序中，我们可以使用OrderStatusVO枚举来确保我们在代码中使用的是类型安全的值，而不是裸露的整数。这样可以减少错误，并提高代码的可读性和可维护性。</p><p>当需要将订单状态存储到数据库中时，我们可以存储枚举的code值。当从数据库中读取订单状态时，我们可以使用fromCode方法来将整数值转换回OrderStatusVO枚举，这样我们就可以在代码中使用丰富的枚举类型而不是简单的整数。</p><p>值对象也可以用来表示更复杂的结构，比如一个地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> classAddressVO&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Stringstreet;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Stringcity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringzipCode;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Stringcountry;</span><br><span class="line"></span><br><span class="line">    publicAddress(Stringstreet,Stringcity,StringzipCode,Stringcountry)&#123;</span><br><span class="line">        <span class="comment">//这里可以添加验证逻辑以确保地址的有效性</span></span><br><span class="line">        <span class="built_in">this</span>.street=street;</span><br><span class="line">        <span class="built_in">this</span>.city=city;</span><br><span class="line">        <span class="built_in">this</span>.zipCode=zipCode;</span><br><span class="line">        <span class="built_in">this</span>.country=country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只读访问器</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStreet</span><span class="params">()</span>&#123;</span><br><span class="line">        returnstreet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCity</span><span class="params">()</span>&#123;</span><br><span class="line">        returncity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getZipCode</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zipCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCountry</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写equals和hashCode方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Objecto)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>==o)returntrue;</span><br><span class="line">        <span class="keyword">if</span>(o==<span class="literal">null</span>||getClass()!=o.getClass())returnfalse;</span><br><span class="line">        Address address=(Address)o;</span><br><span class="line">        <span class="keyword">return</span> street.equals(address.street)&amp;&amp;</span><br><span class="line">        city.equals(address.city)&amp;&amp;</span><br><span class="line">        zipCode.equals(address.zipCode)&amp;&amp;</span><br><span class="line">        country.equals(address.country);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(street,city,zipCode,country);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，AddressVO是一个不可变的值对象，它封装了一个地址的所有部分。它提供了只读访问器，并且重写了equals和hashCode方法以确保基于属性值的等价性。这样的设计有助于确保地址的一致性，并且可以在不同的实体之间重复使用，例如用户和商店都可能有地址。</p><p>总的来说，值对象是DDD中用于封装领域概念的重要工具，它们通过提供不可变性、基于属性的等价性和替换性来帮助构建一个清晰、一致和可维护的领域模型。</p><h3 id="References">References</h3><p><a href="https://bugstack.cn/" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">小傅哥 bugstack 虫洞栈</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计原则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenAI SDK开发(1)</title>
      <link href="/2023/12/03/2023-12-3-OpenAI-SDK%E5%BC%80%E5%8F%91-1/"/>
      <url>/2023/12/03/2023-12-3-OpenAI-SDK%E5%BC%80%E5%8F%91-1/</url>
      
        <content type="html"><![CDATA[<h2 id="OpenAI-SDK开发-1">OpenAI SDK开发(1)</h2><p>本次完成的是基本框架的搭建,项目结构如下图所示:</p><p><img src="https://pb01.s3.bitiful.net/36.png" alt="avatar"></p><h3 id="common">common</h3><h5 id="Constants">Constants</h5><p>common包下定义了Constants类,里面暂时写了一个枚举对象Role,是要用在Message中的一个参数,而Message在Request和Response中都有,所以放在common包下,后面会用到.</p><p><img src="https://pb01.s3.bitiful.net/37.png" alt="avatar"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 官网支持的请求角色类型；system、user、assistant</span></span><br><span class="line"><span class="comment">     * https://platform.openai.com/docs/guides/chat/introduction</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Role</span> &#123;</span><br><span class="line"></span><br><span class="line">        SYSTEM(<span class="string">&quot;system&quot;</span>),</span><br><span class="line">        USER(<span class="string">&quot;user&quot;</span>),</span><br><span class="line">        ASSISTANT(<span class="string">&quot;assistant&quot;</span>),</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">        Role(String code) &#123;</span><br><span class="line">            <span class="built_in">this</span>.code = code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="domain">domain</h3><h4 id="chat-聊天模型">chat(聊天模型)</h4><h5 id="ChatChoice">ChatChoice</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatChoice</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> index;</span><br><span class="line">    <span class="meta">@JsonProperty(&quot;message&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Message message;</span><br><span class="line">    <span class="meta">@JsonProperty(&quot;finish_reason&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String finishReason;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面定义的是choices中的几个参数,choices参数是在Response中的</p><p><img src="https://pb01.s3.bitiful.net/38.png" alt="avatar"></p><h5 id="ChatCompletionRequest-聊天完成请求">ChatCompletionRequest(聊天完成请求)</h5><p>把model单独写了一个枚举类,定义类所需参数</p><p>这些参数里只有model和message是必须的,其他的都是可选的,所以用Builder模式来构建对象</p><p><img src="https://pb01.s3.bitiful.net/39.png" alt="avatar"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatCompletionRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 默认模型 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">model</span> <span class="operator">=</span> Model.GPT_3_5_TURBO.getCode();</span><br><span class="line">    <span class="comment">/** 问题描述 */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Message&gt; messages;</span><br><span class="line">    <span class="comment">/** 控制温度【随机性】；0到2之间。较高的值(如0.8)将使输出更加随机，而较低的值(如0.2)将使输出更加集中和确定 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">temperature</span> <span class="operator">=</span> <span class="number">0.2</span>;</span><br><span class="line">    <span class="comment">/** 多样性控制；使用温度采样的替代方法称为核心采样，其中模型考虑具有top_p概率质量的令牌的结果。因此，0.1 意味着只考虑包含前 10% 概率质量的代币 */</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;top_p&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Double</span> <span class="variable">topP</span> <span class="operator">=</span> <span class="number">1d</span>;</span><br><span class="line">    <span class="comment">/** 为每个提示生成的完成次数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/** 是否为流式输出；就是一蹦一蹦的，出来结果 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">/** 停止输出标识 */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; stop;</span><br><span class="line">    <span class="comment">/** 输出字符串限制；0 ~ 4096 */</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;max_tokens&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">maxTokens</span> <span class="operator">=</span> <span class="number">2048</span>;</span><br><span class="line">    <span class="comment">/** 频率惩罚；降低模型重复同一行的可能性 */</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;frequency_penalty&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">frequencyPenalty</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/** 存在惩罚；增强模型谈论新话题的可能性 */</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;presence_penalty&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">presencePenalty</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/** 生成多个调用结果，只显示最佳的。这样会更多的消耗你的 api token */</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;logit_bias&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Map logitBias;</span><br><span class="line">    <span class="comment">/** 调用标识，避免重复调用 */</span></span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Model</span> &#123;</span><br><span class="line">        <span class="comment">/** gpt-3.5-turbo */</span></span><br><span class="line">        GPT_3_5_TURBO(<span class="string">&quot;gpt-3.5-turbo&quot;</span>),</span><br><span class="line">        <span class="comment">/** GPT4.0 */</span></span><br><span class="line">        GPT_4(<span class="string">&quot;gpt-4&quot;</span>),</span><br><span class="line">        <span class="comment">/** GPT4.0 超长上下文 */</span></span><br><span class="line">        GPT_4_32K(<span class="string">&quot;gpt-4-32k&quot;</span>),</span><br><span class="line">        ;</span><br><span class="line">        <span class="keyword">private</span> String code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ChatCompletionResponse-聊天完成响应">ChatCompletionResponse(聊天完成响应)</h5><p>定义了Response中的参数</p><p><img src="https://pb01.s3.bitiful.net/38.png" alt="avatar"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatCompletionResponse</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** ID */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/** 对象 */</span></span><br><span class="line">    <span class="keyword">private</span> String object;</span><br><span class="line">    <span class="comment">/** 模型 */</span></span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line">    <span class="comment">/** 对话 */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ChatChoice&gt; choices;</span><br><span class="line">    <span class="comment">/** 创建 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> created;</span><br><span class="line">    <span class="comment">/** 耗材 */</span></span><br><span class="line">    <span class="keyword">private</span> Usage usage;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Message">Message</h5><p>定义的聊天消息对象，包含消息角色、消息内容、消息名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Message</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Message</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.role = builder.role;</span><br><span class="line">        <span class="built_in">this</span>.content = builder.content;</span><br><span class="line">        <span class="built_in">this</span>.name = builder.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">builder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Builder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建造者模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String role;</span><br><span class="line">        <span class="keyword">private</span> String content;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">role</span><span class="params">(Constants.Role role)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.role = role.getCode();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">content</span><span class="params">(String content)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.content = content;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">name</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Message <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="other">other</h4><h5 id="Usage-使用量">Usage(使用量)</h5><p>是Response中的一个参数,记录了token的使用量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Usage</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 提示令牌 */</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;prompt_tokens&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> promptTokens;</span><br><span class="line">    <span class="comment">/** 完成令牌 */</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;completion_tokens&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> completionTokens;</span><br><span class="line">    <span class="comment">/** 总量令牌 */</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;total_tokens&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalTokens;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getPromptTokens</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> promptTokens;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPromptTokens</span><span class="params">(<span class="type">long</span> promptTokens)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.promptTokens = promptTokens;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getCompletionTokens</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> completionTokens;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompletionTokens</span><span class="params">(<span class="type">long</span> completionTokens)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.completionTokens = completionTokens;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalTokens</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalTokens;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalTokens</span><span class="params">(<span class="type">long</span> totalTokens)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalTokens = totalTokens;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="OpenAiResponse">OpenAiResponse</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenAiResponse</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String object;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; data;</span><br><span class="line">    <span class="keyword">private</span> Error error;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Error</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String message;</span><br><span class="line">        <span class="keyword">private</span> String type;</span><br><span class="line">        <span class="keyword">private</span> String param;</span><br><span class="line">        <span class="keyword">private</span> String code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="qa-问答模型">qa(问答模型)</h4><p><img src="https://pb01.s3.bitiful.net/40.png" alt="avatar"><br>很快就不能用了,而且跟聊天模型差不多,就不贴代码了</p><h5 id="QAChoice">QAChoice</h5><p><img src="https://pb01.s3.bitiful.net/41.png" alt="avatar"></p><h5 id="QACompletionRequest">QACompletionRequest</h5><p>model和prompt参数必要,其他参数可选</p><p><img src="https://pb01.s3.bitiful.net/42.png" alt="avatar"></p><h5 id="QACompletionResponse">QACompletionResponse</h5><p><img src="https://pb01.s3.bitiful.net/43.png" alt="avatar"></p><h3 id="interceptor">interceptor</h3><h5 id="OpenAiInterceptor-自定义拦截器">OpenAiInterceptor(自定义拦截器)</h5><p>auth方法将token参数加入url对象,返回一个新的请求,intercept对该请求进行预处理，然后将处理后的请求传递给下一个拦截器（或目标方法）继续处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenAiInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** OpenAi apiKey 需要在官网申请 */</span></span><br><span class="line">    <span class="keyword">private</span> String apiKey;</span><br><span class="line">    <span class="comment">/** 访问授权接口的认证 Token */</span></span><br><span class="line">    <span class="keyword">private</span> String authToken;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OpenAiInterceptor</span><span class="params">(String apiKey, String authToken)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.apiKey = apiKey;</span><br><span class="line">        <span class="built_in">this</span>.authToken = authToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Response <span class="title function_">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> chain.proceed(<span class="built_in">this</span>.auth(apiKey, chain.request()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Request <span class="title function_">auth</span><span class="params">(String apiKey, Request original)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置Token信息；如果没有此类限制，是不需要设置的。</span></span><br><span class="line">        <span class="type">HttpUrl</span> <span class="variable">url</span> <span class="operator">=</span> original.url().newBuilder()</span><br><span class="line">                .addQueryParameter(<span class="string">&quot;token&quot;</span>, authToken)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建请求</span></span><br><span class="line">        <span class="keyword">return</span> original.newBuilder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .header(Header.AUTHORIZATION.getValue(), <span class="string">&quot;Bearer &quot;</span> + apiKey)</span><br><span class="line">                .header(Header.CONTENT_TYPE.getValue(), ContentType.JSON.getValue())</span><br><span class="line">                .method(original.method(), original.body())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="session">session</h3><h5 id="IOpenAiApi">IOpenAiApi</h5><p>定义访问接口,传入请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IOpenAiApi</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Body</span>注解用于描述一个接口中的一个方法参数，该参数将接收请求体中的表单数据。</span></span><br><span class="line"><span class="comment">     * 当处理HTTP POST请求时，通常将请求体中的表单数据映射到接口中的方法参数。</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本问答</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> qaCompletionRequest 请求信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>                    返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@POST(&quot;v1/completions&quot;)</span></span><br><span class="line">    Single&lt;QACompletionResponse&gt; <span class="title function_">completions</span><span class="params">(<span class="meta">@Body</span> QACompletionRequest qaCompletionRequest)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认 GPT-3.5 问答模型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chatCompletionRequest 请求信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>                      返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@POST(&quot;v1/chat/completions&quot;)</span></span><br><span class="line">    Single&lt;ChatCompletionResponse&gt; <span class="title function_">completions</span><span class="params">(<span class="meta">@Body</span> ChatCompletionRequest chatCompletionRequest)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="OpenAiSession">OpenAiSession</h5><p>会话接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OpenAiSession</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本问答</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> qaCompletionRequest 请求信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>                    返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    QACompletionResponse <span class="title function_">completions</span><span class="params">(QACompletionRequest qaCompletionRequest)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本问答；简单请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> question 请求信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>         返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    QACompletionResponse <span class="title function_">completions</span><span class="params">(String question)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认 GPT-3.5 问答模型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chatCompletionRequest 请求信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>                      返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ChatCompletionResponse <span class="title function_">completions</span><span class="params">(ChatCompletionRequest chatCompletionRequest)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="OpenAiSessionFactory">OpenAiSessionFactory</h5><p>会话工厂接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OpenAiSessionFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    OpenAiSession <span class="title function_">openSession</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Configuration">Configuration</h5><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Configuration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String apiKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String apiHost;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line"><span class="comment">//    @NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String authToken;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="DefaultOpenAiSession">DefaultOpenAiSession</h5><p>实现OpenAiSession接口</p><p>blockingGet()是RxJava中Single<T>中的方法,用于将当前线程阻塞,这里的作用是将异步计算的结果转换为同步结果，使得调用这个方法的线程会等待异步计算完成后才继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultOpenAiSession</span> <span class="keyword">implements</span> <span class="title class_">OpenAiSession</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IOpenAiApi openAiApi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultOpenAiSession</span><span class="params">(IOpenAiApi openAiApi)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.openAiApi = openAiApi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> QACompletionResponse <span class="title function_">completions</span><span class="params">(QACompletionRequest qaCompletionRequest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.openAiApi.completions(qaCompletionRequest).blockingGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> QACompletionResponse <span class="title function_">completions</span><span class="params">(String question)</span> &#123;</span><br><span class="line">        <span class="type">QACompletionRequest</span> <span class="variable">request</span> <span class="operator">=</span> QACompletionRequest</span><br><span class="line">                .builder()</span><br><span class="line">                .prompt(question)</span><br><span class="line">                .build();</span><br><span class="line">        Single&lt;QACompletionResponse&gt; completions = <span class="built_in">this</span>.openAiApi.completions(request);</span><br><span class="line">        <span class="keyword">return</span> completions.blockingGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ChatCompletionResponse <span class="title function_">completions</span><span class="params">(ChatCompletionRequest chatCompletionRequest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.openAiApi.completions(chatCompletionRequest).blockingGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="DefaultOpenAiSessionFactory">DefaultOpenAiSessionFactory</h5><p>实现OpenAiSessionFactory接口,其实实现的是IOpenAiApi接口,返回一个DefaultOpenAiSession(openAiApi)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultOpenAiSessionFactory</span> <span class="keyword">implements</span> <span class="title class_">OpenAiSessionFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultOpenAiSessionFactory</span><span class="params">(Configuration configuration)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OpenAiSession <span class="title function_">openSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 日志配置</span></span><br><span class="line">        <span class="type">HttpLoggingInterceptor</span> <span class="variable">httpLoggingInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpLoggingInterceptor</span>();</span><br><span class="line">        httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.HEADERS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 开启 Http 客户端</span></span><br><span class="line">        <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span></span><br><span class="line">                .Builder()</span><br><span class="line">                .addInterceptor(httpLoggingInterceptor)</span><br><span class="line">                .addInterceptor(<span class="keyword">new</span> <span class="title class_">OpenAiInterceptor</span>(configuration.getApiKey(), configuration.getAuthToken()))</span><br><span class="line">                .connectTimeout(<span class="number">450</span>, TimeUnit.SECONDS)</span><br><span class="line">                .writeTimeout(<span class="number">450</span>, TimeUnit.SECONDS)</span><br><span class="line">                .readTimeout(<span class="number">450</span>, TimeUnit.SECONDS)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 实现IOpenAiApi接口,创建 API 服务,即网络请求接口对象实例</span></span><br><span class="line">        <span class="type">IOpenAiApi</span> <span class="variable">openAiApi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                .baseUrl(configuration.getApiHost())<span class="comment">//得到url</span></span><br><span class="line">                .client(okHttpClient)<span class="comment">//设置客户端</span></span><br><span class="line"><span class="comment">//        RxJava2CallAdapterFactory的主要作用是：</span></span><br><span class="line"><span class="comment">//        1.将Android的Call对象转换为RxJava的Observable类型。</span></span><br><span class="line"><span class="comment">//        2.处理Call的错误和结果，并将其转换为RxJava的onError和onNext事件。</span></span><br><span class="line"><span class="comment">//        3.添加适当的错误处理逻辑，例如重试、网络错误等。</span></span><br><span class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                .addConverterFactory(JacksonConverterFactory.create())<span class="comment">//在请求和响应中使用jackson库进行json转换</span></span><br><span class="line">                .build().create(IOpenAiApi.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultOpenAiSession</span>(openAiApi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试">单元测试</h3><p>传url,key,token和request就行</p><p><img src="https://pb01.s3.bitiful.net/44.png" alt="avatar"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OpenAiSession openAiSession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_OpenAiSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 配置文件</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        configuration.setApiHost(<span class="string">&quot;https://api.openai-proxy.com/&quot;</span>);</span><br><span class="line">        configuration.setApiKey(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        configuration.setAuthToken(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 会话工厂</span></span><br><span class="line">        <span class="type">OpenAiSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultOpenAiSessionFactory</span>(configuration);</span><br><span class="line">        <span class="comment">// 3. 开启会话</span></span><br><span class="line">        <span class="built_in">this</span>.openAiSession = factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此对话模型 3.5 接近于官网体验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_chat_completions</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建参数</span></span><br><span class="line">        <span class="type">ChatCompletionRequest</span> <span class="variable">chatCompletion</span> <span class="operator">=</span> ChatCompletionRequest</span><br><span class="line">                .builder()</span><br><span class="line">                .messages(Collections.singletonList(Message.builder().role(Constants.Role.USER).content(<span class="string">&quot;写一个java冒泡排序&quot;</span>).build()))</span><br><span class="line">                .model(ChatCompletionRequest.Model.GPT_3_5_TURBO.getCode())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 2. 发起请求</span></span><br><span class="line">        <span class="type">ChatCompletionResponse</span> <span class="variable">chatCompletionResponse</span> <span class="operator">=</span> openAiSession.completions(chatCompletion);</span><br><span class="line">        <span class="comment">// 3. 解析结果</span></span><br><span class="line">        chatCompletionResponse.getChoices().forEach(e -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;测试结果：&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>西电计科微机原理实验二(详细注释版)</title>
      <link href="/2023/12/02/2023-12-2-%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C2/"/>
      <url>/2023/12/02/2023-12-2-%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C2/</url>
      
        <content type="html"><![CDATA[<h3 id="西电计科微机原理实验二-详细注释版">西电计科微机原理实验二(详细注释版)</h3><p><strong>环境</strong>:VSCode+MASM/TASM插件(建议使用相同环境,学校机房环境有点老,可能会出一些奇怪的问题)</p><p><img src="https://pb01.s3.bitiful.net/32.png" alt="avatar"></p><h4 id="实验要求">实验要求</h4><ol><li>输入一个不超过5位的十进制数,回车结束输入,并将其转换为二进制数,输出到屏幕上</li><li>输入非数字字符,报错,重新输入</li><li>输入q或Q,结束程序</li><li>输入字符串,空格结束输入,统计字符串中数字的个数 <strong>(选做)</strong></li></ol><h4 id="基础版本-不做4">基础版本(不做4)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">_STACK SEGMENT PARA STACK&#x27;_STACK&#x27;</span><br><span class="line">DB 128 DUP(0)</span><br><span class="line">_STACK ENDS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DATA SEGMENT</span><br><span class="line">    hello DB &#x27;Input a number or an instruction!!Q OR q: EXIT&#x27;,0AH,0DH,&#x27;$&#x27;</span><br><span class="line">    wrong DB 0AH,0DH,&#x27;Wrong Input(only numbers!)&#x27;,0AH,0DH,&#x27;$&#x27;</span><br><span class="line">    endofhex DB 0AH,0DH,&#x27;Binary:&#x27;,0AH,0DH,&#x27;$&#x27;</span><br><span class="line">    finish DB 0AH,0DH,&#x27;Finished&#x27;,0AH,0DH,&#x27;$&#x27;</span><br><span class="line">    got DB 5 DUP(0)</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">assume cs:CODE,ds:DATA,ss:_STACK</span><br><span class="line"></span><br><span class="line">START:</span><br><span class="line"></span><br><span class="line">beginofread:</span><br><span class="line">    mov ax,DATA</span><br><span class="line">    mov ds,ax</span><br><span class="line">    ;取偏移地址</span><br><span class="line">    mov dx,offset hello</span><br><span class="line">    ;显示字符串</span><br><span class="line">    mov ah,09H</span><br><span class="line">    int 21H</span><br><span class="line">    ; 清零BX</span><br><span class="line">    mov bx,0H</span><br><span class="line">    ; 初始化DI和CX</span><br><span class="line">    mov di,offset got</span><br><span class="line">    mov cx,0H</span><br><span class="line">readchar:</span><br><span class="line">    ; 读取字符</span><br><span class="line">    mov ah,01H</span><br><span class="line">    int 21H</span><br><span class="line">    ; 比较BX是否为0，如果不是，跳到notfirst</span><br><span class="line">    cmp bx,0H</span><br><span class="line">    jne notfirst</span><br><span class="line">    ; 比较AL是否为Q或q，如果是，则退出程序</span><br><span class="line">    cmp al,&#x27;Q&#x27;</span><br><span class="line">    je exit</span><br><span class="line">    cmp al,&#x27;q&#x27;</span><br><span class="line">    je exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">notfirst:</span><br><span class="line">;判断是否合法</span><br><span class="line">    mov bx,01H</span><br><span class="line">    call legalcheck</span><br><span class="line">;不合法重新开始</span><br><span class="line">    cmp bx,02H</span><br><span class="line">    je beginofread</span><br><span class="line">;换行输入结束</span><br><span class="line">    cmp bx,04H</span><br><span class="line">    je endofinput</span><br><span class="line"></span><br><span class="line">    jmp loadinmemory</span><br><span class="line"></span><br><span class="line">loadinmemory:</span><br><span class="line">;输入存入内存</span><br><span class="line">    mov [di],al</span><br><span class="line">    inc cx</span><br><span class="line">    inc di</span><br><span class="line">    jmp readchar</span><br><span class="line"></span><br><span class="line">endofinput:</span><br><span class="line">;取前5位</span><br><span class="line">    mov dx,0H</span><br><span class="line">    mov di,offset got</span><br><span class="line"></span><br><span class="line">;将数字转换为ascii码</span><br><span class="line">beginofhandle:</span><br><span class="line">    mov bx,0H</span><br><span class="line">    mov bl,[di]</span><br><span class="line">    ; 将寄存器BX中的值减去30H</span><br><span class="line">    sub bx,30H  </span><br><span class="line">    add dx,bx</span><br><span class="line">    ;处理完毕</span><br><span class="line">    cmp cx,1H</span><br><span class="line">    je endofhandle</span><br><span class="line">    ;ax清零,乘10</span><br><span class="line">    call mulAHdxtodx</span><br><span class="line">    ;待处理字符减一</span><br><span class="line">    dec cx</span><br><span class="line">    ;下一位</span><br><span class="line">    inc di</span><br><span class="line">    jmp beginofhandle</span><br><span class="line"></span><br><span class="line">;输出ASCII码</span><br><span class="line">endofhandle:</span><br><span class="line">;输出2进制</span><br><span class="line">    call binaryoutput</span><br><span class="line">;跳转重新开始</span><br><span class="line">    jmp beginofread</span><br><span class="line"></span><br><span class="line">binaryoutput:</span><br><span class="line">    mov bx,dx</span><br><span class="line">    mov dx,0H</span><br><span class="line">    mov cx,10H ;循环16次</span><br><span class="line">    ;开始循环</span><br><span class="line">beginofoutputloop:</span><br><span class="line">;左移1位</span><br><span class="line">    shl bx,1</span><br><span class="line">;不进位则跳转</span><br><span class="line">    jnc out0</span><br><span class="line">    mov dl,&#x27;1&#x27;</span><br><span class="line">    jmp outputdl</span><br><span class="line">out0:</span><br><span class="line">    mov dl,&#x27;0&#x27;</span><br><span class="line">outputdl:</span><br><span class="line">    mov ah,02H</span><br><span class="line">    int 21H</span><br><span class="line">    dec cx ;循环次数减1</span><br><span class="line">    cmp cx,0H ;判断循环是否结束</span><br><span class="line">    jne beginofoutputloop</span><br><span class="line">    ;结束循环,输出结束语句</span><br><span class="line">    mov dx,offset finish </span><br><span class="line">    mov ah,09H </span><br><span class="line">    int 21H</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">legalcheck:</span><br><span class="line">;判断换行</span><br><span class="line">    cmp al,0DH</span><br><span class="line">    je endlegalnextline</span><br><span class="line">;判断数字0-9</span><br><span class="line">    cmp al,30H</span><br><span class="line">    jb endlegalfalse</span><br><span class="line">    cmp al,39H</span><br><span class="line">    ja endlegalfalse</span><br><span class="line"></span><br><span class="line">endlegaltrue:</span><br><span class="line">    mov bx,03H</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">endlegalnextline:</span><br><span class="line">    mov bx,04H</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">endlegalfalse:</span><br><span class="line">;输出wrong语句</span><br><span class="line">    mov dx,offset wrong</span><br><span class="line">    mov ah,09H</span><br><span class="line">    int 21H</span><br><span class="line">;重新开始程序</span><br><span class="line">    mov bx,02H</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mulAHdxtodx:</span><br><span class="line">    mov bx,0H</span><br><span class="line">    mov ax,0H</span><br><span class="line">    </span><br><span class="line">loopofmul:</span><br><span class="line">    add ax,dx</span><br><span class="line">    inc bx</span><br><span class="line">    cmp bx,0AH</span><br><span class="line">    jb loopofmul</span><br><span class="line">    mov dx,ax</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">exit:</span><br><span class="line">    mov ah,4CH</span><br><span class="line">    int 21H</span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong></p><p><img src="https://pb01.s3.bitiful.net/34.png" alt="avatar"></p><h4 id="完整版-实验结束后完成">完整版(实验结束后完成)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line">_STACK SEGMENT PARA STACK&#x27;_STACK&#x27;</span><br><span class="line">DB 128 DUP(0)</span><br><span class="line">_STACK ENDS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DATA SEGMENT</span><br><span class="line">    hello DB &#x27;Input a number or an instruction!!Q OR q: EXIT,s:SEARCH&#x27;,0AH,0DH,&#x27;$&#x27;</span><br><span class="line">    wrong DB 0AH,0DH,&#x27;Wrong Input(only numbers!)&#x27;,0AH,0DH,&#x27;$&#x27;</span><br><span class="line">    endofhex DB 0AH,0DH,&#x27;Binary:&#x27;,0AH,0DH,&#x27;$&#x27;</span><br><span class="line">    finish DB 0AH,0DH,&#x27;Finished&#x27;,0AH,0DH,&#x27;$&#x27;</span><br><span class="line">    hello2 DB 0AH,0DH,&#x27;Search number inyour string. Space to end input&#x27;,0AH,0DH,&#x27;Input string:&#x27;,0AH,0DH,&#x27;$&#x27;</span><br><span class="line">    finish2 DB 0AH,0DH,&#x27;FINISHED!!!&#x27;,0AH,0DH,&#x27;THERE ARE &#x27;,&#x27;$&#x27;</span><br><span class="line">    finish3 DB &#x27; numbers&#x27;,0AH,0DH,&#x27;$&#x27;</span><br><span class="line">    got DB 5 DUP(0)</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">assume cs:CODE,ds:DATA,ss:_STACK</span><br><span class="line"></span><br><span class="line">START:</span><br><span class="line"></span><br><span class="line">beginofread:</span><br><span class="line">    mov ax,DATA</span><br><span class="line">    mov ds,ax</span><br><span class="line">    ;取偏移地址</span><br><span class="line">    mov dx,offset hello</span><br><span class="line">    ;显示字符串</span><br><span class="line">    mov ah,09H</span><br><span class="line">    int 21H</span><br><span class="line">    ; 清零BX</span><br><span class="line">    mov bx,0H</span><br><span class="line">    ; 初始化DI和CX</span><br><span class="line">    mov di,offset got</span><br><span class="line">    mov cx,0H</span><br><span class="line">readchar:</span><br><span class="line">    ; 读取字符</span><br><span class="line">    mov ah,01H</span><br><span class="line">    int 21H</span><br><span class="line">    ; 比较BX是否为0，如果不是，跳到notfirst</span><br><span class="line">    cmp bx,0H</span><br><span class="line">    jne notfirst</span><br><span class="line">    ; 比较AL是否为Q或q，如果是，则退出程序</span><br><span class="line">    cmp al,&#x27;Q&#x27;</span><br><span class="line">    je exit</span><br><span class="line">    cmp al,&#x27;q&#x27;</span><br><span class="line">    je exit</span><br><span class="line">    ; 比较AL是否为s，如果是，则进行搜索操作</span><br><span class="line">    cmp al,&#x27;s&#x27;</span><br><span class="line">    je counterofnumber</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">notfirst:</span><br><span class="line">;判断是否合法</span><br><span class="line">    mov bx,01H</span><br><span class="line">    call legalcheck</span><br><span class="line">;不合法重新开始</span><br><span class="line">    cmp bx,02H</span><br><span class="line">    je beginofread</span><br><span class="line">;换行输入结束</span><br><span class="line">    cmp bx,04H</span><br><span class="line">    je endofinput</span><br><span class="line"></span><br><span class="line">    jmp loadinmemory</span><br><span class="line"></span><br><span class="line">loadinmemory:</span><br><span class="line">;输入存入内存</span><br><span class="line">    mov [di],al</span><br><span class="line">    inc cx</span><br><span class="line">    inc di</span><br><span class="line">    jmp readchar</span><br><span class="line"></span><br><span class="line">endofinput:</span><br><span class="line">;取前5位</span><br><span class="line">    mov dx,0H</span><br><span class="line">    mov di,offset got</span><br><span class="line"></span><br><span class="line">;将数字转换为ascii码</span><br><span class="line">beginofhandle:</span><br><span class="line">    mov bx,0H</span><br><span class="line">    mov bl,[di]</span><br><span class="line">    ; 将寄存器BX中的值减去30H</span><br><span class="line">    sub bx,30H  </span><br><span class="line">    add dx,bx</span><br><span class="line">    ;处理完毕</span><br><span class="line">    cmp cx,1H</span><br><span class="line">    je endofhandle</span><br><span class="line">    ;ax清零,乘10</span><br><span class="line">    call mulAHdxtodx</span><br><span class="line">    ;待处理字符减一</span><br><span class="line">    dec cx</span><br><span class="line">    ;下一位</span><br><span class="line">    inc di</span><br><span class="line">    jmp beginofhandle</span><br><span class="line"></span><br><span class="line">;输出ASCII码</span><br><span class="line">endofhandle:</span><br><span class="line">;输出2进制</span><br><span class="line">    call binaryoutput</span><br><span class="line">;跳转重新开始</span><br><span class="line">    jmp beginofread</span><br><span class="line"></span><br><span class="line">binaryoutput:</span><br><span class="line">    mov bx,dx</span><br><span class="line">    mov dx,0H</span><br><span class="line">    mov cx,10H ;循环16次</span><br><span class="line">    ;开始循环</span><br><span class="line">beginofoutputloop:</span><br><span class="line">;左移1位</span><br><span class="line">    shl bx,1</span><br><span class="line">;不进位则跳转</span><br><span class="line">    jnc out0</span><br><span class="line">    mov dl,&#x27;1&#x27;</span><br><span class="line">    jmp outputdl</span><br><span class="line">out0:</span><br><span class="line">    mov dl,&#x27;0&#x27;</span><br><span class="line">outputdl:</span><br><span class="line">    mov ah,02H</span><br><span class="line">    int 21H</span><br><span class="line">    dec cx ;循环次数减1</span><br><span class="line">    cmp cx,0H ;判断循环是否结束</span><br><span class="line">    jne beginofoutputloop</span><br><span class="line">    ;结束循环,输出结束语句</span><br><span class="line">    mov dx,offset finish </span><br><span class="line">    mov ah,09H </span><br><span class="line">    int 21H</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">legalcheck:</span><br><span class="line">;判断换行</span><br><span class="line">    cmp al,0DH</span><br><span class="line">    je endlegalnextline</span><br><span class="line">;判断数字0-9</span><br><span class="line">    cmp al,30H</span><br><span class="line">    jb endlegalfalse</span><br><span class="line">    cmp al,39H</span><br><span class="line">    ja endlegalfalse</span><br><span class="line"></span><br><span class="line">endlegaltrue:</span><br><span class="line">    mov bx,03H</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">endlegalnextline:</span><br><span class="line">    mov bx,04H</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">endlegalfalse:</span><br><span class="line">;输出wrong语句</span><br><span class="line">    mov dx,offset wrong</span><br><span class="line">    mov ah,09H</span><br><span class="line">    int 21H</span><br><span class="line">;重新开始程序</span><br><span class="line">    mov bx,02H</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">mulAHdxtodx:</span><br><span class="line">    mov bx,0H</span><br><span class="line">    mov ax,0H</span><br><span class="line">    </span><br><span class="line">loopofmul:</span><br><span class="line">    add ax,dx</span><br><span class="line">    inc bx</span><br><span class="line">    cmp bx,0AH</span><br><span class="line">    jb loopofmul</span><br><span class="line">    mov dx,ax</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">counterofnumber:</span><br><span class="line">    mov dx,offset hello2</span><br><span class="line">    mov ah,09H</span><br><span class="line">    int 21H</span><br><span class="line">    mov cx,0H</span><br><span class="line">beginofcount:</span><br><span class="line">    mov ah,01H</span><br><span class="line">    int 21H</span><br><span class="line">    ;空格完成输入</span><br><span class="line">    cmp al,20H</span><br><span class="line">    je endofcount</span><br><span class="line">    cmp al,30H</span><br><span class="line">    jb notnum</span><br><span class="line">    cmp al,39H</span><br><span class="line">    ja notnum</span><br><span class="line">isnum:</span><br><span class="line">    inc cx</span><br><span class="line">    jmp beginofcount</span><br><span class="line">notnum:</span><br><span class="line">    jmp beginofcount</span><br><span class="line">endofcount:</span><br><span class="line">    add cx,30H</span><br><span class="line">    mov dx,offset finish2</span><br><span class="line">    mov ah,09H</span><br><span class="line">    int 21H</span><br><span class="line">    mov dx,0H</span><br><span class="line">    mov dl,cl</span><br><span class="line">    mov ah,02H</span><br><span class="line">    int 21H</span><br><span class="line">    mov dx,offset finish3</span><br><span class="line">    mov ah,09H</span><br><span class="line">    int 21H</span><br><span class="line">    ;跳回开始位置</span><br><span class="line">    jmp beginofread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exit:</span><br><span class="line">    mov ah,4CH</span><br><span class="line">    int 21H</span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果:</strong><br><img src="https://pb01.s3.bitiful.net/35.png" alt="avatar"></p>]]></content>
      
      
      <categories>
          
          <category> xdu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西电计科微机原理实验一(详细注释版)</title>
      <link href="/2023/12/02/2023-12-2-%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C1/"/>
      <url>/2023/12/02/2023-12-2-%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C1/</url>
      
        <content type="html"><![CDATA[<h3 id="西电计科微机原理实验一-详细注释版">西电计科微机原理实验一(详细注释版)</h3><p><strong>环境</strong>:VSCode+MASM/TASM插件(建议使用相同环境,学校机房环境有点老,可能会出一些奇怪的问题)</p><p><img src="https://pb01.s3.bitiful.net/32.png" alt="avatar"></p><h4 id="实验要求">实验要求</h4><ol><li>打印Hello World!</li><li>打印输入的姓名</li><li>打印输入的id</li><li>将输入的字符转换成ASCII码</li><li>输入q或Q退出程序</li></ol><h4 id="代码">代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">stack segment</span><br><span class="line">    db 128 dup(0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">   msg1 db &#x27;hello world!$&#x27;       ; 定义一个字符串，表示“hello world!”</span><br><span class="line">   msg2 db &#x27;please input your name:$&#x27;  ; 定义一个字符串，表示提示输入名字</span><br><span class="line">   msg3 db &#x27;please input your id:$&#x27;    ; 定义一个字符串，表示提示输入ID</span><br><span class="line">   msg4 db &#x27;please input a char:$&#x27;    ; 定义一个字符串，表示提示输入一个字符</span><br><span class="line">   buffer db &#x27;$&#x27;                  ; 定义一个字符串，表示空字符串 </span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">assume cs:code,ds:data</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">; 将数据段地址赋值给AX</span><br><span class="line">    mov ax,data</span><br><span class="line">    ; 将AX的值赋值给DS</span><br><span class="line">    mov ds,ax</span><br><span class="line">    ; 将AX的值赋值给ES</span><br><span class="line">    mov es,ax</span><br><span class="line"></span><br><span class="line">; 显示“hello world!”字符串</span><br><span class="line">    lea dx, msg1</span><br><span class="line">    mov ah, 9</span><br><span class="line">    int 21h  ;中断调用指令</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">; 回车换行</span><br><span class="line">    mov dl, 0Dh  </span><br><span class="line">    mov ah, 2  </span><br><span class="line">    int 21h</span><br><span class="line">mov dl, 0Ah</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h</span><br><span class="line"></span><br><span class="line">; 提示输入名字</span><br><span class="line">    lea dx, msg2</span><br><span class="line">    mov ah, 9</span><br><span class="line">    int 21h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ; 输入名字</span><br><span class="line">    lea dx, buffer</span><br><span class="line">    mov ah, 0Ah</span><br><span class="line">    mov al, 00h</span><br><span class="line">    int 21h</span><br><span class="line">    ; 清空缓冲区</span><br><span class="line">    xor bx,bx</span><br><span class="line">mov bl,buffer[1]</span><br><span class="line">mov buffer[bx+2],&#x27;$&#x27;</span><br><span class="line"></span><br><span class="line">    ;换行</span><br><span class="line">mov dl,0Dh</span><br><span class="line">mov ah,2</span><br><span class="line">int 21h</span><br><span class="line">mov dl,0Ah</span><br><span class="line">mov ah,2</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">;输出姓名</span><br><span class="line">lea dx, offset [buffer+2]      </span><br><span class="line">    mov ah, 09h</span><br><span class="line">    int 21h</span><br><span class="line"></span><br><span class="line">;换行</span><br><span class="line">mov dl,0Dh</span><br><span class="line">mov ah,2</span><br><span class="line">int 21h</span><br><span class="line">mov dl,0Ah</span><br><span class="line">mov ah,2</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; 提示输入ID</span><br><span class="line">lea dx, msg3</span><br><span class="line">mov ah,9</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">; 提示输入ID的后续操作</span><br><span class="line">lea dx,buffer</span><br><span class="line">mov ah,0Ah</span><br><span class="line">mov al,00h</span><br><span class="line">int 21h</span><br><span class="line"> </span><br><span class="line">;清空缓冲区</span><br><span class="line">xor bx,bx</span><br><span class="line">mov bl,buffer[1]</span><br><span class="line">mov buffer[bx+2],&#x27;$&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;换行</span><br><span class="line">mov dl,0Dh</span><br><span class="line">mov ah,2</span><br><span class="line">int 21h</span><br><span class="line">mov dl,0Ah</span><br><span class="line">mov ah,2</span><br><span class="line">int 21h</span><br><span class="line"></span><br><span class="line">; 显示ID</span><br><span class="line">lea dx, offset [buffer+2]      </span><br><span class="line">    mov ah, 09h</span><br><span class="line">    int 21h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmpq:</span><br><span class="line">mov dl, 0Dh</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h</span><br><span class="line">    mov dl, 0Ah</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h</span><br><span class="line">; 显示提示输入字符的字符串</span><br><span class="line">lea dx,msg4</span><br><span class="line">mov ah,9</span><br><span class="line">int 21h</span><br><span class="line">    </span><br><span class="line">    mov dl, 0Dh</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h</span><br><span class="line">    mov dl, 0Ah</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h</span><br><span class="line">;输入一个字符并回显</span><br><span class="line">    mov ah, 1</span><br><span class="line">    int 21h ;执行中断1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmp al, &#x27;q&#x27;</span><br><span class="line">    ;若等于q，则跳转到ending</span><br><span class="line">    je ending</span><br><span class="line">    cmp al, &#x27;Q&#x27;</span><br><span class="line">    ;若等于Q，则跳转到ending</span><br><span class="line">    je ending</span><br><span class="line">;低八位存入bl</span><br><span class="line">    mov bl, al</span><br><span class="line">;高八位存入bh</span><br><span class="line">    mov bh, al</span><br><span class="line">    ;回车+换行</span><br><span class="line">    mov dl, 0Dh</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h</span><br><span class="line">    mov dl, bh</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h</span><br><span class="line">    mov dl, 9</span><br><span class="line">    mov ah, 2</span><br><span class="line">    and bl, 0F0h  ;取bl高四位</span><br><span class="line">    mov cl, 4  </span><br><span class="line">;右移4位,高4位变为低4位</span><br><span class="line">    shr bl, cl</span><br><span class="line">    cmp bl, 9</span><br><span class="line">    ja alph1</span><br><span class="line">;处理数字</span><br><span class="line">numb1:</span><br><span class="line">;转换为ascii码</span><br><span class="line">    add bl, &#x27;0&#x27;</span><br><span class="line">    mov dl, bl</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h ;执行2号中断,显示输出</span><br><span class="line">    jmp low4</span><br><span class="line">alph1:</span><br><span class="line">;转换为ascii码</span><br><span class="line">    add bl, 37h</span><br><span class="line">    mov dl, bl</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h</span><br><span class="line">low4:</span><br><span class="line">    and bh, 0Fh  ;取低四位</span><br><span class="line">    cmp bh, 9</span><br><span class="line">    ja alph2</span><br><span class="line">numb2:</span><br><span class="line">    add bh, &#x27;0&#x27;  ;加0</span><br><span class="line">    mov dl, bh</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h</span><br><span class="line">    jmp cmpq</span><br><span class="line">alph2:</span><br><span class="line">    add bh, 37h ;加A</span><br><span class="line">    mov dl, bh</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h </span><br><span class="line">    jmp cmpq</span><br><span class="line">ending:</span><br><span class="line">    ;回车+换行</span><br><span class="line">    mov dl, 0Dh</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h</span><br><span class="line">    mov dl, 0Ah</span><br><span class="line">    mov ah, 2</span><br><span class="line">    int 21h</span><br><span class="line">    ;终止程序</span><br><span class="line">    mov ax, 4c00h</span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h4 id="运行结果">运行结果</h4><p><img src="https://pb01.s3.bitiful.net/33.png" alt="avatar"></p>]]></content>
      
      
      <categories>
          
          <category> xdu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD是什么？</title>
      <link href="/2023/12/01/2023-12-1-DDD%E6%9E%B6%E6%9E%84-1/"/>
      <url>/2023/12/01/2023-12-1-DDD%E6%9E%B6%E6%9E%84-1/</url>
      
        <content type="html"><![CDATA[<h2 id="DDD是什么？">DDD是什么？</h2><p>DDD 是领域驱动设计（Domain-Driven Design）的缩写，这是一种主要软件开发方法，由 Eric Evans 在他的书《领域驱动设计：软件核心复杂性应对之道》（Domain-Driven Design: Tackling Complexity in the Heart of Software）中首次提出。</p><p>DDD 主要关注于创建与业务领域紧密相关的软件模型，以确保软件能够准确地解决实际问题。</p><p>DDD 的核心理念包括以下几个方面：</p><ol><li><p><strong>领域模型（Domain Model）：</strong><br>领域模型是对特定业务领域知识的精确表述，它包括业务中的实体（Entities）、值对象（Value Objects）、服务（Services）、聚合（Aggregates）、聚合根（Aggregate Roots）等概念。领域模型是DDD的核心，它反映了业务专家的语言和决策。</p></li><li><p><strong>统一语言（Ubiquitous Language）：</strong><br>统一语言是开发团队与业务专家共同使用的语言，它在整个项目中保持一致。统一语言确保所有人都对业务概念有着相同的理解，减少沟通成本和误解。</p></li><li><p><strong>限界上下文（Bounded Context）：</strong><br>限界上下文是明确界定的系统边界，在这个边界内部有一套统一的模型和语言。不同的限界上下文之间可能有不同的模型，它们通过上下文映射（Context Mapping）来进行交互和集成。</p></li><li><p><strong>聚合（Aggregate）：</strong><br>聚合是一组相关对象的集合，它们被视为数据修改的单元。每个聚合都有一个聚合根，它是外部对象与聚合内部对象交互的唯一入口。</p></li><li><p><strong>领域服务（Domain Services）：</strong><br>当某些行为不自然属于任何实体或值对象时，这些行为可以被定义为领域服务。领域服务通常表示领域中的一些操作或业务逻辑。</p></li><li><p><strong>应用服务（Application Services）：</strong><br>应用服务是软件的一部分，它们协调领域对象来执行任务。它们负责应用程序的工作流程，但不包含业务规则或知识。</p></li><li><p><strong>基础设施（Infrastructure）：</strong><br>基础设施包括为领域模型提供持久化机制（如数据库）、消息传递、应用程序的配置等技术组件。</p></li><li><p><strong>领域事件（Domain Events）：</strong><br>领域事件是领域中发生的有意义的业务事件，它们可以触发其他子系统的反应或流程。</p></li></ol><p>DDD 的目标是通过将软件的关注点集中在<strong>核心领域</strong>上，并通过丰富的领域模型来管理复杂性，从而提高软件的<strong>质量和维护性</strong>。DDD 强调与业务专家的紧密合作，以确保软件解决方案能够准确反映<strong>业务需求</strong>。通过这种方法，软件开发团队可以创建出更加灵活、可扩展且与业务紧密结合的系统。</p><p>其中DDD所提到的软件设计方法涵盖了：范式、模型、框架、方法论，主要活动包括建模、测试、工程、开发、部署、维护。</p><p>软件设计方法是指一系列用于指导软件开发过程的原则、概念和实践。这些方法通常包括范式、模型、框架和方法论。下面我将分别介绍这些概念以及软件设计的主要活动。</p><h4 id="范式-Paradigms">范式 (Paradigms)</h4><p>范式是指软件设计和开发的基本风格或哲学。它通常定义了编程的基本原则和模式。常见的软件设计范式包括：</p><ul><li><strong>结构化编程</strong>：强调程序结构的重要性，使用顺序、选择和循环控制结构。</li><li><strong>面向对象编程 (OOP)</strong>：基于对象的概念，将数据和处理数据的方法封装在一起。</li><li><strong>函数式编程</strong>：将计算视为数学函数的评估，避免状态改变和可变数据。</li><li><strong>事件驱动编程</strong>：以事件为中心，响应用户操作、消息或其他系统事件。</li></ul><h4 id="模型-Models">模型 (Models)</h4><p>模型是对软件系统的抽象表示，用于帮助理解、设计和测试系统。常用的软件设计模型包括：</p><ul><li><strong>UML (统一建模语言)</strong>：一套图形化的建模语言，用于描述、设计和文档化软件项目。</li><li><strong>ER模型 (实体-关系模型)</strong>：用于数据库设计，描述数据的实体及其之间的关系。</li><li><strong>状态机模型</strong>：描述系统可能的状态、事件和在这些事件发生时的转换。</li></ul><h4 id="框架-Frameworks">框架 (Frameworks)</h4><p>框架是一套预先制定的代码库和组件，用于提供软件开发的骨架。框架通常定义了应用程序的结构，提供了一组通用的功能和模式，以便开发者可以专注于实现特定的业务逻辑。例如：</p><ul><li><strong>Spring Framework</strong>：一个用于Java应用程序的全面编程和配置模型。</li><li><strong>Ruby on Rails</strong>：一个用于快速开发Web应用程序的Ruby框架。</li><li><strong>Django</strong>：一个高级Python Web框架，鼓励快速开发和干净、实用的设计。</li></ul><h4 id="方法论-Methodologies">方法论 (Methodologies)</h4><p>方法论是指一套指导软件开发过程的规则和实践。它包括项目管理、开发流程、团队协作等方面。常见的软件开发方法论有：</p><ul><li><strong>敏捷开发</strong>：一种迭代和增量的开发方法，强调灵活性和客户合作。</li><li><strong>Scrum</strong>：一种敏捷开发框架，用于管理复杂的软件和产品开发。</li><li><strong>瀑布模型</strong>：一种线性顺序的开发方法，将项目分为不同阶段，每个阶段完成后才能进入下一个阶段。</li></ul><h4 id="主要活动">主要活动</h4><p>软件设计的主要活动包括：</p><ul><li><strong>建模 (Modeling)</strong> ：通过创建模型来表示系统的不同方面，如使用UML图来描述系统架构。</li><li><strong>测试 (Testing)</strong> ：确保软件的质量，包括单元测试、集成测试、系统测试和验收测试。</li><li><strong>工程 (Engineering)</strong> ：应用工程原则和实践来构建软件，包括需求分析、设计、实现和测试。</li><li><strong>开发 (Development)</strong> ：编写代码和实现功能，将设计转化为实际的软件产品。</li><li><strong>部署 (Deployment)</strong> ：将软件发布到生产环境，使其可供用户使用。</li><li><strong>维护 (Maintenance)</strong> ：在软件发布后对其进行更新和改进，修复缺陷，提升性能和适应性。</li></ul><p>每个活动都是软件开发生命周期的重要组成部分，它们相互依赖，共同确保软件项目的成功。</p><h4 id="维护-Maintenance">维护 (Maintenance)</h4><p>软件维护是在软件发布后进行的活动，包括以下几个方面：</p><ul><li><strong>纠错</strong>：修复软件中发现的缺陷或错误。</li><li><strong>适应性维护</strong>：修改软件以适应环境的变化，如操作系统升级、硬件更换等。</li><li><strong>完善性维护</strong>：增加新功能或提升性能，以满足用户新的或变化的需求。</li><li><strong>预防性维护</strong>：改进软件内部结构，以防止潜在的问题发生，提高软件的可维护性和可扩展性。</li></ul><p>软件维护是一个持续的过程，它确保软件能够长期有效地服务于用户。</p><h4 id="总结">总结</h4><p>软件设计方法是一个复杂的领域，涉及多种概念和实践。范式提供了设计哲学，模型帮助我们理解和抽象系统，框架为开发提供了基础结构，方法论指导整个开发过程。软件设计的主要活动——建模、测试、工程、开发、部署和维护——是确保软件项目成功的关键步骤。每个活动都需要专业知识和技能，以及对应的工具和技术的支持。通过这些活动的协同工作，软件工程师能够交付高质量、满足用户需求的软件产品。</p>]]></content>
      
      
      <categories>
          
          <category> 设计原则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决no main manifest attribute, in app.jar(Docker)</title>
      <link href="/2023/11/25/Docker(3)/"/>
      <url>/2023/11/25/Docker(3)/</url>
      
        <content type="html"><![CDATA[<h3 id="解决no-main-manifest-attribute-in-app-jar">解决no main manifest attribute, in app.jar</h3><p><strong>环境:SpringBoot2.6.13+java8</strong></p><ul><li><strong>重点</strong>:pom.xml文件是IDEA自动配的</li></ul><p>我在将一个SpringBoot程序打包成镜像部署到Docker容器上,然后执行run命令启动容器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm springboot-test:1.0</span><br></pre></td></tr></table></figure><p>springboot-test:1.0是我的镜像</p><p>出现报错:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no main manifest attribute, in app.jar</span><br></pre></td></tr></table></figure><p>我排查出来问题就在pom.xml文件中我画红线的这一句<br><img src="https://pb01.s3.bitiful.net/30.png" alt="avatar"></p><p>改为下面这张图这样就好了<br><img src="https://pb01.s3.bitiful.net/31.png" alt="avatar"></p><p>完整的pom.xml文件如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>DockerTest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>DockerTest<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>DockerTest<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.6.13<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.example.dockertest.DockerTestApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>JAR<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义构建Docker镜像</title>
      <link href="/2023/11/25/Docker(2)/"/>
      <url>/2023/11/25/Docker(2)/</url>
      
        <content type="html"><![CDATA[<h3 id="自定义构建Docker镜像">自定义构建Docker镜像</h3><p>实际上所有常用的应用程序都有对应的镜像，我们只需要下载这些镜像然后就可以使用了，而不需要自己去手动安装，顶多需要进行一些特别的配置。但是我们程序员在遇到小众项目的时候，可能没有提供镜像，这时就要我们手动去安装，接着我们就来看看如何构建我们自己的Docker镜像。构建镜像有两种方式，一种是使用commit命令来完成，还有一种是使用Dockerfile来完成，我们先来看第一种。</p><p>这里我们就做一个简单的例子，比如我们现在想要在Ubuntu的base镜像中安装Java环境，并将其打包为新的镜像（这个新的镜像就是一个包含Java8环境的Ubuntu系统镜像）</p><h4 id="第一种-commit命令-不推荐">第一种:commit命令(不推荐)</h4><p>拉取Ubuntu镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/16.png" alt="avatar"><br>接着启动Ubuntu：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/17.png" alt="avatar"></p><p>更新apt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/18.png" alt="avatar"><br>apt安装java环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure><p>安装完成后查看一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/19.png" alt="avatar"></p><p>退出Ubuntu到Docker环境下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/20.png" alt="avatar"><br>查看所有容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/21.png" alt="avatar"></p><p>使用commit命令将容器打包为新的镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit 容器名称/ID 新的镜像名称</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/22.png" alt="avatar"></p><p>查看镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/23.png" alt="avatar"></p><p>可以看到我们的镜像已经被打包好了</p><p>这个方式存在一个问题,就是如果这个镜像不是我们构建的或者构建完过了一段时间,我们就不知道具体这个镜像的构建过程,也就是说<strong>我们不能确保这个镜像百分百安全</strong>,这就引出了下面这种构建方式</p><h4 id="第二种-Dockerfile-推荐">第二种:Dockerfile(推荐)</h4><p>首先新建一个名为Dockerfile的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch Dockerfile</span><br></pre></td></tr></table></figure><p>vim打开Dockerfile进行编辑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure><p><img src="https://pic-bed-1c9.pages.dev/img/24.png" alt="avatar"></p><p>Dockerfile内部需要我们编写多种指令来告诉Docker我们的镜像的相关信息</p><p>首先我们需要使用FROM指令来选择当前镜像的基础镜像（必须以这个指令开始），这里我们直接使用ubuntu作为基础镜像即可，当然如果不需要任何基础镜像的话，直接使用scratch表示从零开始构建:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br></pre></td></tr></table></figure><p>在容器中运行RUN命令来安装Java环境了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN apt update</span><br><span class="line">RUN apt install -y openjdk-8-jdk</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/25.png" alt="avatar"><br>每条指令执行之后，都会生成一个新的镜像层</p><p>退出并保存,运行build命令构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 镜像名称 构建目录</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/26.png" alt="avatar"><br>执行后，Docker会在构建目录中寻找Dockerfile文件，然后开始依次执行Dockerfile中的指令：</p><p>–tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。构建目录的.代表当前目录</p><p>构建完成后查看本地镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/27.png" alt="avatar"></p><p>我们可以使用history命令来查看构建历史</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history ubuntu-java2:latest</span><br></pre></td></tr></table></figure><p><img src="https://pb01.s3.bitiful.net/28.png" alt="avatar"><br><img src="https://pb01.s3.bitiful.net/29.png" alt="avatar"><br>我们可以看到每一步我们构建的命令都成为了一个镜像,我们可以清楚地知道这个镜像是如何被构建的,而使用第一种方式构建的镜像是看不到具体构建命令的</p>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装与镜像下载和删除(优雅)</title>
      <link href="/2023/11/23/Docker(1)/"/>
      <url>/2023/11/23/Docker(1)/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker安装与镜像下载和删除-优雅">Docker安装与镜像下载和删除(优雅)</h3><hr><p><strong>环境:Ubuntu 22.04.3 LTS</strong></p><hr><h4 id="Docker安装">Docker安装</h4><p>首先安装一些工具：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure><p>接着安装官方的GPG key：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/apt/keyrings</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure><p>最后将Docker的库添加到apt资源列表中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>接着我们更新一次apt：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>最后安装Docker CE版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure><p>最后我们将当前用户添加到docker用户组中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker &lt;用户名&gt;</span><br></pre></td></tr></table></figure><p>配置好后，我们先退出SSH终端，然后重新连接就可以生效了。</p><h4 id="镜像相关操作">镜像相关操作</h4><p>下载镜像:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull repository:tag</span><br></pre></td></tr></table></figure><p>实际上一个镜像的名称是由两部分组成的，一个是repository，还有一个是tag，一般情况下约定repository就是镜像名称，tag作为版本，默认为latest，表示最新版本。</p><p>镜像下载之后会存放在本地，要启动这个镜像的容器，实际上就像我们之前那样，输入run命令就可以了(以hello-world镜像为例)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>启动之后，会使用当前镜像自动创建一个容器，我们可以输入ps命令来查看当前容器的容器列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>注意后面要加一个-a表示查看所有容器（其他选项可以使用-h查看），如果不加的话，只会显示当前正在运行的容器。</p><p>可以看到容器列表中有我们刚刚创建的hello-world（注意同一个镜像可以创建多个容器），每个容器都有一个随机生成的容器ID写在最前面，后面是容器的创建时间以及当前的运行状态，最后一列是容器的名称，在创建容器时，名称可以由我们指定也可以自动生成，这里就是自动生成的。</p><p>当一个镜像有多个容器时，我们可以手动指定名称启动，在使用run命令时，添加–name参数即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=名称 hello-world</span><br></pre></td></tr></table></figure><p>我们可以手动开启处于停止状态的容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称/容器ID</span><br></pre></td></tr></table></figure><p><strong>容器名称可以使用Tab键自动补全,ID可以只输入前三位</strong>(一般不会重复,除非容器非常多,这时就得保证输入的ID的前n位可以唯一标识这个ID)</p><p>如果想要停止容器直接输入stop命令就可以了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名称/容器ID</span><br></pre></td></tr></table></figure><p>或是重启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 容器名称/容器ID</span><br></pre></td></tr></table></figure><h4 id="删除容器">删除容器</h4><p>如果我们不需要使用容器了，那么可以将容器删除，但是注意只有容器处于非运行状态时才可以删除：</p><p>先查看所有容器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>如果要删除的容器仍在运行,先将其停止:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名称/容器ID</span><br></pre></td></tr></table></figure><p>最后删除:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器名称/容器ID</span><br></pre></td></tr></table></figure><p>如果想要强制删除容器,加上-f就行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f 容器名称/容器ID</span><br></pre></td></tr></table></figure><p>无论容器是否正在运行中或者已停止，都可被强制删除！</p><h4 id="删除镜像">删除镜像</h4><p>先查看Docker中的镜像:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><strong>想要删除镜像就得先删除此镜像的全部容器</strong></p><p><strong>只有容器处于非运行状态时才可以删除</strong></p><p>先查看所有容器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>如果要删除的容器仍在运行,先将其停止:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名称/容器ID</span><br></pre></td></tr></table></figure><p>删除容器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器名称/容器ID</span><br></pre></td></tr></table></figure><p>删除镜像:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像ID</span><br></pre></td></tr></table></figure><p><strong>镜像ID也是输入前三位就好</strong></p><p>如果想要强制删除镜像,加上-f就行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f 镜像ID</span><br></pre></td></tr></table></figure><p>镜像中的容器状态为已停止或已删除的才能被强制删除，同时对应的容器也会被删除。若容器还在运行中，删除镜像会报错！</p>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT详解</title>
      <link href="/2023/11/18/JWT%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/11/18/JWT%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="JWT详解">JWT详解</h3><p><a href="https://jwt.io/introduction" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">JWT官网</a></p><p><img src="https://pb01.s3.bitiful.net/13.png" alt="avatar"></p><h4 id="什么是JWT">什么是JWT</h4><p>JWT的全称是Json Web Token。是基于RFC 7519开放标准的，它定义了一种紧凑且独立的方式，用于在各方之间以 JSON 对象的形式<strong>安全地</strong>传输信息。此信息可以用作验证和相互信任，因为它是经过数字签名的。JWT 可以使用密钥（使用 HMAC 算法）或使用 RSA 或 ECDSA 的公钥/私钥对进行签名。</p><p>JWT由三部分组成:<strong>Header（标头）</strong>,<strong>Payload（有效载荷）</strong>,<strong>Signature（签名）</strong>,中间用点分开,即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header.Payload.signature</span><br></pre></td></tr></table></figure><p>我们可以使用<a href="https://jwt.io/#debugger-io" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">jwt.io.Debugger</a>去解码,验证和生成JWT令牌.</p><p><img src="https://pb01.s3.bitiful.net/14.png" alt="avatar"></p><h4 id="Header（标头）">Header（标头）</h4><p>Header通常由两部分组成：令牌的类型（JWT）和所使用的签名算法（如HMAC SHA256或RSA）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后，这个JSON被Base64Url编码，形成JWT的第一部分。</p><h4 id="Payload（有效载荷）">Payload（有效载荷）</h4><p>Payload包含声明。声明是关于实体（通常是用户）和附加数据的声明(claims),一般存放一些不敏感的信息，比如用户名、权限、角色等</p><p>声明(claims)也分为三种:Registered claim,Public claims和Private claims.</p><ul><li><p>Registered claim(已注册声明):其中包含了一组官方定义好的推荐的声明(共7个),有</p><ol><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ol></li><li><p>Public claims(公开声明):声明名称可以由使用JWT的人员随意定义.然而，<strong>为了防止冲突</strong>，任何新的声明名称都应该要么在IANA“JSON Web令牌声明”注册中心注册,要么得包含防撞(冲突)名称.</p></li><li><p>Private claims(私有声明):JWT的生产者和消费者一致同意使用的不是已注册声明和公开声明的声明.私有声明可能会发生冲突，应该小心使用.</p></li></ul><p>例如:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后，这个JSON被Base64Url编码，形成JWT的第二部分。</p><p>应当注意的是，对于已签名的令牌，这些信息虽然受到保护，不会被篡改，但任何人都可以读取。除非经过加密，否则不要将机密信息放入JWT的有效载荷或标头元素中。</p><h4 id="Signature（签名）">Signature（签名）</h4><p>要创建签名部分，您必须获取编码的标头、编码的有效载荷、秘钥、标头中指定的算法，并对其进行签名。</p><p>例如，如果要使用HMAC SHA256算法，则将以以下方式创建签名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">HMACSHA256</span>(</span><br><span class="line">  <span class="title function_">base64UrlEncode</span>(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  <span class="title function_">base64UrlEncode</span>(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>签名用于验证消息在发送过程中没有更改，在使用私钥签名的令牌的情况下，它还可以验证JWT的发送者是否就是它所说的那个人。</p><h4 id="JWT是如何工作的">JWT是如何工作的?</h4><p>在认证的时候，当用户用他们的凭证成功登录以后，一个JWT将会被返回。此后，token 就是用户凭证了，你必须非常小心以防止出现安全问题。一般而言，你保存令牌的时候不应该超过你所需要它的时间。</p><p>无论何时用户想要访问受保护的路由或者资源的时候，用户代理（通常是浏览器）都应该带上 JWT，典型的，通常放在 Authorization header 中，用 Bearer schema。</p><p>header 应该看起来是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Authorization</span>: <span class="title class_">Bearer</span> <span class="variable constant_">JWT</span></span><br></pre></td></tr></table></figure><p>服务器上的受保护的路由将会检查 Authorization header 中的 JWT 是否有效，如果有效，则用户可以访问受保护的资源。如果 JWT 包含足够多的必需的数据，那么就可以减少对某些操作的数据库查询的需要，尽管可能并不总是如此。</p><p>如果 token  是在授权头（Authorization header）中发送的，那么跨源资源共享 (CORS) 将不会成为问题，因为它不使用 cookie。</p><p><strong>JWT认证流程如下:</strong></p><p><img src="https://pb01.s3.bitiful.net/15.png" alt="avatar"></p><ol><li>用户登录账号，客户端发送 POST 请求，将用户名和密码发送到服务器。</li><li>服务器会验证用户的登录信息（用户名、密码），校验成功的时候会使用 JWT 算法，生成一个 token （已签名的 token）。</li><li>服务器返回给客户端 HTTP 200 状态码，并且会将生成的 token 放在请求头中（header），并不能放在请求体（body）中。客户端一般会将接收到的 token 存储在浏览器的 localstorage,cookie 或者 sessionstorage 。</li><li>当客户端之后再向服务器发送请求的时候，都会携带上 token （当然也可以将 token 放在 cookie 中自动发送，但是这样不能跨域发送）。最好的做法是将 token 放在 http 的头信息中的 Authorization 字段中（这是官方文档建议的做法）。</li><li>当服务器接收到请求的时候，接收到了 token 信息，这时候 JWT 进行反向验证，验证对应的 token 是否正确。</li><li>当服务器交验完毕后，会产生两种情况：第一种情况就是校验成功，返回给客户端 HTTP 200 状态码和客户端所需要的数据；第二种情况就是校验失败，这个时候会返回给客户端 HTTP 401 状态码，Not authorized。</li></ol><h4 id="JWT的优缺点">JWT的优缺点</h4><ul><li><p><strong>无状态</strong>:JWT 自身包含了身份验证所需要的所有信息，因此，我们的服务器不需要存储 Session 信息。这显然增加了系统的可用性和伸缩性，大大减轻了服务端的压力。</p></li><li><p><strong>单点登录友好</strong>:使用 Session 进行身份认证的话，实现单点登录，需要我们把用户的 Session 信息保存在一台电脑上，并且还会遇到常见的 Cookie 跨域的问题。但是，使用 JWT 进行认证的话， JWT 被保存在客户端，不会存在这些问题。</p></li><li><p><strong>有效避免了 CSRF 攻击</strong>:CSRF 攻击需要依赖 Cookie ，Session 认证中 Cookie 中的 SessionID 是由浏览器发送到服务端的，只要发出请求，Cookie 就会被携带。借助这个特性，即使黑客无法获取你的 SessionID，只要让你误点攻击链接，就可以达到攻击效果.JWT一般会选择存放在 localStorage 中。前端的每一个请求后续都会附带上这个 JWT，整个过程压根不会涉及到 Cookie。</p></li><li><p><strong>不可控</strong>:我们想要在JWT有效期内废弃一个JWT或者更改它的权限的话，并不会立即生效，通常需要等到有效期过后才可以。</p></li></ul><h4 id="JWT身份认证常见问题及解决办法">JWT身份认证常见问题及解决办法</h4><h5 id="注销登录等场景下JWT还有效"><strong>注销登录等场景下JWT还有效</strong></h5><ol><li><p><strong>将JWT存入内存数据库</strong><br>将 JWT存入数据库中，Redis 内存数据库在这里是不错的选择。如果需要让某个 JWT 失效就直接从 Redis 中删除这个 JWT 即可。但是，这样会导致每次使用 JWT 发送请求都要先从 DB 中查询 JWT 是否存在的步骤，而且违背了 JWT 的无状态原则。</p></li><li><p><strong>黑名单机制</strong><br>使用内存数据库比如 Redis 维护一个黑名单，如果想让某个 JWT 失效的话就直接将这个 JWT 加入到 黑名单 即可。然后，每次使用 JWT 进行请求的话都会先判断这个 JWT 是否存在于黑名单中。缺点和第一种方案相同。</p></li><li><p><strong>修改密钥(Secret)</strong><br>我们为每个用户都创建一个专属密钥，如果我们想让某个 JWT 失效，我们直接修改对应用户的密钥即可。但是，这样相比于前两种引入内存数据库带来了危害更大：</p><ul><li><p>如果服务是分布式的，则每次发出新的 JWT 时都必须在多台机器同步密钥。为此，你需要将密钥存储在数据库或其他外部服务中，这样和 Session 认证就没太大区别了。</p></li><li><p>如果用户同时在两个浏览器打开系统，或者在手机端也打开了系统，如果它从一个地方将账号退出，那么其他地方都要重新进行登录，这是不可取的</p></li></ul></li><li><p><strong>保持令牌的有效期限短并经常轮换</strong><br>很简单的一种方式。但是，会导致用户登录状态不会被持久记录，而且需要用户经常登录。</p></li></ol><h5 id="JWT的续签问题"><strong>JWT的续签问题</strong></h5><ol><li><p><strong>类似于Session认证中的做法</strong><br>假设服务端给的 JWT 有效期设置为 30 分钟，服务端每次进行校验时，如果发现 JWT 的有效期马上快过期了，服务端就重新生成 JWT 给客户端。客户端每次请求都检查新旧 JWT，如果不一致，则更新本地的 JWT。这种做法的问题是仅仅在快过期的时候请求才会更新 JWT ,对客户端不是很友好。</p></li><li><p><strong>每次请求都返回新JWT</strong><br>这种方案的的思路很简单，但是，开销会比较大</p></li><li><p><strong>JWT有效期设置到半夜</strong><br>这种方案是一种折中的方案，保证了大部分用户白天可以正常登录，适用于对安全性要求不高的系统。</p></li><li><p><strong>用户登录返回两个JWT</strong></p><p>第一个是 accessJWT ，它的过期时间为JWT本身的过期时间比如半个小时，另外一个是refreshJWT它的过期时间更长一点比如为 1 天。客户端登录后，将 accessJWT 和 refreshJWT 保存在本地，每次访问将 accessJWT 传给服务端。服务端校验 accessJWT 的有效性，如果过期的话，就将 refreshJWT 传给服务端。如果有效，服务端就生成新的 accessJWT 给客户端。否则，客户端就重新登录即可。</p><p>这种方案的不足是：</p><ul><li>需要客户端来配合；</li><li>用户注销的时候需要同时保证两个 JWT 都无效；</li><li>重新请求获取 JWT 的过程中会有短暂 JWT 不可用的情况（可以通过在客户端设置定时器，当 accessJWT 快过期的时候，提前去通过 refreshJWT 获取新的 accessJWT）。</li></ul></li></ol><h4 id="References">References</h4><ol><li><p>JWT官方文档:本文开头有</p></li><li><p><a href="https://javaguide.cn/system-design/security/jwt-intro.html" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">JavaGuide</a></p></li><li><p><a href="https://ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">JSON Web Token 入门教程</a><br>…</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ报错:unable to perform an operation on node &#39;rabbit@ubuntuserver&#39;</title>
      <link href="/2023/11/15/rabbitmq%E6%8A%A5%E9%94%99/"/>
      <url>/2023/11/15/rabbitmq%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h3 id="RabbitMQ报错-unable-to-perform-an-operation-on-node-‘rabbit-ubuntuserver’">RabbitMQ报错:unable to perform an operation on node ‘rabbit@ubuntuserver’</h3><hr><p><strong>环境:VMware+Ubuntu</strong></p><hr><h4 id="出问题的前置步骤">出问题的前置步骤:</h4><ol><li>安装Erlang</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install erlang</span><br></pre></td></tr></table></figure><ol start="2"><li>安装RabbitMQ</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install rabbitmq-server</span><br></pre></td></tr></table></figure><ol start="3"><li>开启RabbitMQ管理面板</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><ol start="4"><li>在查看RabbitMQ状态或为RabbitMQ添加用户时,即:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl status</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl add_user 用户名 密码</span><br></pre></td></tr></table></figure><p>出现<strong>Error:unable to perform an operation on node ‘rabbit@ubuntuserver’</strong></p><p><img src="https://pb01.s3.bitiful.net/9.png" alt="avatar"><br><img src="https://pb01.s3.bitiful.net/10.png" alt="avatar"></p><h4 id="解决方法">解决方法:</h4><p><strong>首先,切换到root权限</strong></p><ol><li>为root设置密码</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>设置密码<br>2. 切换到root权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><p>然后输入密码便可切换到root权限</p><p><strong>更改/etc/hosts文件</strong></p><ol><li>先进根目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><ol start="2"><li>进入etc目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc</span><br></pre></td></tr></table></figure><ol start="3"><li>在hosts文件中添加主机名映射<br>vim打开hosts文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi hosts</span><br></pre></td></tr></table></figure><p>键入i转换到insert模式<br><img src="https://pb01.s3.bitiful.net/11.png" alt="avatar"></p><p>在127.0.0.1 localhost 后面添加你的主机名,就是root@xxxx中的xxxx,我的是ubuntuserver</p><p><img src="https://pb01.s3.bitiful.net/12.png" alt="avatar"></p><p>最后按Esc键退出insert模式,输入:wq保存并退出</p><p>然后再执行上面的操作就一切正常了</p>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis分布式锁</title>
      <link href="/2023/11/13/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2023/11/13/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis分布式锁">Redis分布式锁</h2><hr><h4 id="分布式锁的由来">分布式锁的由来</h4><p>在传统单机部署的情况下，可以使用Java并发处理相关的API(如ReentrantLcok或synchronized)进行互斥控制。</p><p>但是在分布式系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机并发控制锁策略失效，为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁的由来。</p><p>当多个进程不在同一个系统中，就需要用分布式锁控制多个进程对资源的访问。最实际的应用场景应该是控制库存，比如说电商平台防止商品超卖这类场景。</p><h4 id="分布式锁需要满足的条件">分布式锁需要满足的条件</h4><ul><li><p><strong>互斥性</strong>：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。</p></li><li><p><strong>安全性</strong>：锁只能被持有该锁的客户端删除，不能由其它客户端删除。</p></li><li><p><strong>不会死锁</strong>：获取锁的客户端因为某些原因（如down机等）而未能释放锁，也能保证后续其他客户端能加锁。</p></li><li><p><strong>容错</strong>：只要大部分的Redis节点正常运行，客户端就可以加锁和解锁。</p></li></ul><h4 id="Redis分布式锁实现一-setnx-expire">Redis分布式锁实现一(setnx+expire)</h4><p>实现命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seynx key value</span><br><span class="line">expire key time</span><br></pre></td></tr></table></figure><p>setnx其实就是set if not exists的意思,仅当key不存在的时候才能进行插入,执行完操作后可以将锁删除<br>expire命令为锁设置过期时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure><p>这样就能重新对key的值进行操作了</p><h4 id="Redis分布式锁实现二-set">Redis分布式锁实现二(set)</h4><p>上面那种实现方式存在一种问题,如果在执行完 setnx 之后,执行expire之前,服务器 crash 或重启了导致加的这个锁没有设置过期时间，就会导致死锁的情况（别的线程就永远获取不到锁了）</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime)</span><br></pre></td></tr></table></figure><p><strong>第一个为</strong>key，我们使用key来当锁，因为key是唯一的。</p><p><strong>第二个</strong>为value，我们传的是requestId，很多人可能不明白，有key作为锁不就够了吗，为什么还要用到value？原因就是我们在上面讲到分布式锁要满足的条件时,提到的<strong>安全性</strong>这一条，通过给value赋值为requestId，我们就知道这把锁是哪个请求加的了，在解锁的时候就可以有依据。requestId可以使用UUID.randomUUID().toString()方法生成。</p><p><strong>第三个</strong>为nxxx，这个参数我们填的是NX，意思是SET IF NOT EXIST，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；</p><p><strong>第四个</strong>为expx，这个参数我们传的是PX，意思是我们要给这个key加一个过期的设置，具体时间由第五个参数决定。</p><p><strong>第五个</strong>为time，与第四个参数相呼应，代表key的过期时间。<br>总的来说，执行上面的set()方法就只会导致两种结果：1. 当前没有锁（key不存在），那么就进行加锁操作，并对锁设置个有效期，同时value表示加锁的客户端。2. 已有锁存在，不做任何操作。</p><p>我们的加锁代码满足我们可靠性里描述的三个条件:</p><ul><li><strong>首先</strong>，set()加入了NX参数，可以保证如果已有key存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足<strong>互斥性</strong>。</li><li><strong>其次</strong>，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即key被删除），<strong>不会发生死锁</strong>。</li><li><strong>最后</strong>，因为我们将value赋值为requestId，代表加锁的客户端请求标识，那么在客户端在解锁的时候就可以进行校验是否是同一个客户端。<strong>这样就避免了锁被别的线程删除</strong>,保证了<strong>安全性</strong>。</li></ul><h4 id="Redis分布式锁实现三-Redission框架">Redis分布式锁实现三(Redission框架)</h4><p>方案二还是可能存在<strong>锁过期释放，业务没执行完</strong>的问题。有些小伙伴认为，稍微把锁过期时间设置长一些就可以啦。其实问题的关键就在于我们不确定要设置多长时间,时间太短就会导致锁过期释放，业务没执行完,时间太长就会使系统运行效率下降. 我们设想一下，是否可以给获得锁的线程，开启一个定时守护线程，每隔一段时间检查锁是否还存在，存在则对锁的过期时间延长，防止锁过期提前释放。Redission框架帮我们实现了此功能,名为<strong>看门狗</strong></p><p><img src="https://pb01.s3.bitiful.net/7.png" alt="avatar"></p><p>只要线程一加锁成功，就会启动一个watch dog看门狗，它是一个后台线程，会每隔10秒检查一下，如果线程1还持有锁，那么就会不断的延长锁key的生存时间。因此，Redisson就是使用Redisson解决了<strong>锁过期释放，业务没执行完</strong>问题。</p><p><img src="https://pb01.s3.bitiful.net/8.png" alt="avatar"></p><p>如果线程一在Redis的master节点上拿到了锁，但是加锁的key还没同步到slave节点。恰好这时，master节点发生故障，一个slave节点就会升级为master节点。线程二就可以获取同个key的锁啦，但线程一也已经拿到锁了，锁的安全性就没了。</p><p>这个时候我们就可以使用RedLock，它的思路是，在多个Redis服务器上保存锁，只需要超过半数的Redis服务器获取到锁，那么就真的获取到锁了，这样就算挂掉一部分节点，也能保证正常运行，保证了<strong>容错性</strong>。</p><h4 id="References">References</h4><ul><li><a href="https://www.cnblogs.com/wangyingshuo/p/14510524.html" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">Redis实现分布式锁的7种方案，及正确使用姿势！</a></li><li>Redis笔记 by itbaima</li><li><a href="https://developer.aliyun.com/article/307547" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">Redis 分布式锁的正确实现方式（ Java 版 ）</a></li><li><a href="https://www.runoob.com/redis/redis-tutorial.html" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">菜鸟教程|Redis教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis与分布式</title>
      <link href="/2023/11/13/redis%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/"/>
      <url>/2023/11/13/redis%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis与分布式">Redis与分布式</h2><hr><h3 id="主从复制">主从复制</h3><p><img src="https://pb01.s3.bitiful.net/4.png" alt="avatar"></p><h4 id="基本概念">基本概念</h4><p>有多个redis服务器,只有一个<strong>主节点(Master)</strong>,其余均为<strong>从节点(Slave)</strong>,主节点可以进行读写操作,从节点只能进行读操作.数据的复制是单向的,从节点中的内容是由主节点中复制过来的(直接复制/间接复制).</p><p>一个主节点可以有多个从节点(也可以没有),一个从节点只能有一个主节点.redis主从复制是<code>异步复制</code>,主节点收到写命令,先写到内部缓冲区,然后异步发送给从节点.</p><h4 id="配置">配置</h4><p>在配置文件中添加从节点信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof 主节点IP 主节点端口</span><br></pre></td></tr></table></figure><h4 id="作用">作用</h4><ul><li><strong>数据冗余</strong>：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li><strong>故障恢复</strong>：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li><strong>负载均衡</strong>：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li><strong>高可用基石</strong>：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ul><h4 id="Redis为什么需要主从复制">Redis为什么需要主从复制</h4><p>使用Redis主从复制的原因主要是单台Redis节点存在以下的局限性：</p><ul><li><p>Redis虽然读写的速度都很快，单节点的Redis能够支撑**每秒请求数(QPS)**大概在5w左右，如果上千万的用户访问，Redis就承载不了，成为了高并发的瓶颈。</p></li><li><p>单节点的Redis不能保证高可用，当Redis因为某些原因意外宕机时，会导致缓存不可用</p></li><li><p>CPU的利用率上，单台Redis实例只能利用单个核心，这单个核心在面临海量数据的存取和管理工作时压力会非常大。</p></li></ul><h4 id="主从复制流程">主从复制流程</h4><p>第一次同步一般是<code>全量同步</code>,后续基于已经建立的TCP长连接进行<code>增量同步</code>,如果TCP长连接断开,再次连接后进行同步,主节点会判断从节点要读的数据是否在repl_backlog_buffer缓冲区中,如果在,则进行增量同步,否则进行全量同步.</p><ol><li><p>若启动一个Slave机器进程，则它会向Master机器发送一个“sync command”命令，请求同步连接。</p></li><li><p>无论是第一次连接还是重新连接，Master机器都会启动一个后台进程，将数据快照保存到数据文件中（执行rdb操作），同时Master还会记录修改数据的所有命令并缓存在数据文件中。</p></li><li><p>后台进程完成缓存操作之后，Maste机器就会向Slave机器发送数据文件，Slave端机器将数据文件保存到硬盘上，然后将其加载到内存中，接着Master机器就会将修改数据的所有操作一并发送给Slave端机器。若Slave出现故障导致宕机，则恢复正常后会自动重新连接。</p></li><li><p>Master机器收到Slave端机器的连接后，将其完整的数据文件发送给Slave端机器，如果Mater同时收到多个Slave发来的同步请求，则Master会在后台启动一个进程以保存数据文件，然后将其发送给所有的Slave端机器，确保所有的Slave端机器都正常。</p></li></ol><h4 id="主从数据不一致">主从数据不一致</h4><p><strong>原因</strong>: 主从节点的命令复制是<code>异步</code>执行的.在主从节点命令传播阶段，主节点收到新的写命令后，会发送给从节点。但是，主节点并不会等到从节点实际执行完命令后，再把结果返回给客户端，而是主节点自己在本地执行完命令后，就会向客户端返回结果了。如果从节点还没有执行主节点同步过来的命令，主从节点间的数据就不一致了.</p><p><strong>如何应对</strong>:<br>第一种方法，尽量保证主从节点间的网络连接状况良好，避免主从节点在不同的机房。</p><p>第二种方法，可以开发一个外部程序来监控主从节点间的复制进度。具体做法：</p><ul><li><p>Redis 的 INFO replication 命令可以查看主节点接收写命令的进度信息（master_repl_offset）和从节点复制写命令的进度信息（slave_repl_offset），所以，我们就可以开发一个监控程序，先用 INFO replication 命令查到主、从节点的进度，然后，我们用 master_repl_offset 减去 slave_repl_offset，这样就能得到从节点和主节点间的复制进度差值了。</p></li><li><p>如果某个从节点的进度差值大于我们预设的阈值，我们可以让客户端不再和这个从节点连接进行数据读取，这样就可以减少读到不一致数据的情况。不过，为了避免出现客户端和所有从节点都不能连接的情况，我们需要把复制进度差值的阈值设置得大一些。</p></li></ul><h4 id="主从切换如何减少数据丢失？">主从切换如何减少数据丢失？</h4><p>主从切换过程中，产生数据丢失的情况有两种：</p><ul><li>异步复制同步丢失</li><li>集群产生脑裂数据丢失<br>我们不可能保证数据完全不丢失，只能做到使得尽量少的数据丢失。</li></ul><p><strong>异步复制同步丢失</strong><br>当客户端发送写请求给主节点的时候，客户端会返回 ok，接着主节点将写请求异步同步给各个从节点，但是如果此时主节点还没来得及同步给从节点时发生了断电，那么主节点内存中的数据会丢失。</p><p>Redis 配置里有一个参数 <code>min-slaves-max-lag</code>，表示一旦所有的从节点数据复制和同步的延迟都超过了 min-slaves-max-lag 定义的值，那么主节点就会拒绝接收任何请求。</p><p>假设将 min-slaves-max-lag 配置为 10s 后，根据目前 master-&gt;slave 的复制速度，如果数据同步完成所需要时间超过10s，就会认为 master 未来宕机后损失的数据会很多，master 就拒绝写入新请求。这样就能将 master 和 slave 数据差控制在10s内，即使 master 宕机也只是这未复制的 10s 数据。</p><p>那么对于客户端，当客户端发现 master 不可写后，我们可以采取降级措施，将数据暂时写入本地缓存和磁盘中，在一段时间（等 master 恢复正常）后重新写入 master 来保证数据不丢失，也可以将数据写入 kafka 消息队列，等 master 恢复正常，再隔一段时间去消费 kafka 中的数据，让将数据重新写入 master 。</p><p><strong>集群产生脑裂数据丢失</strong><br>如果主节点的网络突然发生了问题，它与所有的从节点都失联了，但是此时的主节点和客户端的网络是正常的，这个客户端并不知道 Redis 内部已经出现了问题，还在照样的向这个失联的主节点写数据（过程A），此时这些数据被主节点缓存到了缓冲区里，因为主从节点之间的网络问题，这些数据都是无法同步给从节点的。</p><p>这时，哨兵也发现主节点失联了，它就认为主节点挂了（但实际上主节点正常运行，只是网络出问题了），于是哨兵就会在从节点中选举出一个 leader 作为主节点，这时集群就有两个主节点了 —— 脑裂出现了。</p><p>这时候网络突然好了，哨兵因为之前已经选举出一个新主节点了，它就会把旧主节点降级为从节点（A），然后从节点（A）会向新主节点请求数据同步，因为第一次同步是全量同步的方式，此时的从节点（A）会清空掉自己本地的数据，然后再做全量同步。所以，之前客户端在过程 A 写入的数据就会丢失了，也就是集群产生脑裂数据丢失的问题。</p><p><code>方案</code>:当主节点发现「从节点下线的数量太多」，或者「网络延迟太大」的时候，那么主节点会禁止写操作，直接把错误返回给客户端。</p><p>在 Redis 的配置文件中有两个参数我们可以设置：</p><p>min-slaves-to-write x，主节点必须要有至少 x 个从节点连接，如果小于这个数，主节点会禁止写数据。<br>min-slaves-max-lag x，主从数据复制和同步的延迟不能超过 x 秒，如果主从同步的延迟超过 x 秒，主节点会禁止写数据。<br>我们可以把 min-slaves-to-write 和 min-slaves-max-lag 这两个配置项搭配起来使用，分别给它们设置一定的阈值，假设为 N 和 T。</p><p>这两个配置项组合后的要求是，主节点连接的从节点中至少有 N 个从节点，「并且」主节点进行数据复制时的 ACK 消息延迟不能超过 T 秒，否则，主节点就不会再接收客户端的写请求了。</p><p>即使原主节点是假故障，它在假故障期间也无法响应哨兵心跳，也不能和从节点进行同步，自然也就无法和从节点进行 ACK 确认了。这样一来，min-slaves-to-write 和 min-slaves-max-lag 的组合要求就无法得到满足，原主节点就会被限制接收客户端写请求，客户端也就不能在原主节点中写入新数据了。</p><p>等到新主节点上线时，就只有新主节点能接收和处理客户端请求，此时，新写的数据会被直接写到新主节点中。而原主节点会被哨兵降为从节点，即使它的数据被清空了，也不会有新数据丢失。我再来给你举个例子。</p><p>假设我们将 min-slaves-to-write 设置为 1，把 min-slaves-max-lag 设置为 12s，把哨兵的 down-after-milliseconds 设置为 10s，主节点因为某些原因卡住了 15s，导致哨兵判断主节点客观下线，开始进行主从切换。同时，因为原主节点卡住了 15s，没有一个从节点能和原主节点在 12s 内进行数据复制，原主节点也无法接收客户端请求了。这样一来，主从切换完成后，也只有新主节点能接收请求，不会发生脑裂，也就不会发生数据丢失的问题了。</p><h4 id="其他">其他</h4><p><strong>过期key如何处理?</strong><br>主节点中的key被删除或淘汰,会模拟一条删除命令发送给从节点,从节点收到这条命令后,会删除对应的key.</p><p><strong>为了避免网络恢复时,频繁进行全量同步,该怎么做?</strong><br>要将repl_backlog_buffer缓冲区调得大一些,至少为主节点一秒写的数据量<em>重连时间</em>2.</p><p><strong>如何分摊主服务器的压力?</strong><br>将一部分从节点升级为其他从节点的主节点</p><p><strong>怎么判断 Redis 某个节点是否正常工作？</strong><br>Redis 判断节点是否正常工作，基本都是通过互相的 ping-pong 心态检测机制，如果有一半以上的节点去 ping 一个节点的时候没有 pong 回应，集群就会认为这个节点挂掉了，会断开与这个节点的连接。</p><h3 id="哨兵模式">哨兵模式</h3><p>经过之前的学习，我们发现，实际上最关键的还是主节点，因为一旦主节点出现问题，那么整个主从系统将无法写入，因此，我们得想一个办法，处理一下<strong>主节点故障</strong>的情况。实际上我们可以参考Spring的服务治理模式，比如Nacos和Eureka，所有的服务都会被实时监控，那么只要出现问题，肯定是可以及时发现的，并且能够采取响应的补救措施，这就是我们即将介绍的哨兵：</p><p><img src="https://pb01.s3.bitiful.net/5.png" alt="avatar"></p><p><strong>哨兵</strong> (<strong>也是一个Redis服务器</strong>)会对所有的节点进行监控，如果发现主节点出现问题，那么会立即让从节点进行投票，选举一个新的主节点出来，这样就不会由于主节点的故障导致整个系统不可写（注意要实现这样的功能最小的系统必须是一主一从，再小的话就没有意义了）</p><p>那么怎么启动一个哨兵呢？我们只需要稍微修改一下配置文件(conf文件)即可，修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor name ip port number</span><br></pre></td></tr></table></figure><p>其他配置都是次要的,我们都采用默认配置.</p><p>其中第一个和第二个是固定，第三个是为监控对象名称，随意，后面就是主节点的相关信息，包括IP地址和端口，最后的一个数字的意思是当有number个哨兵判断主节点挂掉后,我们认为主节点真的挂掉了,一般number是要比哨兵数量少的,因为哨兵也可能挂掉.如果number等于哨兵数量,如果哨兵挂掉了一个,那么就永远判断不出主节点是否挂了.number一般设置为哨兵数量/2+1.</p><p><strong>不需要填写其他哨兵信息,如何组成哨兵集群?</strong><br>哨兵节点之间通过redis的发布者/订阅者机制互相发现,主节点有一个_sentinel_:hello频道,哨兵可以将自己的ip和端口信息发到这个频道上,这样其他哨兵就可以通过订阅这个频道来获取到这个哨兵的信息,这样哨兵之间就可以建立网络,哨兵集群就形成了.</p><p><img src="https://pb01.s3.bitiful.net/167.webp" alt="avatar"></p><p>哨兵模式启动后，会自动监控主节点，然后还会显示那些节点是作为从节点存在的。如果主节点挂了,一个哨兵认为其主观下线,会向其他哨兵发起投票,如果认为主节点主观下线的数量到达设置得数,则认为主节点客观下线.之后就要进行主从切换了,哨兵节点中投票选出执行的leader.候选者为判断主节点客观下线的哨兵,候选者可以给自己投票,其他哨兵不能给自己投票,每个哨兵只有一次投票机会.任何候选者想要成为leader需要满足两个条件:</p><ul><li>拿到半数以上的票</li><li>票数大于设置的number值</li></ul><p>之后leader会选出新的主节点,将从节点指向新主节点,通知客户端主节点更换,将旧主节点变为从节点</p><p><strong>那么，这个选新主节点的规则是怎样的呢？是在所有的从节点中随机选取还是遵循某种规则呢？</strong></p><ol><li><p>首先会根据优先级进行选择，可以在配置文件中进行配置，添加replica-priority配置项（默认是100），越小表示优先级越高。</p></li><li><p>如果优先级一样，那就选择偏移量最大的</p></li><li><p>要是还选不出来，那就选择runid（启动时随机生成的）最小的。</p></li></ol><h3 id="集群模式">集群模式</h3><p>如果我们服务器的内存不够用了，但是现在我们的Redis又需要继续存储内容，那么这个时候就可以利用集群来实现扩容。</p><p>因为单机的内存容量最大就那么多，已经没办法再继续扩展了，但是现在又需要存储更多的内容，这时我们就可以让N台机器上的Redis来分别存储各个部分的数据（每个Redis可以存储1/N的数据量），这样就实现了容量的横向扩展。同时每台Redis还可以配一个从节点，这样就可以更好地保证数据的安全性。</p><p><img src="https://pb01.s3.bitiful.net/6.png" alt="avatar"></p><h4 id="集群的作用">集群的作用</h4><ul><li><p><strong>数据分区</strong>：数据分区(或称数据分片)是集群最核心的功能。</p><ul><li>集群将数据分散到多个节点，一方面突破了Redis单机内存大小的限制，存储容量大大增加；另一方面每个主节点都可以对外提供读服务和写服务，大大提高了集群的响应能力。</li><li>Redis单机内存大小受限问题，在介绍主从复制时有提及；例如，如果单机内存太大，bgsave和bgrewriteaof的fork操作可能导致主进程阻塞，主从环境下主机切换时可能导致从节点长时间无法提供服务，全量复制阶段主节点的复制缓冲区可能溢出。</li></ul></li><li><p><strong>高可用</strong>：集群支持主从复制和主节点的自动故障转移（与哨兵类似）；当任一节点发生故障时，集群仍然可以对外提供服务。</p></li></ul><p>那么问题来，现在用户来了一个写入的请求，数据该写到哪个节点上呢？我们来研究一下<strong>集群的机制</strong>：</p><p>首先，一个Redis集群包含16384个插槽，集群中的每个Redis 实例负责维护一部分插槽以及插槽所映射的键值数据，那么这个插槽是什么意思呢？</p><p>实际上，插槽就是键的Hash计算后的一个结果，注意这里出现了计算机网络中的<strong>CRC循环冗余校验</strong>，这里采用CRC16，能得到16个bit位的数据，也就是说算出来之后结果是0-65535之间，再进行取模，得到最终结果：</p><p><strong>Redis key的路由计算公式</strong>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>s</mi><mi>l</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>C</mi><mi>R</mi><mi>C</mi><mn>16</mn><mo stretchy="false">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">)</mo><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mn>16384</mn></mrow><annotation encoding="application/x-tex">slot = CRC16(key)\mod  16384 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">CRC</span><span class="mord">16</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">16384</span></span></span></span></span></p><p>结果的值是多少，就应该存放到对应维护的Redis下，比如Redis节点1负责0-25565的插槽，而这时客户端插入了一个新的数据a=10，a在Hash计算后结果为666，那么a就应该存放到1号Redis节点中。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式理论CAP原则和BASE理论</title>
      <link href="/2023/11/12/CAP%E5%8E%9F%E5%88%99/"/>
      <url>/2023/11/12/CAP%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式理论CAP原则和BASE理论">分布式理论CAP原则和BASE理论</h2><hr><h3 id="CAP原则">CAP原则</h3><p>CAP原则又称CAP定理，指的是在一个分布式系统中，存在<strong>Consistency（一致性）、Availability（可用性）、Partition tolerance（分区容错性）</strong>，三者不可同时保证，最多只能保证其中的两者。</p><ul><li><p>一致性（C）：在分布式系统中的所有数据备份，在同一时刻都是同样的值（所有的节点无论何时访问都能拿到最新的值）</p></li><li><p>可用性（A）：系统中非故障节点收到的每个请求都必须得到响应（比如服务降级和熔断，其实就是一种维持可用性的措施，虽然服务返回的是没有什么意义的数据，但是不至于用户的请求会被服务器忽略）</p></li><li><p>分区容错性（P）：一个分布式系统里面，节点之间组成的网络本来应该是连通的，然而可能因为一些故障（比如网络丢包等，这是很难避免的），使得有些节点之间不连通了，整个网络就分成了几块区域，数据就散布在了这些不连通的区域中（这样就可能出现某些被分区节点存放的数据访问失败，我们需要来容忍这些不可靠的情况）</p></li></ul><p>总的来说，数据存放的节点数越多，分区容错性就越高，但是要复制更新的次数就越多，一致性就越难保证。同时为了保证一致性，更新所有节点数据所需要的时间就越长，那么可用性就会降低。</p><p>所以说，只能存在以下三种方案：</p><h4 id="AC-可用性-一致性">AC 可用性+一致性</h4><p>要同时保证可用性和一致性，代表着要保障节点故障后分布式系统的可用以及某个节点数据更新之后，可以立即将结果通知给其他节点，这样才能及时响应保证一致性，这就对网络的稳定性要求非常高。但是实际情况下，网络很容易出现丢包等情况，并不是一个可靠的传输，这会导致很多问题。比如用于检测节点是否健康的心跳检测机制，由于网络抖动，它的状况会被一部分节点误判；网络问题还有可能导致系统内多个节点数据不一致，系统为了达成“数据一致态”，会不断触发重试机制，造成外部请求阻塞，一直无法成功写入。如果需要避免这种问题，就只能将节点全部放在一起，但是这显然违背了分布式系统的概念，所以对于我们的分布式系统来说，是几乎不可能实现的。</p><h4 id="CP-一致性-分区容错性">CP 一致性+分区容错性</h4><p>为了保证一致性，那么就得将某个节点的最新数据发送给其他节点，并且需要等到所有节点都得到数据才能进行响应，同时有了分区容错性，那么代表我们可以容忍网络的不可靠问题，所以就算网络出现卡顿，那么也必须等待所有节点完成数据同步，才能进行响应，因此就会导致服务在一段时间内完全失效，所以可用性是无法得到保证的。</p><h4 id="AP-可用性-分区容错性">AP 可用性+分区容错性</h4><p>既然CP可能会导致一段时间内服务得不到任何响应，那么要保证可用性，就只能放弃节点之间数据的高度统一，也就是说可以在数据不统一的情况下，进行响应，因此就无法保证一致性了。虽然这样会导致拿不到最新的数据，但是只要数据同步操作在后台继续运行，一定能够在某一时刻完成所有节点数据的同步，那么就能实现最终一致性，所以AP实际上是最能接受的一种方案。</p><h3 id="BASE理论">BASE理论</h3><p>Basically Available、Soft state、Eventually consistent简称为<code>BASE理论</code>，由eBay系统架构师Dan Pritchett于2008年发布，该理论提出了三个概念：</p><ul><li><p>BA(基本可用): 分布式系统在出现故障时，允许<code>损失部分可用性</code>，即<code>保证核心可用</code>，而其他非核心可用性可以暂时停止服务。比如电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。</p></li><li><p>S(软状态): 软状态是指允许系统中的数据存在<code>中间状态</code>，而该中间状态的存在不会影响系统的整体可用性。就比如传统关系型数据库里的事务机制，假设没有事务机制，写入数据就只有成功、失败两种状态，而有了事务机制后，在成功与失败之间，多了一个中间态，即：数据写入成功，事务暂未提交，这个中间态的存在，也不会影响数据库整体的可用性。</p></li><li><p>E(最终一致性): 最终一致性是指系统中的所有数据副本，在经过一段时间的同步后，最终能够达到一致的状态。在BASE理论中，最终一致性是和软状态绑定的，两者需要结合在一起理解。前面说到，软状态允许系统内存在中间态，但要记住：如果这个中间态，一直不变成终态，而是卡在那里的话，就会影响系统整体的可用性。比如一个事务处于中间态（写入成功，但一直不提交）；当其他请求继续对该事务操作的数据行进行更新时，就会被阻塞，从而影响了系统的可用性，这就违背了“软状态”的定义。</p></li></ul><h4 id="BASE和CAP的关系">BASE和CAP的关系</h4><p><code>有人说BASE理论是对CAP理论的延伸</code>：BASE理论认为，即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性，即BASE理论是在CAP基础上，满足AP后对C方面的拓展与延伸。<code>其实这种认知是错误的</code>， BASE理论中的一致性和CAP中的一致性并不相同，CAP中的一致性是要保证分布式系统中每个节点在同一时间的数据的，即每个节点中存储的数据是相同的，而BASE理论中的一致性和数据库的ACID特性中的一致性是差不多的意思。</p><p>ACID中的一致性: 一个事务执行前后，数据库只能从一个一致状态转变为另一个一致状态。比如小明要往小红的账户转10万元，小明的账户原本有66万，小红的账户原本有56万，小明转了10万元之后，小明的账户就变成了56万，小红的账户就变成了66万，而总的钱不变，仍为122万元，这就是一个一致性状态的转变。CAP的一致性，关注的是数据一致性；BASE的一致性，关注的是状态一致性。与其说BASE理论是对CAP理论的延伸，不如说BASE理论是对ACID理论的延伸(<code>特指分布式场景</code>)。</p><p>CAP和BASE中对于可用性的定义是不同的：CAP中A节点出现故障, 去B节点也可以得到相同的响应(CAP中的节点是全量复制的,理想情况下解释完全相同的). 而在BASE中, 基本可用是用来降低风险的, 不同的节点是完全不同的, 可以类比为将数据库做了水平拆分, 如果总共10个节点, 三个挂了, 只会有30%的用户受到影响.</p><p>CAP理论更局限于分布式存储领域, 而BASE理论适用于各类分布式系统, 其中定义的三个概念，覆盖了分布式系统的大多数场景.</p>]]></content>
      
      
      <categories>
          
          <category> 设计原则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象六大设计原则</title>
      <link href="/2023/11/04/%E9%9D%A2%E7%9B%B8%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2023/11/04/%E9%9D%A2%E7%9B%B8%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象六大设计原则">面向对象六大设计原则</h2><hr><h4 id="单一职责原则-Single-Responsibility-Principle">单一职责原则(Single Responsibility Principle)</h4><p>主要指的是一个类,方法,接口中只实现单一职责,这样能够提升代码可读性,可维护性也大大提高,有效避免了屎山代码的出现(<strong>确信</strong>),进行功能变更时的风险也会降低.</p><h4 id="开闭原则-Open-Closed-Principle">开闭原则(Open Closed Principle)</h4><p><strong>对于扩展开放,对于修改封闭.</strong></p><p>一个软件实体应该通过扩展来实现变化,而不是通过修改已有的代码实现变化.这是为软件实体的未来事件而制定的对现行开发设计进行约束的一个原则.</p><p>比如一个类可能有多方需要调用,有时部分调用方有了新的需求,这时不能直接修改类的代码来更改功能,而是需求方将这个类继承过去再进行添加,修改功能,这样出问题不会影响其他调用方,真正做到高内聚,低耦合.</p><p>其实类的例子还不够准确,一般都是先将职责方法抽象成接口,然后再根据各自需求的不同进行具体实现.</p><h4 id="里式替换原则-Liskov-Substitution-Principle">里式替换原则(Liskov Substitution Principle)</h4><p><strong>所有引用基类的地方必须能够透明地使用其子类的对象.</strong></p><p>通俗点说，只要父类能出现的地方子类就可以出现,而且替换为子类也不会产生任何异常.但是反过来就不行了,因为子类可以扩展父类没有的功能,同时子类还不能改变父类原有的功能.</p><p>里氏替换原则为良好的继承定义了一个规范，它包含了4层含义：</p><p>1、子类可以实现父类的抽象方法,但是不能覆盖父类的非抽象方法.</p><p>2、子类可以有自己的个性,可以有自己的属性和方法.</p><p>3、子类覆盖或重载父类的方法时输入参数可以被放大.</p><p>4、子类覆盖或重载父类的方法时输出结果可以被缩小,也就是说返回值要小于或等于父类的方法返回值.</p><h4 id="迪米特法则-Law-of-Demeter">迪米特法则(Law of Demeter)</h4><p><strong>一个对象应尽量减少对其他对象的了解.</strong></p><p>一个类应该对自己需要耦合或调用的类知道的最少,类与类之间的关系越密切,耦合度越大,那么类的变化对其耦合的类的影响也会越大,这也是我们面向设计的核心原则:高内聚,低耦合.</p><h4 id="接口隔离原则-Interface-Segregation-Principle">接口隔离原则(Interface Segregation Principle)</h4><p><strong>客户端不应该依赖它不需要的接口</strong></p><p>意思就是客户端需要什么接口就提供什么接口，把不需要的接口剔除掉，这就需要对接口进行细化，保证接口的纯洁性。换成另一种说法就是，类间的依赖关系应该建立在最小的接口上，也就是建立单一的接口。</p><p>你可能会疑惑，建立单一接口，这不是单一职责原则吗？其实不是，单一职责原则要求的是类和接口职责单一，注重的是职责，一个职责的接口是可以有多个方法的，而接口隔离原则要求的是接口的方法尽量少，模块尽量单一，如果需要提供给客户端很多的模块，那么就要相应的定义多个接口，不要把所有的模块功能都定义在一个接口中，那样会显得很臃肿。</p><h4 id="依赖倒置原则-Dependency-Inversion-Principle">依赖倒置原则(Dependency Inversion Principle)</h4><p><strong>高层模块不应该依赖底层模块,两者都应该依赖其抽象;</strong><br><strong>抽象不应该依赖细节;</strong><br><strong>细节应该依赖抽象.</strong></p><p>抽象就是指接口或抽象类，两者都不能被实例化；而细节就是实现接口或继承抽象类产生的类，也就是可以被实例化的实现类。依赖倒置原则是指模块间的依赖是通过抽象来发生的，实现类之间不发生直接的依赖关系，其依赖关系是通过接口是来实现的，这就是俗称的面向接口编程。</p><p>不知道有没有细心的同学发现,这六大原则的首字母可以组成一个单词:SOLID,可能这就是这六大设计原则想达到的目标吧.</p><h4 id="References">References</h4><ul><li>《设计模式之禅》第二版</li><li>《重学Java设计模式》by xfg</li><li><a href="https://blog.csdn.net/txaz6/article/details/120138199" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">面向对象设计的六大设计原则</a><br>…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计原则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乐观锁和悲观锁</title>
      <link href="/2023/10/30/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/"/>
      <url>/2023/10/30/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="乐观锁和悲观锁">乐观锁和悲观锁</h2><h3 id="乐观锁">乐观锁</h3><p>乐观认为不会有别的线程与它来抢占修改,直接对数据进行修改,在提交的时候进行检查,看是否有别的线程修改过数据,如果修改过,就放弃修改,返回错误或者重试.</p><p>乐观锁一般有两种实现方式:<strong>版本号机制和CAS算法</strong></p><h4 id="版本号机制-redis采用的方案">版本号机制(redis采用的方案)</h4><p>一般是在数据表中加上一个数据版本号 version 字段，表示数据被修改的次数。当数据被修改时，version 值会加一。当线程 A 要更新数据值时，在读取数据的同时也会读取 version 值，在提交更新时，若刚才读取到的 version 值为当前数据库中的 version 值相等时才更新，否则重试更新操作，直到更新成功。</p><h4 id="CAS算法">CAS算法</h4><p>CAS 的全称是 <strong>Compare And Swap（比较与交换）</strong> ，用于实现乐观锁，被广泛应用于各大框架中。CAS 的思想很简单，就是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。</p><p>CAS算法会有一个<strong>巨大的问题</strong>,就是<em><strong>ABA问题</strong></em>.如果一个变量 V 初次读取的时候是 A 值，并且在准备赋值的时候检查到它仍然是 A 值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回 A，那 CAS 操作就会误认为它从来没有被修改过。ABA 问题的解决思路是在变量前面追加上<strong>版本号或者时间戳(java采用的方案)</strong>。</p><p>CAS算法还有一个<strong>问题</strong>就是<strong>循环时间长开销大</strong>.CAS 经常会用到自旋操作来进行重试，也就是不成功就一直循环执行直到成功。如果长时间不成功，会给 CPU 带来非常大的执行开销。</p><h4 id="乐观锁的特点：">乐观锁的特点：</h4><p>1.乐观锁适用于并发读操作较多的场景，因为读操作不涉及到数据的修改，不需要加锁。<br>2.乐观锁在更新数据时，只有在提交更新操作时才对数据进行版本检查，减少了加锁和解锁的开销。<br>3.乐观锁可能需要进行重试，以处理并发修改引起的冲突。</p><h3 id="悲观锁">悲观锁</h3><p>悲观锁总认为会别的线程回来抢占修改,于是采用一种<strong>防御的姿态</strong>将数据锁住,所以每次在获取资源操作的时候都会上锁，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放。也就是说，共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程。</p><h4 id="悲观锁的特点：">悲观锁的特点：</h4><p>1.悲观锁适用于并发写操作较多的场景，因为写操作涉及到数据的修改，需要保证数据的一致性。<br>2.悲观锁在加锁期间，其他线程无法访问被锁定的资源，从而保证了数据的完整性。<br>3.悲观锁需要频繁地进行加锁和解锁操作，开销较大。</p>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>经典组合问题</title>
      <link href="/2023/10/18/%E7%BB%8F%E5%85%B8%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98/"/>
      <url>/2023/10/18/%E7%BB%8F%E5%85%B8%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="经典组合问题">经典组合问题</h1><hr><p>在<strong>Leetcode</strong>刷过<strong>回溯算法</strong>的同学应该都知道,组合问题是回溯算法中经典的一种题型</p><p>本篇博客给大家介绍的就是组合问题三兄弟:<br><em><strong>39.数组总和</strong></em><br><em><strong>40.数组总和II</strong></em><br><em><strong>216.数组总和III</strong></em></p><p>为什么我想说说这三道题呢,因为这三道题的本质就是套回溯算法的模版</p><p>属于只要弄明白了,那么组合问题就一定没问题了,甚至大部分的回溯算法问题也能够解决</p><p>回溯法（back tracking）（探索与回溯法）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。<strong>但当探索到某一步时，发现原先选择并不优或达不到目标，就退回到上一步，重新选择</strong>,这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。</p><p>回溯算法的关键在于找到终止条件,无论是子过程结束的终止条件,还是回退到上一步的终止条件.</p><p>例如 <strong>39数组总和</strong> 这道题中子过程的终止条件为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">    ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回退到上一步的终止条件为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(target-candidates[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是解决问题的关键</p><p><strong>回溯算法模版(伪代码版)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(参数)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">        backtracking(路径，选择列表); <span class="comment">// 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>回溯算法模版(详细版)就是39数组总和的代码</strong></p><h2 id="39数组总和">39数组总和</h2><h4 id="1-标准回溯">1.标准回溯</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtrack(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target-candidates[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(candidates[i]);</span><br><span class="line">            backtrack(candidates,target-candidates[i],i);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="40数组总和II">40数组总和II</h2><p>跟39题非常像,就是要防止重复出现的子集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        combine(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">combine</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target-candidates[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;start&amp;&amp;candidates[i]==candidates[i-<span class="number">1</span>])&#123;<span class="comment">//最关键的就是这个</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(candidates[i]);</span><br><span class="line">            combine(candidates,target-candidates[i],i+<span class="number">1</span>);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="216数组总和III">216数组总和III</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=k)&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        combine(k,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">combine</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> n,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">                ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n-i&lt;<span class="number">0</span>||k&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(i);</span><br><span class="line">            combine(k-<span class="number">1</span>,n-i,i+<span class="number">1</span>);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sde </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>估值原理听后感</title>
      <link href="/2023/10/12/%E4%BC%B0%E5%80%BC%E5%8E%9F%E7%90%86/"/>
      <url>/2023/10/12/%E4%BC%B0%E5%80%BC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="估值原理听后感">估值原理听后感</h1><hr><p>写本文的原因是在小宇宙上听了面基的一期播客:<a href="https://www.xiaoyuzhoufm.com/episode/6523d01550cf691d244cf8d5?s=eyJ1IjoiNjQ2MzY1NThlZGNlNjcxMDRhZjVlY2Q5In0%3D" style="color: #177cb0; text-decoration: underline;text-decoration-style: dotted;">《估值原理》:从没想过还可以这么看估值!</a>,给了我一些思考和启发</p><h2 id="估值">估值</h2><p>估值是指评定一项资产当时价值的过程,这是百度百科的定义</p><p>那价值又是什么呢?价值,泛指客体对于主体表现出来的积极意义和有用性.这也是百度百科的定义.</p><p>所以说价值这个东西是因人而异的,每个人都有不同的观念,他们对同一样资产(物品)的看法是不同的,因而同一样资产对不同人来说具有不同的价值.</p><p>比如说,钻石,对于我这种理工科直男来说就是好看一点的碳,没有特殊的价值,但在另一些人眼里就是爱情的象征.</p><p>可虽然对不同的人来说资产的价值是有很大差异的,但是这些资产在市场上基本有着相对稳定的价格,这就可以引出这本书的一个观点:<strong>价值游戏论</strong></p><h2 id="价值游戏论">价值游戏论</h2><p>价格是估值的最直观体现,所以人们总觉得,估值来源于交易,而交易脱胎于市场.但这其实是一种误解,市场只是提供了交易便利和清算服务而已,估值来自社会</p><p>如果一个社会要提倡某种价值观，就一定会用相应的资产去体现这种价值观.或者说,当一个社会决定用一场游戏来解决某个社会问题时,他们会根据情况选择是棒球赛还是足球赛还是篮球赛</p><p>这场游戏需要一些特定的美德、秩序、规范、共识,这些被鼓励的东西都需要一个很具体的载体.这个载体就是那颗球,那颗球就是被全社会追捧的资产,它一定享受高估值</p><p>房产、股票、黄金、碳排放额，任何一项资产都符合且服从于各自社会的估值体系。这些估值体系根植于全社会的思想观念和风俗习惯之中。</p><p>为什么有的国家股票涨得厉害?</p><p>为什么同一时期有的国家房产涨得厉害而股票却一跌再跌?</p><p>为什么央行释放了流动性，结果却导致房价上涨，股价下跌?</p><p>这是因为人们用资产在玩不同的游戏，使用了不同的规则导致的.所以，在价格涨跌之外，要观察大家在玩什么游戏？观察大家注重什么？要解决什么问题？</p><p>举几个例子:</p><p><strong>1.</strong><br>在金本位时代，这个社会会鼓励勤俭和孝顺。</p><p>因为货币以黄金为锚，很难超发，勤俭节约是有效的，本质是在储存有效购买力。</p><p>但一个人在践行勤俭节约的「美德」，往往是为了自己和孩子积攒更多的生活资料</p><p>金本位时代也一定鼓励储蓄这个美德，储蓄意味着不提现，不去兑换实物黄金。因为金本位时代的黄金储备根本不足以应对大量提取实物黄金。金本位就是一个承诺而已。</p><p>英格兰银行鼓励你把纸币存入银行，并支付利息，它对日常的纸币兑换黄金保证照付不议，它维护物价稳定，提倡省吃俭用，量入为出，他给你足够多的理由不去提取黄金，安心持有纸币。</p><p>喜欢储蓄，意味着拥有更多黄金，从而拥有更高的社会地位。</p><p>同时，当全社会都在玩这个游戏时，没什么出路的英国人也热衷去海外拓展殖民地获得更多的黄金，以便回国后提高自己的社会地位。</p><p><strong>2.</strong><br>在信用本位时代，把一堆钞票像黄金一样留给后代已经值不了几个钱了，社会需要别的传承资产。</p><p><em><strong>如果社会选择了房产游戏，它就在鼓励「勇敢」和「坚忍」。一个人必须勇敢地背上高额房贷，同时坚忍地努力工作30年来偿还月供。</strong></em></p><p>对男人来说，房产就像女人的钻石，那是阶层等级的标识，有了它，意味着择偶优先权。</p><p>房价越贵，就会有更多的年轻人对其趋之若骛，努力奋斗。而黄金的价格涨幅远远落后于房地产价格的涨幅。这说明我们现在和金本位时代玩的就是两种不同的游戏。</p><p><strong>3.</strong><br>如果社会选择了股票游戏，它就在鼓励「独立」和「效率」两种美德。</p><p>公司需要想办法，尤其是依靠科技和创新来提高社会的效率，以便拿到更高的估值。</p><p>本书作者周洛华也是一位股民，他以前并没有意识到股票是提升效率游戏的球，房产是地位晋升游戏的球。</p><p>他把股票当成了让自己地位晋升的球，结果他炒股总是亏钱。</p><p><strong>从游戏的角度看待估值，就会发现这场游戏把散户套在高位还是挺合理的。</strong></p><p><strong>只有把大量的散户投资人套在高位，才能使得他们放弃财富自由的幻想，才能使得他们努力工作。</strong></p><p><strong>这个社会没办法同时快速地让人大规模地发财。</strong></p><hr><p>当某项资产成为国民性的关键资产时，<strong>它一定是「低换手率」的</strong>。或者说，这类资产的换手率一定是被刻意压低的。</p><p>比如我们刚提到的，金本位时代鼓励储蓄，从而降低了黄金兑换。</p><p>再比如我们一线楼市之前的认房又认贷，京沪存量房源大概800万套，但每年的成交量只有二三十万套，年换手率不到5%。</p><p>只要共识还在、信心还在，你知道卖的时候市场的承接力接得住，也愿意接，那就长期持有。</p><p>金本位时代，大家愿意持有纸币而不是黄金，因为他们知道只要去英格兰银行，纸币就可以换出黄金。</p><p>类似的，大家相信京沪永远涨，就愿意持有房子，而不是急于把它抛掉。</p><p>大家相信美股长牛，就愿意持有股票，而不是像2020年3月那样在市场上疯狂抛售。</p><p><em><strong>社会在玩不同的游戏,就会导致不同的资产成为国民性资产,比如中国的房产,美国的股票,欧洲的债券,这不仅仅是由社会的发展阶段决定的,还夹杂了制定规则的阶级的强烈意志(他们总要保障自己的利益)</strong></em></p><p>只有少数的人能get到游戏的规则,从而获取高额收益,并且要时刻警醒,关注游戏规则,否则之前获得的高额收益很快就会消失</p><p>说个最近看到的例子,美国疯狂印钞大放水,美国政府的欠债也越来越多,可是他们的负债率却下降了,原因是在这场大放水中他们使资产的上涨幅度超过了负债的上涨幅度.正应了拜登曾说的一句话,<strong>通胀不是什么可怕的东西,通胀是一种武器.</strong></p><p>这就是美国的游戏,我们在他人制定的游戏规则里,永远不可能成为最终赢家,或者说我们不可能一直赢下去.</p><h2 id="估值责任论">估值责任论</h2><p><strong>社会有显然的分成倾向。而且它不仅分层，还会垂直流动。</strong></p><p>中产和底层人民相互流动,只有最顶层相对稳定.这其实就是游戏规则的制定者希望看到的,他们永远处于最顶层,通过改变规则使得社会更加高效,社会的整体素质提高,获得更多的利益,得到更好的服务.</p><p>经济学教科书里有两种「和平方式」来实现垂直流动——</p><p>一是个体提高效率，勤奋努力的人会提高自己的社会地位。</p><p>二是全面的经济危机，主要是每当中层和上层过于拥挤时，通过危机出清掉一批人，给后来者腾出比赛场地。</p><p>有趣的是，每次切换游戏后，社会的主流价值观和风尚也会随之改变。人们会谴责上一场游戏中的胜者，从他们身上总结出一大堆缺点和毛病，并将其视为他们财富消亡的原因。</p><p>其实就是原来的游戏可能因为社会各阶层固化而无法刺激大家努力奋斗，玩不下去了(少数人的利益无法得到更好的保障了)</p><p>与此同时，接下来社会还会崇尚一种新的风尚，用来解释为什么有些人在新一轮经济繁荣中胜出。</p><p><strong>归根到底，是社会换了个新游戏。</strong></p><p>所以，每次金融危机发生之前，社会总是一片繁荣，人们已经习惯于相信自己的才能、努力和眼光。</p><p>每次危机之前，社会中上层都已经人满为患。</p><p>类似的，牛市末期有个重要特征，就是大家都在讨论财富自由和提前退休。<strong>呵呵，没门！社会不会答应的，它不会让那么多人都实现财富自由，进入上流社会，游山玩水，游手好闲，最后安享晚年。</strong></p><p>如果真的这样，那将是一场系统的灾难。</p><h2 id="结束的话">结束的话</h2><p>在本篇博客中,我只介绍了《估值原理》这本书中的一部分内容,是我认可的主要部分,当然也夹杂了一些个人的看法,希望大家多多包涵一个年轻人不成熟的观点.想要了解更多,可以去小宇宙听这篇博客,也可以自己买来这本书阅读,最后感谢您的阅读.</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
